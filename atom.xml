<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乘风破浪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.python100.com/"/>
  <updated>2018-07-13T09:08:17.628Z</updated>
  <id>http://www.python100.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进程线程</title>
    <link href="http://www.python100.com/2018/07/03/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://www.python100.com/2018/07/03/进程线程/</id>
    <published>2018-07-03T14:19:00.000Z</published>
    <updated>2018-07-13T09:08:17.628Z</updated>
    
    <content type="html"><![CDATA[<p> 进程、线程、多线程相关总结</p><p>一、说说概念</p><p>1、进程（process）</p><p>狭义定义：进程就是一段程序的执行过程。</p><p>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p><p>简单的来讲进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。</p><p>进程状态：进程有三个状态，就绪、运行和阻塞。就绪状态其实就是获取了出cpu外的所有资源，只要处理器分配资源就可以马上执行。就绪状态有排队序列什么的，排队原则不再赘述。运行态就是获得了处理器分配的资源，程序开始执行。阻塞态，当程序条件不够时候，需要等待条件满足时候才能执行，如等待i/o操作时候，此刻的状态就叫阻塞态。</p><p>2、程序</p><p>说起进程，就不得不说下程序。先看定义：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。而进程则是在处理机上的一次执行过程，它是一个动态的概念。这个不难理解，其实进程是包含程序的，进程的执行离不开程序，进程中的文本区域就是代码区，也就是程序。</p><p>3、线程</p><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</p><p>4、多线程</p><p>在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p><p>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。</p><p>二、说说区别</p><p>1、进程与线程的区别：</p><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p><p>1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</p><p>2) 线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p>4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><p>三、说说优缺点</p><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP(多核处理机)机器上运行，而进程则可以跨机器迁移。</p><p>四、总结</p><p>入职第一天闲的无聊，参考下别人的总结自己也简单总结了下。知道以上的基本面试够用了，至于进程、线程的细节，底层构成，调度等问题是操作系统的东西。我就不详述了。</p><p>五、实例</p><p>1、多线程写日志，涉及到单例模式，异步写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 进程、线程、多线程相关总结&lt;/p&gt;
&lt;p&gt;一、说说概念&lt;/p&gt;
&lt;p&gt;1、进程（process）&lt;/p&gt;
&lt;p&gt;狭义定义：进程就是一段程序的执行过程。&lt;/p&gt;
&lt;p&gt;广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，
      
    
    </summary>
    
      <category term="进程线程" scheme="http://www.python100.com/categories/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>git和markdown使用总结</title>
    <link href="http://www.python100.com/2018/06/21/git%E5%92%8Cmarkdown%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://www.python100.com/2018/06/21/git和markdown使用总结/</id>
    <published>2018-06-20T18:36:00.000Z</published>
    <updated>2018-06-20T19:44:05.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-上传更新代码步骤"><a href="#git-上传更新代码步骤" class="headerlink" title="git 上传更新代码步骤"></a>git 上传更新代码步骤</h1><pre><code>- git pull   #先拉取最新代码- 将自己的写好的代码放入到相应的文件夹下，比如op/issues- 如果有图片将对应的图片也复制到当前目录下的img下- git add 自己加入到的文件和图片- git commit 自己加入和文件和图片 -m  message- 这里如果不加-m message 选项可能会push不成功，最好加上- git push   #上传自己新加的文件到GitHub</code></pre><h1 id="markdown语法总结"><a href="#markdown语法总结" class="headerlink" title="markdown语法总结"></a>markdown语法总结</h1><h2 id="图片"><a href="#图片" class="headerlink" title="- 图片"></a>- 图片</h2><pre><code>方法一：    - 加入图片，格式是 ![]()    - 其中的[]中的内容可以自定义，比如[log]    - ()中写使用该图片的文件相对图片的相对路径方法二：    &lt;img src=&quot;img/1.jpg&quot; width=256 height=256 /&gt;</code></pre><h3 id="图片引用方法一实例"><a href="#图片引用方法一实例" class="headerlink" title="图片引用方法一实例"></a>图片引用方法一实例</h3><pre><code>此时img文件夹和当前文档在同一级目录下</code></pre><p><img src="/img/1.jpg" alt=""><br><img src="/img/2.jpg" alt=""></p><h3 id="图片引用方法二实例，可以控制图片大小"><a href="#图片引用方法二实例，可以控制图片大小" class="headerlink" title="图片引用方法二实例，可以控制图片大小"></a>图片引用方法二实例，可以控制图片大小</h3><p><img src="img/1.jpg" width="256" height="256"><br><img src="img/2.jpg" width="256" height="256"></p><h3 id="让图片居中的方法，使用div标签"><a href="#让图片居中的方法，使用div标签" class="headerlink" title="让图片居中的方法，使用div标签"></a>让图片居中的方法，使用div标签</h3><div align="center"><br><img src="img/1.jpg" width="256" height="256"><br></div><h2 id="斜体"><a href="#斜体" class="headerlink" title="- 斜体"></a>- 斜体</h2><pre><code>- 用左右各一个 *的方式包裹住文字就是斜体的语法</code></pre><h2 id="粗体"><a href="#粗体" class="headerlink" title="- 粗体"></a>- 粗体</h2><pre><code>- 用左右各两个**的方式包裹住文字就是粗体的语法</code></pre><h2 id="改变字体大小"><a href="#改变字体大小" class="headerlink" title="- 改变字体大小"></a>- 改变字体大小</h2><pre><code>- 一个字、一句话、一个段落加上#就可以改变字体的大小</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="- 分割线"></a>- 分割线</h2><pre><code>- 输入三个--就可以得到分割线</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="- 引用"></a>- 引用</h2><pre><code>-在内容首位加入&gt;符号即可</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="- 表格"></a>- 表格</h2><pre><code>1、 原生的表格语法    | 嘻嘻 | 哈哈 | 呵呵    | :------------- :|:-------------:| :-----:|    | 你好|我好|大家好 |    | 是的| 是的 | 是的 |2、 也可以使用html语言来实现，实例如下    &lt;table&gt;      &lt;tr&gt;        &lt;th width=10%, bgcolor=yellow &gt;参数&lt;/th&gt;        &lt;th width=40%, bgcolor=yellow&gt;详细解释&lt;/th&gt;        &lt;th width=50%, bgcolor=yellow&gt;备注&lt;/th&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td bgcolor=#eeeeee&gt; -l &lt;/td&gt;        &lt;td&gt; use a long listing format  &lt;/td&gt;        &lt;td&gt; 以长列表方式显示（显示出文件/文件夹详细信息）  &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td bgcolor=#00FF00&gt;-t &lt;/td&gt;        &lt;td&gt; sort by modification time &lt;/td&gt;        &lt;td&gt; 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） &lt;/td&gt;      &lt;tr&gt;        &lt;td bgcolor=rgb(0,10,0)&gt;-r &lt;/td&gt;        &lt;td&gt; reverse order while sorting &lt;/td&gt;        &lt;td&gt;  逆序排列 &lt;/td&gt;      &lt;/tr&gt;    &lt;/table&gt;</code></pre><h1 id="html方式实现表格实例"><a href="#html方式实现表格实例" class="headerlink" title="html方式实现表格实例"></a>html方式实现表格实例</h1><table><br>  <tr><br>    <th width="10%," bgcolor="yellow">参数</th><br>    <th width="40%," bgcolor="yellow">详细解释</th><br>    <th width="50%," bgcolor="yellow">备注</th><br>  </tr><br>  <tr><br>    <td bgcolor="#eeeeee"> -l </td><br>    <td> use a long listing format  </td><br>    <td> 以长列表方式显示（显示出文件/文件夹详细信息）  </td><br>  </tr><br>  <tr><br>    <td bgcolor="#00FF00">-t </td><br>    <td> sort by modification time </td><br>    <td> 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） </td><br>  </tr><tr><br>    <td bgcolor="rgb(0,10,0)">-r </td><br>    <td> reverse order while sorting </td><br>    <td>  逆序排列 </td><br>  </tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-上传更新代码步骤&quot;&gt;&lt;a href=&quot;#git-上传更新代码步骤&quot; class=&quot;headerlink&quot; title=&quot;git 上传更新代码步骤&quot;&gt;&lt;/a&gt;git 上传更新代码步骤&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;- git pull   #先拉取最新代码

      
    
    </summary>
    
    
      <category term="git&amp;markdown语法" scheme="http://www.python100.com/tags/git-markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python笔记</title>
    <link href="http://www.python100.com/2018/06/21/%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.python100.com/2018/06/21/笔记/</id>
    <published>2018-06-20T18:36:00.000Z</published>
    <updated>2018-06-20T19:22:31.996Z</updated>
    
    <content type="html"><![CDATA[<hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一个粗心的发报员在发送莫尔斯电码（Morse Code）的时候，忘记在发送字母和单词之间停顿，结果收报系统收到的是下面这样的一个没有分隔符的点（.）划（-）的序列（请忽略换行符）。</span><br><span class="line"> </span><br><span class="line">.-.-....-.-...--.-...-....--...-.-...-.--.------..-...-..-.-.---...-..-..---..-..</span><br><span class="line">....--..-.--.-...-.--......-.........-..-.----.-.....-....--.-.-.--.-..---..-....</span><br><span class="line">..-...-..-.--.-.----......-.--.-----..-------.-.-..---.-.-.--..-.-...............</span><br><span class="line">--...--....--..-....-.-----.....-...-------.-......-.........-..-..--.-....-...--</span><br><span class="line">....-.--.-.....--..-.....--..-.---.--...-.-.-..-.-.....---.-.-.-.----....-..-....</span><br><span class="line">.--..----......-...-.--.-...--.....--.....-.......-....---..-..--...-------.--...</span><br><span class="line">.---..---.....-.-.-....-.-...--..-....---..--.--...-.-.-..-.-.....---.-.-.-.----.</span><br><span class="line">...-..-.....--..----.</span><br><span class="line"> </span><br><span class="line">已知这份报文的原始内容是一部著名英文小说的片段，请问，这部小说的作者是：</span><br><span class="line"> </span><br><span class="line">(A) H. G. Wells</span><br><span class="line">(B) J. K. Rowling</span><br><span class="line">(C) Isaac Asimov</span><br><span class="line">(D) Lewis Carroll</span><br><span class="line">(E) Jack London</span><br><span class="line">(F) Stephen King</span><br><span class="line">(G) J. R. R. Tolkien</span><br><span class="line">(H) Edgar Rice Burroughs</span><br><span class="line"> </span><br><span class="line">请写出本题解题的主要思路，以及解题时使用的主要代码片段：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">15分钟</span><br><span class="line">1. 排序方式：DESC | ASCE，分别表示按降序和升序排列，大小写不敏感</span><br><span class="line">2. 一组十进制整数字符串，以&quot;,&quot;符号作为分隔符</span><br><span class="line">例子：</span><br><span class="line">DESC 789,123,456</span><br><span class="line">ASCE 234,567,89</span><br><span class="line"></span><br><span class="line">排序方式DESC ASCE请忽略大小写</span><br><span class="line">输出描述:</span><br><span class="line">按指定排序方式排序后得到的十进制整数字符串；</span><br><span class="line">输出的数字字符串数组，以&quot;,&quot;字符作为分隔符。</span><br><span class="line">示例1</span><br><span class="line">输入</span><br><span class="line">DESC 789,123,456</span><br><span class="line">输出</span><br><span class="line">789,456,123</span><br><span class="line">#Python Ruby C/C++ PHP Java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">海投简历标准：</span><br><span class="line">1：头像：不要用真人的</span><br><span class="line">2：专业技能列表：多丰富一些</span><br><span class="line">了解的也写上 敲门砖</span><br><span class="line">3：项目经验</span><br><span class="line">看着写</span><br><span class="line">4：不要写培训</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>对象是什么？：对象是一个<strong>模型</strong><ul><li>IT行业 这就是一个对象<ul><li>C/C++，Python，PHP，Java 细节</li></ul></li><li>楼房：平房，四合院，公寓</li><li>面：刀削面，牛肉丸子面，方便面</li></ul></li><li>为什么这些可以称作是一个模型？：<ul><li>有特征、有共同点</li><li>把共同点组合起来，就可以抽象的总结出来一个模型</li><li>那么这个模型就叫做对象</li></ul></li></ul><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><ul><li><p>class用来定义一个<strong>类</strong>(一个共同点的模型)：</p><ul><li><p>属性：</p><ul><li>函数：方法，人们喜欢把类中的函数叫方法</li><li>变量：字符串，列表，元组，字典，集合</li></ul></li><li><p>类：一个属性集合</p></li><li><p>实例：在内存里通过模型实例化创建的数据</p><ul><li>实例是一个容器一样，包含了所有类里的属性，而且是实际存在于内存中的</li></ul></li><li><p>实例化：通过类名括号的方式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">pass</span><br><span class="line">a = A() <span class="comment"># 实例化</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>面向对象的语法中，我们可以通过xxx.xxxx来获取到对应的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">mylist.remove(<span class="number">2</span>)</span><br><span class="line">mylist</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>Python中处处皆对象</p></li></ul><h1 id="self指针的意义"><a href="#self指针的意义" class="headerlink" title="self指针的意义"></a>self指针的意义</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.self是一个将我们函数声明为单独为一个实例工作的参数</span><br><span class="line"></span><br><span class="line">2.每一个加了self的函数或者变量 都只能为自己的实例来工作</span><br><span class="line">c1.run()</span><br><span class="line">c2.run()</span><br><span class="line"></span><br><span class="line">3.在实例调用的时候，当前实例都会覆盖掉self</span><br><span class="line"></span><br><span class="line">4.self用来指向当前工作实例</span><br><span class="line">self是约定俗称的命名，你也可以叫别的，但是一般都叫self</span><br></pre></td></tr></table></figure><p>#<strong>init</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__init__函数为每一个实例进行数据的初始化工作</span><br><span class="line">构造函数 X</span><br><span class="line">数据初始化函数 √ </span><br><span class="line">就是为了给实例创建属于自己的变量</span><br><span class="line">__init__函数在实例化过程中自动调用，不需要你手动的来调用</span><br><span class="line">__init__函数不允许有返回值，一旦有返回值，那么就报错啦</span><br><span class="line">TypeError: __init__() should return None, not &apos;int&apos;</span><br><span class="line">类型错误： 该函数必须返回一个None，而不是int</span><br></pre></td></tr></table></figure><p>郑州市金水区聚源路与宏图街交叉口聚源国际大厦1309</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="python" scheme="http://www.python100.com/tags/python/"/>
    
  </entry>
  
</feed>
