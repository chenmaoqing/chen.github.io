<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乘风破浪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.python100.com/"/>
  <updated>2018-07-24T10:17:24.624Z</updated>
  <id>http://www.python100.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kvm安装</title>
    <link href="http://www.python100.com/2018/07/24/%E5%AE%89%E8%A3%85kvm/"/>
    <id>http://www.python100.com/2018/07/24/安装kvm/</id>
    <published>2018-07-24T10:09:00.000Z</published>
    <updated>2018-07-24T10:17:24.624Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><p>VMware虚机在启动之前开启CPU虚拟化<br><img src="/images/kvm/虚拟化" alt="1"></p><p>1、安装桌面GUI</p><pre><code>yum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot; </code></pre><p>2、安装kvm</p><pre><code>yum -y install libcanberra-gtk2 qemu-kvm.x86_64 qemu-kvm-tools.x86_64  libvirt.x86_64 libvirt-cim.x86_64 libvirt-client.x86_64 libvirt-java.noarch  libvirt-python.x86_64 libiscsi-1.7.0-5.el6.x86_64  dbus-devel  virt-clone tunctl virt-manager libvirt libvirt-python python-virtinst</code></pre><p>查看kvm模块是否已经安装成功<br><img src="/images/kvm/lsmod" alt="2"></p><p>3、安装桥接网络，并设置/</p><p>yum -y install bridge-utils</p><p><img src="/images/kvm/br0" alt="3"></p><p><img src="/images/kvm/ifconfig" alt="4"></p><p>设置完成后重启网络，并查看网络</p><pre><code>[root@localhost network-scripts]# brctl showbridge name    bridge id        STP enabled    interfacesbr0        8000.000c29c12e49    yes        ens37virbr0        8000.525400c9ff4e    yes        virbr0-nic</code></pre><p>4、重启libvirt,设置开机自启动</p><pre><code>systemctl start libvirtdsystemctl enable libvirtd</code></pre><p>5、使用virt-manager图形化来管理kvm虚机<br><img src="/images/kvm/1-1" alt="1531910233741"><br><img src="/images/kvm/1-2" alt="1531910233741"><br><img src="/images/kvm/1-3" alt="1531910233741"><br><img src="/images/kvm/1-4" alt="1531910233741"><br><img src="/images/kvm/1-5" alt="1531910233741"><br><img src="/images/kvm/1-6" alt="1531910233741"><br><img src="/images/kvm/1-7" alt="1531910233741"><br><img src="/images/kvm/1-8" alt="1531910233741"><br><img src="/images/kvm/1-9" alt="1531910233741"><br><img src="/images/kvm/1-10" alt="1531910233741"></p><p>之后就是正常安装系统的步骤</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;p&gt;VMware虚机在启动之前开启CPU虚拟化&lt;br&gt;&lt;img src=&quot;/images/kvm/虚拟化&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;p&gt;1、安装桌面GUI&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> mongo安装和使用</title>
    <link href="http://www.python100.com/2018/07/24/Mongo%E5%AE%89%E8%A3%85%E5%8F%8A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
    <id>http://www.python100.com/2018/07/24/Mongo安装及用户认证/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:24:28.399Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h1 id="mongo安装和使用"><a href="#mongo安装和使用" class="headerlink" title="mongo安装和使用"></a>mongo安装和使用</h1><p>#<br>安装mongo</p><p>参考文档：<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/</a></p><h3 id="yum安装，先获取repo源"><a href="#yum安装，先获取repo源" class="headerlink" title="yum安装，先获取repo源"></a>yum安装，先获取repo源</h3><pre><code>[mongodb-enterprise]name=MongoDB Enterprise Repositorybaseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/3.6/$basearch/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</code></pre><p>sudo yum install -y mongodb-enterprise #安装最新mongo，默认会依赖安装下面的包</p><pre><code>mongodb-enterprise,mongodb-enterprise-server,mongodb-enterprise-shell,mongodb-enterprise-mongos,mongodb-enterprise-tools</code></pre><p>安装指定版本使用下面命令</p><pre><code>yum install -y mongodb-enterprise-3.6.5 mongodb-enterprise-server-3.6.5 mongodb-enterprise-shell-3.6.5 mongodb-enterprise-mongos-3.6.5 mongodb-enterprise-tools-3.6.5</code></pre><p>启动使用</p><pre><code>systemctl start mongodservice mongod start/stop/restartchkconfig mongod onmongo --host 127.0.0.1:27017</code></pre><p>数据目录</p><pre><code>日志：/var/log/mongodb数据：/var/lig/mongo</code></pre><h3 id="使用resource安装"><a href="#使用resource安装" class="headerlink" title="使用resource安装"></a>使用resource安装</h3><p>获取Mongo的安装包：</p><pre><code>curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgztar -xf mongodb-linux-x86_64-3.4.6.tgzmv mongodb-3.4.6 /usr/local/mongodbcd /usr/local/mongodb手动创建db和log目录mkdir -p /data/dbmkdir /data/logtouch /data/log/mongodb.log</code></pre><p>启动mongo</p><pre><code>./bin/mongod  --dbpath /data/db --logpath /data/log/mongodb.log --fork --port 27017--dbpath 数据存储目录--logpath mongo运行日志记录--fork 是后台运行--port  是运行的端口（默认是27017）</code></pre><p><img src="/images/mongo/mongo1.jpg" alt="mongo1"></p><p>出现如上图的字样就说明启动成功了</p><p>进入数据库</p><pre><code>./bin/mongo  </code></pre><p><img src="/images/mongo/mongo2.jpg" alt="mongo2"></p><h3 id="mongodb数据简介"><a href="#mongodb数据简介" class="headerlink" title="mongodb数据简介"></a>mongodb数据简介</h3><pre><code>mongodb是一个介于nosql数据库和mysql数据库之间的一个数据存储系统，它没有严格的数据格式，但同时支持复杂查询，而且自带sharding模式和Replica Set模式，支持分片模式，复制模式，自动故障处理，自动故障转移，自动扩容，全内容索引，动态查询等功能。扩展性和功能都比较强大。mongodb在数据查询方面，支持类sql查询，可以一个key多value内容，可以组合多个value内容来查询，支持索引，支持联合索引，支持复杂查询 ，支持排序，基本上除了join和事务类型的操作外，mongodb支持所有mysql支持的查询，甚至某个客户端api支持直接使用sql语句查询mongodb。mongodb的sharding功能目前日渐完善，支持自定义范围分片，hash自动分片等，分片自动扩容，shard之间自动负载均衡等功能。实际使用中功能还不错。mongodb 文档数据库,存储的是文档(Bson-&gt;json的二进制化).特点:内部执行引擎为JS解释器, 把文档存储成bson结构,在查询时,转换为JS对象,并可以通过熟悉的js语法来操作.mongo和传统型数据库相比,最大的不同:传统型数据库: 结构化数据, 定好了表结构后,每一行的内容,必是符合表结构的,就是说--列的个数,类型都一样.mongo文档型数据库: 表下的每篇文档,都可以有自己独特的结构(json对象都可以有自己独特的属性和值)</code></pre><p>安装目录下，bin下脚本作用</p><p><img src="/images/mongo/mongo3.png" alt="mongo3"></p><p>##mongo数据库的用户验证##<br>超级账号创建<br>&gt; db.createUser(<br>… … {<br>… … user:”admin”,<br>… … pwd:”admin123”,<br>… … roles:[ { role:”userAdminAnyDatabase”,db:”admin”}]<br>… … } )</p><pre><code>创建完成后，修改mongo启动的配置文件，加入auth=ondbpath=/data/dblogpath=/data/log/mongodb.confport=27017auth=onfork=truelogappend=true杀死mongo的所有进程，pkill -9 mongo  重新启动mongod(server)[root@www1 mongodb]# ~/bin/mongod -f conf/mongodb.conf about to fork child process, waiting until server is ready for connections.forked process: 18135child process started successfully, parent exiting[root@www1 mongodb]# ./bin/mongo  启动mongo(client)&gt; show dbs2018-06-24T21:47:19.974+0800 E QUERY    [thread1] Error: listDatabases failed:{    &quot;ok&quot; : 0,    &quot;errmsg&quot; : &quot;not authorized on admin to execute command { listDatabases: 1.0, $db: \&quot;admin\&quot; }&quot;,    &quot;code&quot; : 13,    &quot;codeName&quot; : &quot;Unauthorized&quot;} :这时无法show dbs就没有权限查看数据库了，需要使用admin来验证登陆&gt; db.auth(&apos;admin&apos;,&apos;admin123&apos;)1返回1表示已经验证成功 &gt; show dbsadmin   0.000GBconfig  0.000GBdata    0.000GBlocal   0.000GB此时admin验证成功，但是每个数据库此时会要有自己的认证用户若要查看某一个数据库的数据，还要使用admin超管为每个数据库创建账号，并认证登陆需要注意的是在建立data数据库用户的时候一定要先启用data数据库，否则会出现问题&gt;use data&gt;db.createUser({user:&apos;u1&apos;,pwd:&apos;123qwe&apos;,roles:[{role:&apos;readWrite&apos;,db:&apos;data&apos;}]})&gt; db.auth(&apos;u1&apos;,&apos;123qwe&apos;)1&gt; show collectionsstu</code></pre><p>超管密码忘记，更改密码步骤：</p><p>1、更改配置文件，将auth=true注释掉，或者true改为false</p><p>2、重启mongo</p><pre><code>pkill -9 mongo  ./bin/mongod -f conf/mongodb.conf./bin/mongo&gt;use admin&gt; db.system.users.find()  #查找admin用户&gt; db.system.users.remove({&apos;_id&apos;:&apos;data.admin&apos;}) #根据id将admin用户删除，然后重新建admin&gt; &gt; db.createUser(    ... ... {    ... ...    user:&quot;admin&quot;,    ... ...    pwd:&quot;admin123&quot;,    ... ...    roles:[ { role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;}]    ... ... } )db.createUser({ user:&quot;admin&quot;,pwd:&quot;admin123&quot;, roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;}]})</code></pre><p>3、再次kill掉mongo，将auth改为true后进行重启</p><h2 id="mongo数据库Role"><a href="#mongo数据库Role" class="headerlink" title="mongo数据库Role"></a>mongo数据库Role</h2><pre><code>Built-In Roles（内置角色）：1. 数据库用户角色：read、readWrite;2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；4. 备份恢复角色：backup、restore；5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase6. 超级用户角色：root  // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）7. 内部角色：__systemRead：允许用户读取指定数据库readWrite：允许用户读写指定数据库dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profileuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。root：只在admin数据库中可用。超级账号，超级权限userAdminAnyDatabase 权限只是针对用户管理的，对其他是没有权限的。mongodump --port=27020 -uzjyr -pzjyr --db=test -o backup   #只要读权限就可以备份mongorestore --port=27020 -uzjy -pzjy --db=test backup/test/  #读写权限可以进行还原更新用户密码    use xx    db.changeUserPassword(&quot;username&quot;,&quot;newpassword&quot;)删除用户    切换到用户授权的db    use xx    执行删除操作    db.dropUser(&quot;username&quot;)更新用户    切换到用户授权的db    use xx    执行更新    字段会覆盖原来的内容    db.updateUser(&quot;username&quot;,{        pwd:&quot;new password&quot;,        customData:{            &quot;title&quot;:&quot;PHP developer&quot;        }    })查看角色信息    use admin    db.getRole(&quot;rolename&quot;,{showPrivileges:true})删除角色    use admin    db.dropRole(&quot;rolename&quot;)更新用户密码查看用户信息    use admin    db.getUser(&quot;username&quot;)</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongo安装和使用&quot;&gt;&lt;a href=&quot;#mongo安装和使用&quot; class=&quot;headerlink&quot; title=&quot;mongo安装和使
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql数据库迁移如mongo数据库步骤</title>
    <link href="http://www.python100.com/2018/07/24/cq%E5%B9%B3%E5%8F%B0%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.python100.com/2018/07/24/cq平台迁移数据库备份步骤/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:26:36.891Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><p>备份MySQL</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@db:/<span class="comment"># mysqldump -uroot -p -d campus&gt;campus.sql  </span></span><br><span class="line"><span class="comment">#密码 Passwrd</span></span><br></pre></td></tr></table></figure><p>备份Mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@mongo:~<span class="comment"># mongodump -d user -o user</span></span><br><span class="line">root@mongo:~<span class="comment"># mongodump -d store -o store</span></span><br></pre></td></tr></table></figure><p>将MySQL备份成Mongo格式，使用python脚本来实现，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql,os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">host=<span class="string">'192.168.100.100'</span></span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">user=<span class="string">'root'</span></span><br><span class="line">password=<span class="string">'123qwe'</span></span><br><span class="line">database=<span class="string">'data'</span></span><br><span class="line"><span class="comment">#存放导出的数据的路径</span></span><br><span class="line">BASE_DIR=<span class="string">"D:\\mygit\\old\\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义连接数据库的引擎</span></span><br><span class="line">dbconn=pymysql.connect(</span><br><span class="line">    host=host,</span><br><span class="line">    port=port,</span><br><span class="line">    user=user,</span><br><span class="line">    password=password,</span><br><span class="line">    database=database,</span><br><span class="line">    charset=<span class="string">'utf8'</span>,</span><br><span class="line">    cursorclass=pymysql.cursors.DictCursor</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">table_list=[]</span><br><span class="line"><span class="comment">#查询数据库中的表的sql语句</span></span><br><span class="line">tab_sql=<span class="string">"show tables;"</span></span><br><span class="line"><span class="comment">#获取查询数据库游标</span></span><br><span class="line">cursor=dbconn.cursor()</span><br><span class="line"><span class="comment">#执行查询所有表</span></span><br><span class="line">cursor.execute(tab_sql)</span><br><span class="line"><span class="comment">#获取查询的结果，结果是一系列字典组成的字典</span></span><br><span class="line">res=cursor.fetchall()</span><br><span class="line"><span class="comment">#使用循环，将具体的表名从结果中取出来存入存放到一个列表中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">    table_list.append(res[i][<span class="string">'Tables_in_%s'</span>%database])</span><br><span class="line"><span class="comment"># print(table_list)</span></span><br><span class="line">cursor.close()</span><br><span class="line">dbconn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> table_list:</span><br><span class="line">    print((<span class="string">"%s表中数据"</span>%t).center(<span class="number">50</span>,<span class="string">"*"</span>))</span><br><span class="line">    <span class="comment">#为每一个表新建一个文件，保存输出的结果</span></span><br><span class="line">    path=BASE_DIR+t</span><br><span class="line">    fp=open(path,<span class="string">'w'</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    conn=pymysql.connect(</span><br><span class="line">        host=host,</span><br><span class="line">        port=port,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        database=database,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        cursorclass=pymysql.cursors.DictCursor</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cursor=conn.cursor()</span><br><span class="line">    print(cursor)</span><br><span class="line">    sql=<span class="string">"select * from %s"</span>%t</span><br><span class="line">    print(sql)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    res =cursor.fetchall()</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> res:</span><br><span class="line">        fileds=var.keys()</span><br><span class="line">        fp.write(str(var))</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure><p>将导出的文件导入Mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">BASE_PATH=<span class="string">"/root/old"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls <span class="variable">$BASE_PATH</span>` :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    echo <span class="variable">$var</span></span><br><span class="line">    <span class="comment">#mongoimport -uadmin -pPassw0rd  -d old  -c $var $BASE_PATH/$var</span></span><br><span class="line">    mongoimport   -d  old  -c  <span class="variable">$var</span> <span class="variable">$BASE_PATH</span>/<span class="variable">$var</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>将MySQL导出为csv格式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uusername -ppassword -h <span class="number">172.16</span>.<span class="number">81.236</span> –D my_db  --default-character-set=gbk  -e <span class="string">'select * from server_warning_unrepaired'</span>  | sed <span class="string">'s/\t/","/g;s/^/"/;s/$/"/;s/\n//g'</span> &gt; /tmp/file.csv</span><br></pre></td></tr></table></figure><p>将csv到如到mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport --db network1 --collection networkmanagement --type csv --headerline --ignoreBlanks --file /home/erik/Documents/networkmanagement-<span class="number">1</span>.csv</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;p&gt;备份MySQL&lt;/p&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
      <category term="mysql迁移" scheme="http://www.python100.com/tags/mysql%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>docker设置本地仓库</title>
    <link href="http://www.python100.com/2018/07/24/docker_registry/"/>
    <id>http://www.python100.com/2018/07/24/docker_registry/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:20:14.325Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h3 id="account-chenqmc"><a href="#account-chenqmc" class="headerlink" title="account:chenqmc"></a>account:chenqmc</h3><pre><code>openssl req -newkey rsa:4096 -nodes -sha256 -keyout ${HOSTNAME}.key -x509 -days 365 -out ${HOSTNAME}.crt</code></pre><h3 id="vim-etc-docker-daemon-json"><a href="#vim-etc-docker-daemon-json" class="headerlink" title="vim /etc/docker/daemon.json"></a>vim /etc/docker/daemon.json</h3><pre><code>{&quot;registry-mirrors&quot;: [&quot;http://187193f5.m.daocloud.io&quot;]}</code></pre><h3 id="拉取registry"><a href="#拉取registry" class="headerlink" title="拉取registry"></a>拉取registry</h3><pre><code>docker pull registry</code></pre><h3 id="启动registry"><a href="#启动registry" class="headerlink" title="启动registry"></a>启动registry</h3><pre><code>docker run -d -p 5000:5000 -v  /opt/data/registry:/tmp/registry  registry</code></pre><h3 id="将镜像进行tag打包，传入本地镜像"><a href="#将镜像进行tag打包，传入本地镜像" class="headerlink" title="将镜像进行tag打包，传入本地镜像"></a>将镜像进行tag打包，传入本地镜像</h3><pre><code>[root@www1 ~]# docker tag 471e783ffeca 127.0.0.1:5000/mdc-cas[root@www1 ~]# docker push 127.0.0.1:5000/mdc-cas</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;account-chenqmc&quot;&gt;&lt;a href=&quot;#account-chenqmc&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="docker" scheme="http://www.python100.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>linux系统根目录扩容</title>
    <link href="http://www.python100.com/2018/07/24/%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/"/>
    <id>http://www.python100.com/2018/07/24/根目录扩容/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:09:02.326Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>VMware的虚机根目录空间不足，添加一个100g磁盘，然后给根目录进行磁盘扩展</p><p>原磁盘：/dev/sda 20g</p><p>新磁盘：/dev/sdb 100g</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs        <span class="number">17</span>G  <span class="number">8.7</span>G  <span class="number">8.4</span>G  <span class="number">51</span>% /</span><br><span class="line">devtmpfs                devtmpfs  <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G   <span class="number">11</span>M  <span class="number">1.5</span>G   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs      <span class="number">1014</span>M  <span class="number">137</span>M  <span class="number">878</span>M  <span class="number">14</span>% /boot</span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M  <span class="number">4.0</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M   <span class="number">28</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">1000</span></span><br><span class="line">/dev/sr0                iso9660   <span class="number">4.2</span>G  <span class="number">4.2</span>G     <span class="number">0</span> <span class="number">100</span>% /run/media/qmc/CentOS <span class="number">7</span> x86_64</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># pvcreate /dev/sdb</span></span><br><span class="line">  Physical volume <span class="string">"/dev/sdb"</span> successfully created.</span><br><span class="line"> [root@server ~]<span class="comment"># vgs     #查看当前卷组名centos</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class="line">  centos   <span class="number">1</span>   <span class="number">2</span>   <span class="number">0</span> wz--n- &lt;<span class="number">19.00</span>g    <span class="number">0</span> </span><br><span class="line">[root@server ~]<span class="comment"># vgextend  centos /dev/sdb</span></span><br><span class="line">  Volume group <span class="string">"centos"</span> successfully extended</span><br><span class="line">[root@server ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree   </span></span><br><span class="line">  centos   <span class="number">2</span>   <span class="number">2</span>   <span class="number">0</span> wz--n- <span class="number">118.99</span>g &lt;<span class="number">100.00</span>g</span><br><span class="line">[root@server ~]<span class="comment"># lvextend /dev/centos/root /dev/sdb </span></span><br><span class="line">  Size of logical volume centos/root changed from &lt;<span class="number">17.00</span> GiB (<span class="number">4351</span> extents) to <span class="number">116.99</span> GiB (<span class="number">29950</span> extents).</span><br><span class="line">  Logical volume centos/root successfully resized.</span><br><span class="line">[root@server ~]<span class="comment"># xfs_growfs /dev/mapper/centos-root </span></span><br><span class="line">meta-data=/dev/mapper/centos-root isize=<span class="number">512</span>    agcount=<span class="number">4</span>, agsize=<span class="number">1113856</span> blks</span><br><span class="line">         =                       sectsz=<span class="number">512</span>   attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">         =                       crc=<span class="number">1</span>        finobt=<span class="number">0</span> spinodes=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span>     =                       bsize=<span class="number">4096</span>   blocks=<span class="number">4455424</span>, imaxpct=<span class="number">25</span></span><br><span class="line">         =                       sunit=<span class="number">0</span>      swidth=<span class="number">0</span> blks</span><br><span class="line">naming   =version <span class="number">2</span>              bsize=<span class="number">4096</span>   ascii-ci=<span class="number">0</span> ftype=<span class="number">1</span></span><br><span class="line">log      =internal               bsize=<span class="number">4096</span>   blocks=<span class="number">2560</span>, version=<span class="number">2</span></span><br><span class="line">         =                       sectsz=<span class="number">512</span>   sunit=<span class="number">0</span> blks, lazy-count=<span class="number">1</span></span><br><span class="line">realtime =none                   extsz=<span class="number">4096</span>   blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span> blocks changed from <span class="number">4455424</span> to <span class="number">30668800</span></span><br><span class="line">[root@server ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs       <span class="number">117</span>G  <span class="number">8.7</span>G  <span class="number">109</span>G   <span class="number">8</span>% /</span><br><span class="line">devtmpfs                devtmpfs  <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G   <span class="number">11</span>M  <span class="number">1.5</span>G   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs      <span class="number">1014</span>M  <span class="number">137</span>M  <span class="number">878</span>M  <span class="number">14</span>% /boot</span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M  <span class="number">4.0</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M   <span class="number">28</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">1000</span></span><br><span class="line">/dev/sr0                iso9660   <span class="number">4.2</span>G  <span class="number">4.2</span>G     <span class="number">0</span> <span class="number">100</span>% /run/media/qmc/CentOS <span class="number">7</span> x86_64</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;VMware的虚机根目录空间不足，添加一个100g磁盘，然后给根目录进行磁盘扩展&lt;/p&gt;&lt;p&gt;原磁盘：/dev/sda 20g&lt;/p&gt;&lt;p&gt;新磁盘：
      
    
    </summary>
    
      <category term="根目录扩容" scheme="http://www.python100.com/categories/%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="http://www.python100.com/2018/07/24/hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.python100.com/2018/07/24/hexo搭建/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:19:15.999Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install npm git</span><br><span class="line">mkdir /hexo</span><br><span class="line">cd /hexo</span><br><span class="line">hexo init </span><br><span class="line">npm install</span><br><span class="line">   npm install --save  hexo-admin </span><br><span class="line">npm install hexo-cli</span><br><span class="line">   hexo server</span><br></pre></td></tr></table></figure><h3 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">清理缓存命令：hexo clean</span><br><span class="line">重新构建项目：hexo generate</span><br><span class="line">启动server: hexo server -p 4000 </span><br><span class="line">提交改动到git：hexo deploy</span><br><span class="line">新建标签页：hexo new page tags</span><br></pre></td></tr></table></figure><h3 id="3、博客主题下载网址"><a href="#3、博客主题下载网址" class="headerlink" title="3、博客主题下载网址"></a>3、博客主题下载网址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/themes/</span><br></pre></td></tr></table></figure><p>4、</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;f
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.python100.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.python100.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>zfs和gluster安装</title>
    <link href="http://www.python100.com/2018/07/24/centos7%E4%B8%8A%E5%AE%89%E8%A3%85zfs%E5%92%8Cgluster/"/>
    <id>http://www.python100.com/2018/07/24/centos7上安装zfs和gluster/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:22:25.110Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>在同一台主机上zfs和gluster无法同时安装</p><p><strong>centos7上安装zfs</strong></p><p><a href="https://blog.csdn.net/linuxnews/article/details/51286358" target="_blank" rel="noopener">https://blog.csdn.net/linuxnews/article/details/51286358</a></p><p>1、获取163yum源</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>2、安装zfs的yum源</p><p>yum -y install <a href="http://download.zfsonlinux.org/epel/zfs-release.el7_3.noarch.rpm" target="_blank" rel="noopener">http://download.zfsonlinux.org/epel/zfs-release.el7_3.noarch.rpm</a></p><p>3、安装zfs</p><p>yum -y install kernel zfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall --nogpgcheck http://epel.mirror.net.in/epel/7/x86_64/e/epel-release-7-5.noarch.rpm</span><br><span class="line">yum localinstall --nogpgcheck http://archive.zfsonlinux.org/epel/zfs-release.el7.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-devel zfs</span><br></pre></td></tr></table></figure><p>zfs命令 ——&gt; <a href="https://docs.oracle.com/cd/E26926_01/html/E29115/zfs-1m.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E26926_01/html/E29115/zfs-1m.html</a></p><p>zpool命令 ——&gt; <a href="https://docs.oracle.com/cd/E26926_01/html/E29115/zpool-1m.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E26926_01/html/E29115/zpool-1m.html</a></p><p><strong>安装gluster</strong></p><p>1、获取163yum源</p><p>​ wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>2、安装最新版本的gluster软件仓库：</p><p>​ yum -y install centos-release-gluster310</p><p>3、安装gluster软件：</p><p>​ yum -y install glusterfs glusterfs-server glusterfs-fuse glusterfs-cli glusterfs-geo-replication</p><p>4、 查看版本信息：</p><p>​ glusterfs -V</p><p>CentOS 7 升级内核到4.4.6 LTS</p><p>rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org" target="_blank" rel="noopener">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a></p><p>rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm" target="_blank" rel="noopener">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a></p><p>yum –enablerepo=elrepo-kernel install kernel-lt-devel kernel-lt -y</p><p>awk -F\’ ‘$1==”menuentry “ {print $2}’ /etc/grub2.cfg</p><p>grub2-set-default xxxx reboot</p><p>uname -r</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;在同一台主机上zfs和gluster无法同时安装&lt;/p&gt;&lt;p&gt;&lt;strong&gt;centos7上安装zfs&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="zfs" scheme="http://www.python100.com/categories/zfs/"/>
    
    
      <category term="zfs" scheme="http://www.python100.com/tags/zfs/"/>
    
  </entry>
  
  <entry>
    <title>mongo常用操作</title>
    <link href="http://www.python100.com/2018/07/24/mongo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/mongo常用命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:18:23.348Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h1 id="mongo常用操作"><a href="#mongo常用操作" class="headerlink" title="mongo常用操作"></a>mongo常用操作</h1><p>参考文档：<a href="https://www.jb51.net/article/48217.htm" target="_blank" rel="noopener">https://www.jb51.net/article/48217.htm</a></p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><pre><code>helpdb.help();db.yourColl.help();db.youColl.find().help();rs.help();</code></pre><h2 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h2><pre><code># 查看数据库    show dbs# 切换数据库    use mydatabase# 删除当前数据库    db.dropDatabase()  #进入需要删除的数据库下执行此命令#克隆数据库    db.cloneDatabase(“127.0.0.1”); 将指定机器上的数据库的数据克隆到当前数据库    db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;);将本机的mydb的数据复制到temp数据库中    db.repairDatabase(); 修复当前数据库#获取当前数据库的状态    db.getName();    db;     db和getName方法是一样的效果，都可以查询当前使用的数据库    db.stats(); 显示当前db状态    db.version();  当前db版本    db.getMongo();  查看当前db的链接机器地址</code></pre><h2 id="集合操作-Collection聚集集合"><a href="#集合操作-Collection聚集集合" class="headerlink" title="集合操作 Collection聚集集合"></a>集合操作 Collection聚集集合</h2><pre><code># 查看集合    show collections# 删除集合    db.users.drop()#创建一个聚集集合（table）    db.createCollection(“collName”, {size: 20, capped: 5, max: 100});//创建成功会显示{“ok”:1}    //判断集合是否为定容量db.collName.isCapped();# 得到指定名称的聚集集合（table）    db.getCollection(&quot;account&quot;);# 得到当前db的所有聚集集合    db.getCollectionNames();#显示当前db所有聚集索引的状态    db.printCollectionStats();</code></pre><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><pre><code>插入文档    db.users.insert({       name:&apos;harttle&apos;,       url:&apos;http://harttle.com&apos;    })查询文档    # 查询所有        db.users.find()    # 条件查询        db.users.find({           name:&apos;harttle&apos;        })    # 有缩进的输出 db.users.find().pretty()更新文档    db.users.update({       name:&apos;harttle&apos;    }, {       url:&apos;http://harttle.com&apos;        })删除文档    # 删除所有        db.users.remove({})    # 条件删除        db.users.remove({           url:&apos;http://harttle.com&apos;        })</code></pre><p>##用户操作##</p><pre><code># 添加一个用户    db.addUser(&quot;name&quot;);    db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true); 添加用户、设置密码、是否只读# 数据库认证、安全模式    db.auth(&quot;userName&quot;, &quot;123123&quot;);# 显示当前所有用户    show users;# 删除用户     db.removeUser(&quot;userName&quot;);</code></pre><p>##查询操作##</p><pre><code># 去掉查询结果显示id#查询所有记录    db.userInfo.find();    # 相当于：select* from userInfo;# 查询去掉后的当前聚集集合中的某列的重复数据    db.userInfo.distinct(&quot;name&quot;);   会过滤掉name中的相同数据# 查询age = 22的记录    db.userInfo.find({&quot;age&quot;: 22});# 查询age &gt; 22的记录    db.userInfo.find({age: {$gt: 22}});# 查询age &lt; 22的记录    db.userInfo.find({age: {$lt: 22}});# 查询age &gt;= 25的记录    db.userInfo.find({age: {$gte: 25}});# 查询age &lt;= 25的记录    db.userInfo.find({age: {$lte: 25}});# 查询age &gt;= 23 并且 age &lt;= 26    db.userInfo.find({age: {$gte: 23, $lte: 26}});# 查询name中包含 mongo的数据    db.userInfo.find({name: /mongo/});# 查询name中以mongo开头的    db.userInfo.find({name: /^mongo/});# 查询指定列name、age数据     db.userInfo.find({}, {name: 1, age: 1});# 查询指定列name、age数据, age &gt; 25    db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});# 按照年龄排序    升序：db.userInfo.find().sort({age: 1});    降序：db.userInfo.find().sort({age: -1});# 查询name = zhangsan, age = 22的数据    db.userInfo.find({name: &apos;zhangsan&apos;, age: 22});# 查询前5条数据    db.userInfo.find().limit(5);# 查询10条以后的数据    db.userInfo.find().skip(10);# 查询在5-10之间的数据    db.userInfo.find().limit(10).skip(5);    可用于分页，limit是pageSize，skip是第几页*pageSize# or与 查询    db.userInfo.find({$or: [{age: 22}, {age: 25}]});# 查询第一条数据    db.userInfo.findOne();# 查询某个结果集的记录条数    db.userInfo.find({age: {$gte: 25}}).count();# 按照某列进行排序    db.userInfo.find({sex: {$exists: true}}).count();</code></pre><p>##索引##</p><pre><code># 创建索引    db.userInfo.ensureIndex({name: 1});    db.userInfo.ensureIndex({name: 1, ts: -1});# 查询当前聚集集合所有索引    db.userInfo.getIndexes();# 查看总索引记录大小    db.userInfo.totalIndexSize();# 读取当前集合的所有index信息    db.users.reIndex();# 删除指定索引    db.users.dropIndex(&quot;name_1&quot;);    # 删除所有索引索引    db.users.dropIndexes();</code></pre><p>##修改、添加、删除集合数据##</p><pre><code># 添加    db.users.save({name: ‘zhangsan&apos;, age: 25, sex: true});# 修改    db.users.update({age: 25}, {$set: {name: &apos;changeName&apos;}}, false, true);    相当于：update users set name = ‘changeName&apos; where age = 25;    db.users.update({name: &apos;Lisi&apos;}, {$inc: {age: 50}}, false, true);    相当于：update users set age = age + 50 where name = ‘Lisi&apos;;    db.users.update({name: &apos;Lisi&apos;}, {$inc: {age: 50}, $set: {name: &apos;hoho&apos;}}, false, true);    相当于：update users set age = age + 50, name = ‘hoho&apos; where name = ‘Lisi&apos;;# 删除    db.users.remove({age: 132});# 查询修改删除    db.users.findAndModify({        query: {age: {$gte: 25}},            #query 查询过滤条件 {}         sort: {age: -1},          #如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象        update: {$set: {name: &apos;a2&apos;}, $inc: {age: 2}},        remove: true            #若为true，被选中对象将在返回前被删除     });    db.runCommand({ findandmodify : &quot;users&quot;,        query: {age: {$gte: 25}},        sort: {age: -1},        update: {$set: {name: &apos;a2&apos;}, $inc: {age: 2}},        remove: true    });    #update 或 remove 其中一个是必须的参数; 其他参数可选。</code></pre><p>##语句块操作##</p><pre><code># 简单Hello World    print(&quot;Hello World!&quot;);# 将一个对象转换成json    tojson(new Object());    tojson(new Object(&apos;a&apos;));# 循环添加数据    &gt; for (var i = 0; i &lt; 30; i++) {    ... db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});    ... };    &gt; for (var i = 0; i &lt; 30; i++) db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});# find 游标查询    &gt;var cursor = db.users.find();    &gt; while (cursor.hasNext()) {        printjson(cursor.next());    }# forEach迭代循环    db.users.find().forEach(printjson);    # forEach中必须传递一个函数来处理每条迭代的数据信息    db.things.find({x:4}).forEach(function(x) {print(tojson(x));});  # forEach传递函数显示信息# 将find游标当数组处理    var cursor = db.users.find();    cursor[4];    # 取得下标索引为4的那条数据    # 既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();    # 那样我们也可以用循环显示数据    for (var i = 0, len = c.length(); i &lt; len; i++) printjson(c[i]);# 将find游标转换成数组    &gt; var arr = db.users.find().toArray();    # 用toArray方法将其转换为数组    &gt; printjson(arr[2]);# 定制我们自己的查询结果，只显示age &lt;= 28的并且只显示age这列数据    db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);    db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);    db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);   #排除age序列</code></pre><p>##其他 ##</p><pre><code># 查询之前的错误信息    db.getPrevError();# 清除错误记录    db.resetError();查看聚集集合基本信息1、查看帮助  db.yourColl.help();2、查询当前集合的数据条数  db.yourColl.count();3、查看数据空间大小 db.userInfo.dataSize();4、得到当前聚集集合所在的db db.userInfo.getDB();5、得到当前聚集的状态 db.userInfo.stats();6、得到聚集集合总大小 db.userInfo.totalSize();7、聚集集合储存空间大小 db.userInfo.storageSize();8、Shard版本信息  db.userInfo.getShardVersion()9、聚集集合重命名 db.userInfo.renameCollection(&quot;users&quot;); 将userInfo重命名为users10、删除当前聚集集合 db.userInfo.drop();show dbs:显示数据库列表show collections：显示当前数据库中的集合（类似关系数据库中的表）show users：显示用户use &lt;db name&gt;：切换当前数据库，这和MS-SQL里面的意思一样db.help()：显示数据库操作命令，里面有很多的命令db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongo常用操作&quot;&gt;&lt;a href=&quot;#mongo常用操作&quot; class=&quot;headerlink&quot; title=&quot;mongo常用操作&quot;&gt;
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodump与mongorestore</title>
    <link href="http://www.python100.com/2018/07/24/mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://www.python100.com/2018/07/24/mongo数据库备份与恢复/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:18:06.163Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h1 id="MongoDB-备份-mongodump-与恢复-mongorestore"><a href="#MongoDB-备份-mongodump-与恢复-mongorestore" class="headerlink" title="MongoDB 备份(mongodump)与恢复(mongorestore)"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><ul><li>mongoexport/mongoimport导入/导出的是JSON格式，而mongodump/mongorestore导入/导出的是BSON格式。<br>JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。<br>在一些mongodb版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能<br>不会成功，具体要看版本之间的兼容性。当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即mongoexport/mongoimport是一个可选项。跨版本的mongodump/mongorestore个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。<br>JSON虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。</li></ul><p>mongodump命令脚本语法如下：</p><pre><code>&gt;mongodump -h dbhost -d dbname -o dbdirectory -h：    MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017-d：    需要备份的数据库实例，例如：test-o：    备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，    系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。 </code></pre><p>mongodump –host HOST_NAME –port PORT_NUMBER 该命令将备份所有MongoDB数据<br>mongodump –host runoob.com –port 27017</p><p>[root@www1 mongodb]# mongodump -h localhost -u u1 -p 123qwe -d data -o data_mongo.tar</p><p>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY<br>mongodump –dbpath /data/db/ –out /data/backup/</p><p>mongodump –collection COLLECTION –db DB_NAME 该命令将备份指定数据库的集合。<br>mongodump –collection mycol –db test</p><h1 id="mongorestore"><a href="#mongorestore" class="headerlink" title="mongorestore"></a>mongorestore</h1><p>mogorestore命令脚本语法如下：</p><pre><code>&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;--host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址，默认为： localhost:27017--db , -d ：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2--drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！path：mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。你不能同时指定 &lt;path&gt; 和 --dir 选项，--dir也可以设置备份目录。--dir：指定备份的目录你不能同时指定 &lt;path&gt; 和 --dir 选项。</code></pre><h1 id="mongoexport"><a href="#mongoexport" class="headerlink" title="mongoexport"></a>mongoexport</h1><pre><code>参数    -h:指明数据库宿主机的IP    -u:指明数据库的用户名    -p:指明数据库的密码    -d:指明数据库的名字    -c:指明collection的名字    -f:指明要导出那些列    -o:指明到要导出的文件名    -q:指明导出数据的过滤条件    root@mongo:~/cas.mongo# mongorestore -h mongo:27017 -uadmin -pPassw0rd  -d admin admin    root@mongo:~/cas.mongo# mongorestore -h mongo:27017 -ucas -pPassw0rd  -d cas cas[root@localhost mongodb]# ./bin/mongoexport -d test -c students -o students.dat      -d:指明使用的库，本例中为test    -c:指明要导出的集合，本例中为students    -o:指明要导出的文件名，本例中为students.dat./bin/mongoexport -d test -c students --csv -f classid,name,age -o students_csv.dat     -csv：指明要导出为csv格式    -f：指明需要导出classid、name、age这3列的数据 </code></pre><h1 id="mongoimport"><a href="#mongoimport" class="headerlink" title="mongoimport"></a>mongoimport</h1><pre><code>参数    -h:指明数据库宿主机的IP    -u:指明数据库的用户名    -p:指明数据库的密码    -d:指明数据库的名字    -c:指明collection的名字    -f:指明要导入那些列./bin/mongoimport -d test -c students students.dat     参数说明：    -d:指明数据库名，本例中为test    -c:指明collection名，本例中为students    students.dat：导入的文件名./bin/mongoimport -d test -c students --type csv --headerline --file students_csv.dat       -type:指明要导入的文件格式    -headerline:指明第一行是列名，不需要导入    -file：指明要导入的文件</code></pre><p>–备份单个表</p><pre><code>mongodump -u  superuser -p 123456  --port 27017 --authenticationDatabase admin -d myTest -c d -o /backup/mongodb/myTest_d_bak_201507021701.bak</code></pre><p>–备份单个库</p><pre><code>mongodump  -u  superuser -p 123456 --port 27017  --authenticationDatabase admin -d myTest -o  /backup/mongodb/</code></pre><p>–备份所有库</p><pre><code>mongodump  -u  superuser -p 123456 --authenticationDatabase admin  --port 27017 -o /root/bak </code></pre><p>–备份所有库推荐使用添加–oplog参数的命令，这样的备份是基于某一时间点的快照，只能用于备份全部库时才可用，单库和单表不适用：</p><pre><code>mongodump -h 127.0.0.1 --port 27017   --oplog -o  /root/bak </code></pre><p>–同时，恢复时也要加上–oplogReplay参数，具体命令如下(下面是恢复单库的命令)：</p><pre><code>mongorestore  -d swrd --oplogReplay  /home/mongo/swrdbak/swrd/</code></pre><p>–恢复单个库：</p><pre><code>mongorestore  -u  superuser -p 123456 --port 27017  --authenticationDatabase admin -d myTest   /backup/mongodb/</code></pre><p>–恢复所有库：</p><pre><code>mongorestore   -u  superuser -p 123456 --port 27017  --authenticationDatabase admin  /root/bak</code></pre><p>–恢复单表</p><pre><code>mongorestore -u  superuser -p 123456  --authenticationDatabase admin -d myTest -c d /backup/mongodb/myTest_d_bak_201507021701.bak/myTest/d.bson</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;MongoDB-备份-mongodump-与恢复-mongorestore&quot;&gt;&lt;a href=&quot;#MongoDB-备份-mongodump
      
    
    </summary>
    
      <category term="mogno" scheme="http://www.python100.com/categories/mogno/"/>
    
    
  </entry>
  
  <entry>
    <title>根据PID查看进程启动路径</title>
    <link href="http://www.python100.com/2018/07/24/shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/shell命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:17:01.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据PID查看进程启动路径</span><br><span class="line">cqxyw1 ~ <span class="comment"># ps eho command -p 30143</span></span><br><span class="line">///       MvGJ6F80QE USER=www-data PWD=/tmp HOME=/var/www SHLVL=<span class="number">3</span> _=/usr/bin/nohup OLDPWD=/srv/drupal</span><br><span class="line">根据pid查看网络状况</span><br><span class="line">netstat -pan | grep <span class="number">2337</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">///       MvGJ6F80QE USER=www-data PWD=/tmp HOME=/var/www SHLVL=<span class="number">3</span> _=/usr/bin/nohup OLDPWD=/srv/drupal</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>virsh相关命令</title>
    <link href="http://www.python100.com/2018/07/24/%E5%85%B3%E4%BA%8Evirsh%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/关于virsh相关命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:16:15.780Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h2 id="关于virsh相关命令"><a href="#关于virsh相关命令" class="headerlink" title="关于virsh相关命令"></a>关于virsh相关命令</h2><p>常用文件路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">虚拟机配置文件默认路径：</span><br><span class="line">[root@bainuo qemu]<span class="comment"># pwd</span></span><br><span class="line">/etc/libvirt/qemu</span><br><span class="line">[root@bainuo qemu]<span class="comment"># ls</span></span><br><span class="line">networks  vm01.xml</span><br><span class="line"></span><br><span class="line">磁盘文件默认路径：</span><br><span class="line">[root@bainuo images]<span class="comment"># pwd</span></span><br><span class="line">/var/lib/libvirt/images</span><br><span class="line">[root@bainuo images]<span class="comment"># ls</span></span><br><span class="line">vm01.img</span><br></pre></td></tr></table></figure><h3 id="虚机"><a href="#虚机" class="headerlink" title="虚机"></a>虚机</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">virsh命令参数 功能 用法举例</span><br><span class="line"></span><br><span class="line">list 查看已经存在的domain信息(可以带参数) virsh list --all (查看所有的虚拟机)</span><br><span class="line">start 开始一个不活跃的domain(前提是存在)   virsh start test2</span><br><span class="line">autostart 配置domain随boot启动 virsh autostart test2</span><br><span class="line">shutdown 优雅的关闭domain virsh shutdown test2</span><br><span class="line">destroy 立刻终止一个domain(强制关闭) virsh destroy test2</span><br><span class="line">reboot 重启一个domain(仅仅发送reboot命令)    virsh reboot test2</span><br><span class="line">suspend  挂起服务器   virsh suspend  test2</span><br><span class="line">resume   恢复服务器virsh resume test2</span><br><span class="line"></span><br><span class="line">console 连接domain的虚拟的控制台(只能有<span class="number">1</span>个)  virsh console test2</span><br><span class="line">ttyconsole 输出设备使用的domain的tty console virsh ttyconsole test2</span><br><span class="line">dominfo 返回关于domain的基本信息 virsh dominfo test2</span><br><span class="line">migrate 迁移一个domain到另一台主机  </span><br><span class="line"> </span><br><span class="line">KVM虚拟网络管理命令(virtual network)：</span><br><span class="line">virsh命令参数 功能 用法举例</span><br><span class="line">net-autostart 配置一个虚拟网络开机自启(--disable可以关闭) virsh net-autostart br0</span><br><span class="line">net-create 通过一个xml文件创建一个虚拟网络 virsh net-create ./virbr1.xml</span><br><span class="line">net-define 通过xml文件定义一个虚拟网络，仅定义不实例化 virsh net-define ./virbr1.xml</span><br><span class="line">net-destory 停止由其名称(uuid)指定的虚拟网络，立即生效 virsh net-destroy br0</span><br><span class="line">net-dumpxml 以xml文件的形式输出一个虚拟网络的配置信息 virsh net-dumpxml br0</span><br><span class="line">net-edit 编辑一个虚拟网络的配置文件(修改虚拟网络配置) virsh net-edit br0</span><br><span class="line">net-info 返回要查看的虚拟网络的基本信息 virsh net-info default</span><br><span class="line">net-list 查看当前的虚拟网络信息(可以带参数) virsh net-list --all</span><br><span class="line">net-name  </span><br><span class="line">net-start 开始一个不活跃的虚拟网络 virsh net-start br0</span><br><span class="line">net-undefine 将一个不活跃的虚拟网络取消定义 virsh net-undefine br0</span><br><span class="line">net-uuid  </span><br><span class="line">net-update  </span><br><span class="line"></span><br><span class="line">创建并启用一个网络：net-define -&gt; net-start</span><br><span class="line">virsh net-define br0.xml</span><br><span class="line">virsh net-list --all (有br0网络,但处于不活跃状态)</span><br><span class="line">virsh net-start br0</span><br><span class="line">virsh net-list --all (br0网络已处于活跃状态)</span><br><span class="line"> </span><br><span class="line">停用并删除一个网络(以br0为例)：net-destroy -&gt; net-undefine</span><br><span class="line">virsh net-destroy br0</span><br><span class="line">virsh net-list --all (br0网络变为不活跃状态)</span><br><span class="line">virsh </span><br><span class="line">net-undefine br0</span><br><span class="line">virsh net-list --all (br0网络已被删除)</span><br></pre></td></tr></table></figure><h3 id="存储池"><a href="#存储池" class="headerlink" title="存储池"></a>存储池</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建基于文件夹的存储池</span><br><span class="line"><span class="number">1</span>) 定义一个存储池</span><br><span class="line">virsh pool-define-as kvm_images dir - - - - “/kvm/images”</span><br><span class="line"><span class="number">2</span>) 查看创建的存储池信息</span><br><span class="line">virsh pool-list –all</span><br><span class="line"><span class="number">3</span>) 建立基于文件夹的存储池</span><br><span class="line">virsh pool-build kvm_images</span><br><span class="line"><span class="number">4</span>) 使存储池生效</span><br><span class="line">virsh pool-start kvm_images</span><br><span class="line"><span class="number">5</span>) 这时候，存储池还不是自动运行，使用virsh pool-autostart</span><br><span class="line">virsh pool-autostart kvm_images</span><br><span class="line"><span class="number">6</span>) 验证存储池</span><br><span class="line">virsh pool-info kvm_images</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">　　virsh回车进入交互式界面：</span><br><span class="line"></span><br><span class="line">version</span><br><span class="line">pwd</span><br><span class="line">hostname　　显示本节点主机名</span><br><span class="line">nodeinfo　　  显示节点信息</span><br><span class="line">list --all　　　显示所有云主机</span><br><span class="line"><span class="number">7</span>种状态：</span><br><span class="line"></span><br><span class="line">  running 　　运行中</span><br><span class="line">  idel　　　　 空闲，未运行</span><br><span class="line">  paused　　 暂停状态</span><br><span class="line">  shutdown　关闭</span><br><span class="line">  crashed　　虚拟机崩溃</span><br><span class="line">  dying　　　垂死状态，但是又没有完全关闭或崩溃</span><br><span class="line">  shutdown &lt;domain&gt;　　</span><br><span class="line">  destroy    &lt;domain&gt;　　强制关闭虚拟机（相当于直接拨电源）</span><br><span class="line">  start　　　&lt;domain&gt;　　启动虚拟机</span><br><span class="line">  edit　 &lt;domain&gt;　　　　 编辑该虚拟机的xml文件</span><br><span class="line">  dommemstat &lt;domain&gt;　获取domain的内存状态</span><br><span class="line">  suspend  &lt;domain&gt;　　    挂起一个正在运行的虚拟机，该虚拟机仍占资源；</span><br><span class="line">  resume  &lt;domain&gt;　　　　从挂起状态恢复一下虚拟机</span><br><span class="line">  vcpuinfo &lt;domain&gt;　　　　显示一些虚拟机的vcpu的信息</span><br><span class="line">  vncdisplay  &lt;domain&gt;　　  显示vnc监听地址和端口</span><br></pre></td></tr></table></figure><h3 id="快照相关命令"><a href="#快照相关命令" class="headerlink" title="快照相关命令"></a>快照相关命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snapshot-create &lt;domain&gt; xmlfile 　　给domain创建一个snapshot，详细内容保存在xmlfile中</span><br><span class="line">snapshot-current &lt;domain&gt; 　　　　　显示一个domain的当前的snapshot</span><br><span class="line">snapshot-list &lt;domain&gt;　　　　　　　　 显示一个domain的所有的snapshot</span><br><span class="line">snapshot-revert &lt;domain&gt; snapshot 　　    恢复一个domian到以前的snapshot</span><br><span class="line">snapshot-delete &lt;domain&gt; snapshot --children   删除一个domain的snapshot</span><br></pre></td></tr></table></figure><p>如何用<strong>libvirt</strong>远程管理虚拟机？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">要用libvirt连接到超级管理程序，我们需要一个URI，这个URI配合virsh和virt-viewer命令使用，后面可以跟一些可选项，virt-viewer可以调用一些链接参数，例如：virsh -c qemu:///system 当链接到远程机器时，可以定义几种使用的协议：ssh，tcp，tls。当链接到远程机器时，需要使用远程主机的用户和主机名进行链接，如果没有定义链接用户，则会使用本机环境的<span class="variable">$USER</span>的用户进行链接，当连接到qemu hypervisor时，接受两种链接类型：system可以有所有的访问权限，session有限制的访问。例如：</span><br><span class="line"></span><br><span class="line">使用full access链接至本机的qemu hypervisor，前面的-c 是为了执行后面的list命令(--connect)</span><br><span class="line">virsh -c  qemu:///system list</span><br><span class="line"></span><br><span class="line">使用full access链接至远程主机的qemu hypervisor，每次都要输入ssh密码，改成ssh无密码登陆就不需要输入密码了，直接显示结果。</span><br><span class="line"></span><br><span class="line">　　virsh -c qemu+ssh://tux@mercur/system   直接进入交互virsh模式</span><br><span class="line"></span><br><span class="line">　　virsh -c qemu+ssh://<span class="number">10.1</span>.<span class="number">1.8</span>/system list   直接显示list后的结果</span><br><span class="line"></span><br><span class="line">　　其余连接格式如下：</span><br><span class="line">　　qemu:///session                      (local access to per-user instance)</span><br><span class="line">　　qemu+unix:///session                 (local access to per-user instance)</span><br><span class="line">　　qemu:///system                       (local access to system instance)</span><br><span class="line">　　qemu+unix:///system                  (local access to system instance)</span><br><span class="line">　　qemu://example.com/system            (remote access, TLS/x509)　　</span><br><span class="line">　　qemu+tcp://example.com/system        (remote access, SASl/Kerberos)</span><br><span class="line">　　qemu+ssh:///system   (remote access, SSH tunnelled)</span><br></pre></td></tr></table></figure><h3 id="使用libvirt创建kvm虚拟机："><a href="#使用libvirt创建kvm虚拟机：" class="headerlink" title="使用libvirt创建kvm虚拟机："></a>使用libvirt创建kvm虚拟机：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、制作虚拟机镜像</span><br><span class="line">qemu-img create -f qcow2 test.qcow2 <span class="number">10</span>G //格式，名字，大小</span><br><span class="line"><span class="number">2</span>、下载并复制iso镜像到指定目录（在第<span class="number">3</span>步中创建xml文件中指定）</span><br><span class="line"><span class="number">3</span>、创建安装配置文件，demo.xml如下，可以根据自己需求更改</span><br><span class="line">virsh define  demo.xml　　　　//创建虚拟机</span><br><span class="line">virsh  start    test_ubuntu 　　//启动虚拟机</span><br><span class="line">virsh  vncdisplay   test_ubuntu   ////查看虚拟机的vnc端口， 然后就可以通过vnc登录来完成虚拟机的安装</span><br></pre></td></tr></table></figure><p>demo.xml 内容如下 默认路径在/etc/libvirt/qemu</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain type=<span class="string">'kvm'</span>&gt;</span><br><span class="line">        &lt;name&gt;test_ubuntu&lt;/name&gt; //虚拟机名称</span><br><span class="line">        &lt;memory&gt;<span class="number">1048576</span>&lt;/memory&gt; //最大内存，单位k</span><br><span class="line">        &lt;currentMemory&gt;<span class="number">1048576</span>&lt;/currentMemory&gt; //可用内存，单位k</span><br><span class="line">        &lt;vcpu&gt;<span class="number">8</span>&lt;/vcpu&gt; //虚拟cpu个数</span><br><span class="line">        &lt;os&gt;</span><br><span class="line">          &lt;type arch=<span class="string">'x86_64'</span> machine=<span class="string">'pc'</span>&gt;hvm&lt;/type&gt;</span><br><span class="line">          &lt;boot dev=<span class="string">'cdrom'</span>/&gt; //光盘启动</span><br><span class="line">       &lt;/os&gt;</span><br><span class="line">       &lt;features&gt;</span><br><span class="line">         &lt;acpi/&gt;</span><br><span class="line">         &lt;apic/&gt;</span><br><span class="line">         &lt;pae/&gt;</span><br><span class="line">       &lt;/features&gt;</span><br><span class="line">       &lt;clock offset=<span class="string">'localtime'</span>/&gt;</span><br><span class="line">       &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;</span><br><span class="line">       &lt;on_reboot&gt;restart&lt;/on_reboot&gt;</span><br><span class="line">       &lt;on_crash&gt;destroy&lt;/on_crash&gt;</span><br><span class="line">       &lt;devices&gt;</span><br><span class="line">         &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;</span><br><span class="line">         &lt;disk type=<span class="string">'file'</span> device=<span class="string">'disk'</span>&gt;</span><br><span class="line">          &lt;driver name=<span class="string">'qemu'</span> type=<span class="string">'qcow2'</span>/&gt;</span><br><span class="line">           &lt;source file=<span class="string">'/var/lib/libvirt/images/test.qcow2'</span>/&gt; //目的镜像路径</span><br><span class="line">           &lt;target dev=<span class="string">'hda'</span> bus=<span class="string">'ide'</span>/&gt;</span><br><span class="line">         &lt;/disk&gt;</span><br><span class="line">         &lt;disk type=<span class="string">'file'</span> device=<span class="string">'cdrom'</span>&gt;</span><br><span class="line">           &lt;source file=<span class="string">'/var/lib/libvirt/images/ubuntu.iso'</span>/&gt; //光盘镜像路径</span><br><span class="line">           &lt;target dev=<span class="string">'hdb'</span> bus=<span class="string">'ide'</span>/&gt;</span><br><span class="line">         &lt;/disk&gt;</span><br><span class="line">        &lt;interface type=<span class="string">'bridge'</span>&gt; //虚拟机网络连接方式</span><br><span class="line">          &lt;source bridge=<span class="string">'kvmbr0'</span>/&gt; //当前主机网桥的名称</span><br><span class="line">          &lt;mac address=<span class="string">"00:16:3e:5d:aa:a8"</span>/&gt; </span><br><span class="line">          //为虚拟机分配mac地址，务必唯一，否则dhcp获得同样ip,引起冲突</span><br><span class="line">         &lt;/interface&gt;</span><br><span class="line">         &lt;input type=<span class="string">'mouse'</span> bus=<span class="string">'ps2'</span>/&gt;</span><br><span class="line">          &lt;graphics type=<span class="string">'vnc'</span> port=<span class="string">'-1'</span> autoport=<span class="string">'yes'</span> listen = <span class="string">'0.0.0.0'</span> keymap=<span class="string">'en-us'</span>/&gt;</span><br><span class="line">          //vnc方式登录，端口号自动分配，自动加<span class="number">1</span>，可以通过virsh vncdisplay来查询</span><br><span class="line">        &lt;/devices&gt;</span><br><span class="line">      &lt;/domain&gt;</span><br></pre></td></tr></table></figure><h3 id="使用virsh-install安装虚机命令"><a href="#使用virsh-install安装虚机命令" class="headerlink" title="使用virsh-install安装虚机命令"></a>使用virsh-install安装虚机命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install \ --name=guest1-rhel5-<span class="number">64</span> \ --file=/var/lib/libvirt/images/guest1-rhel5-<span class="number">64</span>.dsk \ --file-size=<span class="number">8</span> \ --nonsparse --graphics spice \ --vcpus=<span class="number">2</span> --ram=<span class="number">2048</span> \ --location=http://example1.com/installation_tree/RHEL5.<span class="number">6</span>-Serverx86_64/os \ --network bridge=br0 \ --os-type=linux \ --os-variant=rhel5.<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="使用-qemu-img-和-qemu-kvm-命令行方式安装"><a href="#使用-qemu-img-和-qemu-kvm-命令行方式安装" class="headerlink" title="使用 qemu-img 和 qemu-kvm 命令行方式安装"></a>使用 qemu-img 和 qemu-kvm 命令行方式安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）创建一个空的qcow2格式的镜像文件</span><br><span class="line">qemu-img create -f qcow2 windows-master.qcow2 <span class="number">10</span>G</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）启动一个虚机，将系统安装盘挂到 cdrom，安装操作系统</span><br><span class="line">qemu-kvm  -hda  windows-master.qcow2  -m <span class="number">512</span> -boot d  -cdrom /home/user/isos/en_winxp_pro_with_sp2.iso</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）现在你就拥有了一个带操作系统的镜像文件。你可以以它为模板创建新的镜像文件。使用模板的好处是，它会被设置为只读所以可以免于破坏。</span><br><span class="line">qemu-img create -b windows-master.qcow2 -f  qcow2   windows-clone.qcow2</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）你可以在新的镜像文件上启动虚机了</span><br><span class="line">qemu-kvm  -hda  windows-clone.qcow2  -m <span class="number">400</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h2 id=&quot;关于virsh相关命令&quot;&gt;&lt;a href=&quot;#关于virsh相关命令&quot; class=&quot;headerlink&quot; title=&quot;关于virsh
      
    
    </summary>
    
      <category term="kvm" scheme="http://www.python100.com/categories/kvm/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodb的优缺点</title>
    <link href="http://www.python100.com/2018/07/24/mongodb%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://www.python100.com/2018/07/24/mongodb的优缺点/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:18:40.104Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h1 id="mongodb的优缺点"><a href="#mongodb的优缺点" class="headerlink" title="mongodb的优缺点"></a>mongodb的优缺点</h1><p>对比mysql, mongo的优缺点有：</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>不支持事务操作</p></li><li><p>占用空间过大</p></li><li><p>MongoDB没有如MySQL那样成熟的维护工具</p></li><li><p>无法进行关联表查询，不适用于关系多的数据</p></li><li><p>复杂聚合操作通过mapreduce创建，速度慢</p></li><li><p>模式自由， 自由灵活的文件存储格式带来的数据错误</p></li><li><p>预分配模式带来的磁盘瓶颈。</p></li></ul><p>mongodb采用数据文件预分配模式来生成数据文件，<strong>数据文件的大小从64M开始</strong>，<strong>每增加一个文件，大小翻倍，直到2G，</strong><br>以后每次增加数据就会生成2G左右的数据文件，结合mongodb的mmap内存模型，对于写数据文件，将随机写转换为顺序写，<br>一定程度上缓解了磁盘的io压力。</p><p>但在实际使用中，遇到了在预分配2G的数据文件时<strong>，如果磁盘io较慢，则mongodb基本锁死，无法响应请求的情况。</strong><br>持续时间则根据磁盘io的性能来确定。这个问题在2.0之后版本可能会有些改善，但在磁盘性能低的服务器上，该问题依旧存在.</p><p>这个问题目前没有太好的解决方案，只能建议使用读写性能比较好的服务器来跑mongodb。</p><p><strong>在数据存量大于内存大小时，mongodb遇到冷数据查询速度变慢。</strong></p><p>mongodb使用mmap的内存管理模式，如果查询的都是热数据，那么会在内存中直接查询，如果遇到冷数据，就需要从磁盘读取，<br>并将一部分热数据从内存卸载掉.</p><p>有人曾经说mongodb内存管理是加载固定大小的文件块到内存，即如果冷数据在磁盘上，他会根据请求的数据，<br>加载一定大小的数据块到内存，并卸载掉同样的热数据，这个操作本身会带来一定io.</p><p>因为<strong>mongodb使用的是全局锁，在某个操作缓慢时，整个操作队列会全部变慢</strong>。</p><p>这个问题造成了mongodb会出现偶发性堵塞问题，连带整个库的性能下降。</p><p>该问题在应用需要尽量避免出现，需要将mongodb的数据大小规划好，尽量不要使数据量超过内存的大小，如果超过内存大小后，尽量不要去请求冷数据。</p><h3 id="Mongodb全局锁机制。"><a href="#Mongodb全局锁机制。" class="headerlink" title="Mongodb全局锁机制。"></a>Mongodb全局锁机制。</h3><p>mongodb最大的问题或者可以说是它的锁机制，在2.2版本之前，一个实例只有一个读写锁，不管有多少数据库和数据集合，<br>当一个操作进行时其他操作只能等待，在2.2版本后，mongodb锁降低了粒度，改为按库锁。</p><p>MongoDB 使用的是“readers-writer”锁， 可以支持并发但有很大的局限性，当一个读锁存在,许多读操作可以使用这把锁，<br>然而, 当一个写锁的存在，一个单一的写操作会exclusively 持有该锁，同时其它读，写操作不能使用共享这个锁；举个例子，假设一个集合里有 10 个文档，多个 update 操作不能并发在这个集合上，即使是更新不同的文档。</p><p><strong>删除数据集合后空间不会自动释放</strong></p><p><strong>mongodb删除集合后磁盘空间不释放，只有用db.repairDatabase()去修复才能释放。</strong></p><p><strong>修复可能要花费很长的时间,在使用db.repairDatabase()去修复时一定要停掉读写，并且mongodb要有备机才可以，不然千万不要随便使用db.repairDatabase()来修复数据库，切记。</strong></p><p>但是在修复的过程中如果出现了非正常的mongodb的挂掉，再次启动时启动不了的，需要先修复才可以，<br>可以利用./mongod –repair –dbpath=/data/mongo/<br>如果你是把数据库单独的放在一个文件夹中指定dbpath时就指向要修复的数据库就可以。</p><p>###replica set一些隐含问题 ###</p><ul><li><p>replica set模式最多支持12台服务器，而有投票权的服务器只支持7台，如果超过7台服务器，需设置部分服务器为无投票权服务器</p></li><li><p>replica set模式中，一个set服务器如果小于2台服务器，则自动故障恢复不会起作用，如果4台服务器出现2/2互相ping不通的情况，同样不会自动故障恢复。一般来说，一个set中尽量是有单数服务器。</p></li><li><p>replica set中，因为mongodb是按照时间进行操作，如果set中某个服务器时间超前或者延迟，很容易出现secondaries不断尝试更新oplog或者同步延迟的问题。甚至造成某些操作失败，如drop操作。</p></li></ul><p>###分片模式的一些隐含问题 ###</p><ul><li><p>config server尽量按照官方的要求，有3个configserver，如果只有2个configserver，则shard的自动负载均衡和自动切片功能不可用。</p></li><li><p>api中的nearest模式在shard中，判断的是set到mongos的距离而非set到client的距离，在切片模式下，尽量不要使用nearest模式，可能会造成一些请求延迟增加的问题。</p></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>文档结构的存储方式，能够更便捷的获取数据</p></li><li><p>内置GridFS，支持大容量的存储</p></li><li><p>内置Sharding，分片简单</p></li><li><p>海量数据下，性能优越</p></li><li><p>支持自动故障恢复（复制集）</p></li></ul><p>mongodb是一个介于nosql数据库和mysql数据库之间的一个数据存储系统，它没有严格的数据格式，但同时支持复杂查询，而且自带sharding模式和Replica Set模式，支持分片模式，复制模式，自动故障处理，自动故障转移，自动扩容，全内容索引，动态查询等功能。扩展性和功能都比较强大。</p><p>mongodb在数据查询方面，支持类sql查询，可以一个key多value内容，可以组合多个value内容来查询，支持索引，支持联合索引，支持复杂查询 ，支持排序，基本上除了join和事务类型的操作外，mongodb支持所有mysql支持的查询，甚至某个客户端api支持直接使用sql语句查询mongodb。</p><p>mongodb的sharding功能目前日渐完善，支持自定义范围分片，hash自动分片等，分片自动扩容，shard之间自动负载均衡等功能。实际使用中功能还不错。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongodb的优缺点&quot;&gt;&lt;a href=&quot;#mongodb的优缺点&quot; class=&quot;headerlink&quot; title=&quot;mongodb
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cloudstack-概念</title>
    <link href="http://www.python100.com/2018/07/24/cloudstack-%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.python100.com/2018/07/24/cloudstack-概念/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:13:04.474Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>CloudStack是一个开源的具有高可用性及扩展性的云计算平台 ，现在又Apache基金会在管理。</p><h5 id="云计算的三种服务模式"><a href="#云计算的三种服务模式" class="headerlink" title="云计算的三种服务模式"></a><strong>云计算的三种服务模式</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SAAS：软件即服务</span><br><span class="line">PAAS：平台即服务</span><br><span class="line">IAAS：基础架构即服务</span><br></pre></td></tr></table></figure><h5 id="区域-Zone-："><a href="#区域-Zone-：" class="headerlink" title="区域(Zone)："></a><strong>区域(Zone)：</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">区域可以理解为一个数据中心或机房，是逻辑范围最大的组成单元。由一组POD、二级存储、及网络架构组成。区域只能选择一中网络架构。区域间是相互独立的，如需要通信，只能在网络配置打通区域的公有网络。区域之间只能复制ISO和模板，虚拟机不能进行区域之间的迁移工作，如需要，可将虚机转换成模板，再复制到另一个区域。创建时，可以选择该区域是公共区域，还是只对某组用户的私有区域。</span><br></pre></td></tr></table></figure><h5 id="提供点（POD）"><a href="#提供点（POD）" class="headerlink" title="提供点（POD）"></a><strong>提供点（POD）</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可理解为一个物理机架，包括交换机、服务器和存储。所以提供点内的计算服务器，系统虚机都在同一个子网中</span><br></pre></td></tr></table></figure><h5 id="集群（cluster）"><a href="#集群（cluster）" class="headerlink" title="集群（cluster）"></a><strong>集群（cluster）</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最小的逻辑组织单元，由一组计算服务器及一个或多个主存储组成， 同一个集群内的服务器必须使用相同的虚拟化管理程序，硬件型号也必须相同。集群内的虚拟机可以在集群内的不同主机之间实现动态迁移。集群内可以添加多个作为共享存储所使用的主存储</span><br></pre></td></tr></table></figure><h5 id="计算节点（HOST-就是运行虚拟机（VM）的主机"><a href="#计算节点（HOST-就是运行虚拟机（VM）的主机" class="headerlink" title="计算节点（HOST)  就是运行虚拟机（VM）的主机"></a><strong>计算节点（HOST) 就是运行虚拟机（VM）的主机</strong></h5><h5 id="主存储-一级存储"><a href="#主存储-一级存储" class="headerlink" title="主存储 (一级存储)"></a><strong>主存储 (一级存储)</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般作为每个集群多台计算服务器共同使用的共享存储存在。一个集群中可以有一个或多个不同类型的存储。主存储用于存储所有虚拟机内数据的镜像文件和数据卷文件。分为共享存储和本地存储。使用共享存储可以实现虚机的在线迁移。</span><br><span class="line">一级存储与 cluster 关联，它为该 cluster 中的主机的全部虚拟机提供磁盘卷。一个 cluster 至少有一个一级存储，且在部署时位置要临近主机以提供高性能。</span><br></pre></td></tr></table></figure><h5 id="二级存储"><a href="#二级存储" class="headerlink" title="二级存储"></a><strong>二级存储</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每个区域只需要一个二级存储，用于存放创建虚拟所使用的ISO镜像文件、模板文件，以及对虚机所做的快照和卷备份文件。这些都是占用空间大、读写频率低的数据文件(冷数据),并不是关键数据，使用配置不高、最简单的NFS来存储就够了。</span><br><span class="line">二级存储与 zone 关联，它存储模板文件，ISO 镜像和磁盘卷快照。</span><br></pre></td></tr></table></figure><h5 id="一个-zone-包含多个-pod，一个-pod-包含多个-cluster，一个-cluster-包含多个-host"><a href="#一个-zone-包含多个-pod，一个-pod-包含多个-cluster，一个-cluster-包含多个-host" class="headerlink" title="一个 zone 包含多个 pod，一个 pod 包含多个 cluster，一个 cluster 包含多个 host"></a><strong>一个 zone 包含多个 pod，一个 pod 包含多个 cluster，一个 cluster 包含多个 host</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模板：可以启动虚拟机的操作系统镜像，也包括了诸如已安装应用的其余配置信息。</span><br><span class="line">ISO 镜像：包含操作系统数据或启动媒质的磁盘镜像。</span><br><span class="line">磁盘卷快照：虚拟机数据的已储存副本，能用于数据恢复或者创建新模板。</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个完整的 CloudStack 环境包括两部分：</span><br><span class="line">    管理服务器（Management Server）</span><br><span class="line">    虚拟机管理器 (Hypervisor)  也叫主机host或者代理agent</span><br></pre></td></tr></table></figure><h5 id="虚拟机实例的动态迁移"><a href="#虚拟机实例的动态迁移" class="headerlink" title="虚拟机实例的动态迁移"></a><strong>虚拟机实例的动态迁移</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态迁移：在虚拟机关机或暂停的情况下从一台物理机迁移到另一台物理机</span><br><span class="line">动态迁移：让虚拟机在不关机且能持续提供服务的前提下，从一个虚拟平台的主机（Host）迁移到其他虚拟平台的主机上运行，中间仅有非常短暂的停机时间，普通用户无法对自己的虚拟机进行动态迁移，只有管理员可以。虚拟机实例的动态迁移只能在同一集群中进</span><br></pre></td></tr></table></figure><p>安全组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安全组相当于在虚拟机实例的操作系统之外部署了一道防火墙，每个CloudStack账户都会生成一个默认安全组，该组默认拒绝所有流入流量和允许所有流出流量。一个用户可以创建多个安全组，一个安全组可以应用到多个虚拟机实例上，一个虚拟机实例也可以使用多个安全组。一个安全组相当于一条或多条防火墙规则。虚拟机实例在创建时可以选择多个安全组，选择后不可以加入或退出其他安全组</span><br></pre></td></tr></table></figure><h4 id="高级网络功能"><a href="#高级网络功能" class="headerlink" title="高级网络功能"></a>高级网络功能</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">虚拟路由器本质上一个运行Debian <span class="number">7.0</span>的虚拟机实例，提供了各种高级网络管理功能。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、防火墙（不能基于账户进行策略指定，也不能设定出口规则）</span><br><span class="line">        不能基于账户进行策略指定，也不能设定出口规则</span><br><span class="line">        默认可以访问外部服务，但外部服务不能访问虚拟机实例</span><br><span class="line"><span class="number">2</span>、负载均衡</span><br><span class="line">    负载均衡有工作在二层，三层，四层和七层的负载均衡</span><br><span class="line">    可以通过集群的方式来保证高可用</span><br><span class="line">    CloudStack的负载均衡是通过在虚拟路由器里使用HAProxy实现的</span><br><span class="line">    轮询算法：根据用户的请求依次将请求转发给内部的应用服务器</span><br><span class="line">    最少连接算法：把当前请求分配给连接数最少的应用服务器</span><br><span class="line">    源算法：尽量保证始终来自同一个客户端的请求分发给同一个应用服务器，适用于不使用Cookie的Web应用</span><br><span class="line">    要使用负载均衡，前端的负载均衡器需要为该服务配置一个服务IP地址，服务地址用于接收用户的请求。</span><br><span class="line">    公用端口用于接收用户外部的请求，专用端口指虚拟机提供服务的端口</span><br><span class="line"><span class="number">3</span>、静态NAT：将内外的私有IP转换为公有IP（<span class="number">1</span>对<span class="number">1</span>）</span><br><span class="line"><span class="number">4</span>、端口转发：把访问A服务器某端口的数据转发到B服务器的某端口中</span><br><span class="line"><span class="number">5</span>、VPN</span><br><span class="line">      VPN可以使用户安全，方便地访问一个虚拟网络内的所有虚拟机</span><br><span class="line">      默认情况下，防火墙信任VPN拨入者</span><br><span class="line"><span class="number">6</span>、VPC：Virtual Private Cloud</span><br><span class="line">    从整体网络中分割出来的一个逻辑隔离的网络，在该虚拟网络中，用户具有完全的控制权</span><br><span class="line"><span class="number">7</span>、冗余路由</span><br><span class="line">    使用多个路由来防止单点故障时导致内部网络不能与外部网络通信的问题</span><br><span class="line">    冗余路由组共用一个内网IP（网关）和一个外网IP</span><br><span class="line">    提供冗余功能的两天虚拟路由器应尽量运行在不同物理主机上</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;CloudStack是一个开源的具有高可用性及扩展性的云计算平台 ，现在又Apache基金会在管理。&lt;/p&gt;&lt;h5 id=&quot;云计算的三种服务模式&quot;&gt;
      
    
    </summary>
    
      <category term="cloudstack" scheme="http://www.python100.com/categories/cloudstack/"/>
    
    
      <category term="cloudstack" scheme="http://www.python100.com/tags/cloudstack/"/>
    
  </entry>
  
  <entry>
    <title>cloudstack安装</title>
    <link href="http://www.python100.com/2018/07/24/cloudstack%E6%96%87%E6%A1%A3/"/>
    <id>http://www.python100.com/2018/07/24/cloudstack文档/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:13:58.490Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>cloudstack安装</p><p><a href="http://developer.huawei.com/ict/forum/thread-23211.html" target="_blank" rel="noopener">http://developer.huawei.com/ict/forum/thread-23211.html</a></p><p><a href="https://blog.csdn.net/chengxuyuanyonghu/article/details/78847656" target="_blank" rel="noopener">https://blog.csdn.net/chengxuyuanyonghu/article/details/78847656</a></p><p><a href="https://blog.csdn.net/hejin_some/article/details/72673192" target="_blank" rel="noopener">https://blog.csdn.net/hejin_some/article/details/72673192</a></p><p><a href="https://blog.csdn.net/hzhsan/article/details/44098537/" target="_blank" rel="noopener">https://blog.csdn.net/hzhsan/article/details/44098537/</a> kvm网络</p><p>virt-install –virt-type=kvm –name=centos88 –vcpus=2 –memory=4096 –location=/tmp/CentOS-7-x86_64-Minimal-1511.iso –disk path=/home/vms/centos88.qcow2,size=40,format=qcow2 –network bridge=br0 –graphics none –extra-args=’console=ttyS0’ –force</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --connect qemu:///system --name centos7 --memory=<span class="number">1024</span> --vcpus=<span class="number">2</span> --disk path=/<span class="keyword">data</span>/secondary/kali.qcow2,device=disk,format=qcow2,bus=virtio,cache=none,size=<span class="number">5</span> --cdrom /tmp/CentOS-<span class="number">7</span>-x86_64-DVD-<span class="number">1804</span>.iso  --os-type=linux --network bridge=br0,model=virtio,model=e1000 --hvm --virt-type=kvm --noautoconsole --graphics vnc,listen=<span class="number">0.0</span>.<span class="number">0.0</span>,port=<span class="number">5901</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type=kvm --name=centos88 --vcpus=<span class="number">2</span> --memory=<span class="number">1024</span> --location=/tmp/CentOS-<span class="number">7</span>-x86_64-DVD-<span class="number">1804</span>.iso  --disk path=/<span class="keyword">data</span>/secondary/kali.qcow2,size=<span class="number">6</span>,format=qcow2 --network bridge=br0 --graphics none --extra-args=<span class="string">'console=ttyS0'</span> --force</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;cloudstack安装&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://developer.huawei.com/ict/forum/thread-2
      
    
    </summary>
    
      <category term="cloudstack" scheme="http://www.python100.com/categories/cloudstack/"/>
    
    
      <category term="cloudstack" scheme="http://www.python100.com/tags/cloudstack/"/>
    
  </entry>
  
  <entry>
    <title>VNC安装</title>
    <link href="http://www.python100.com/2018/07/24/VNC%E5%AE%89%E8%A3%85/"/>
    <id>http://www.python100.com/2018/07/24/VNC安装/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:16:10.446Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>VNC安装</p><h2 id="安装在Centos7"><a href="#安装在Centos7" class="headerlink" title="安装在Centos7"></a>安装在Centos7</h2><p>1、安装的centos已经安装了GUI桌面系统</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装桌面版，安装有500M以上，有点慢</span></span><br><span class="line">yum groupinstall <span class="string">"GNOME Desktop"</span> <span class="string">"Graphical Administration Tools"</span>    </span><br><span class="line"><span class="comment">#默认使用图形化桌面启动,三种命令</span></span><br><span class="line">ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target    </span><br><span class="line">systemctl set-default runlevel5.target      </span><br><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><p>2、安装vncserver</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tigervnc-server</span><br></pre></td></tr></table></figure><p>3、启动并配置vncserver</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloud ~]<span class="comment"># vncserver </span></span><br><span class="line">[root@cloud ~]<span class="comment"># vncpasswd</span></span><br></pre></td></tr></table></figure><p>4、修改配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@cloud ~]<span class="comment"># cd /root/.vnc/</span></span><br><span class="line">[root@cloud .vnc]<span class="comment"># cat config </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Remote desktop service (VNC)</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root  <span class="comment">#设置远程连接用户为root</span></span><br><span class="line"><span class="comment"># Clean any existing files in /tmp/.X11-unix environment</span></span><br><span class="line"></span><br><span class="line">ExecStartPre=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这一句不要改变</span></span><br><span class="line">ExecStart=/usr/bin/vncserver :<span class="number">1</span> -geometry <span class="number">1280</span>x1024 -depth <span class="number">16</span> -securitytypes=none -fp /usr/share/X11/fonts/misc</span><br><span class="line"></span><br><span class="line">PIDFile=/root/.vnc/%H%i.pid</span><br><span class="line"></span><br><span class="line">ExecStop=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>5、修改完后启动 vncserver-1</p><p>[root@cloud system]# systemctl start vncserver@\:1.service</p><p>6、然后使用vncviewer，输入IP:5901就可以连接到虚机了</p><h2 id="安装在win10"><a href="#安装在win10" class="headerlink" title="安装在win10"></a>安装在win10</h2><p>下载server和viewer两个版本，都分别安装</p><p><a href="https://www.xp510.com/xiazai/Networking/mstsc/23862.html" target="_blank" rel="noopener">https://www.xp510.com/xiazai/Networking/mstsc/23862.html</a></p><p>server配置：</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;VNC安装&lt;/p&gt;&lt;h2 id=&quot;安装在Centos7&quot;&gt;&lt;a href=&quot;#安装在Centos7&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cloudstack管理节点安装参考</title>
    <link href="http://www.python100.com/2018/07/24/cloudstack%E7%AE%A1%E7%90%86%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/"/>
    <id>http://www.python100.com/2018/07/24/cloudstack管理节点安装/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:14:48.263Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><p>参考文档：</p><p><a href="https://www.ibm.com/developerworks/cn/cloud/library/1303_chenyz_cloudstack/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/cloud/library/1303_chenyz_cloudstack/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;参考文档：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/cloud/library/1
      
    
    </summary>
    
      <category term="cloudstack" scheme="http://www.python100.com/categories/cloudstack/"/>
    
    
      <category term="cloudstack" scheme="http://www.python100.com/tags/cloudstack/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客next主题设计</title>
    <link href="http://www.python100.com/2018/07/24/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.python100.com/2018/07/24/hexo博客next主题设计/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T06:06:18.181Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><hr><h2 id="hexo博客next主题设计"><a href="#hexo博客next主题设计" class="headerlink" title="hexo博客next主题设计"></a>hexo博客next主题设计</h2><p>参考文章：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><h3 id="一、新增访客统计及网站字数统计"><a href="#一、新增访客统计及网站字数统计" class="headerlink" title="一、新增访客统计及网站字数统计"></a>一、新增访客统计及网站字数统计</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、安装依赖包，切换到博客根目录，打开Git Bash，输入以下代码安装字数统计包</span><br><span class="line">npm install hexo-wordcount --save</span><br><span class="line"><span class="number">2</span>、打开文件：themes/next/layout/_partials/footer.swig,输入以下代码后保存退出。</span><br><span class="line"></span><br><span class="line">&lt;!-- 新增访客统计代码 --&gt;</span><br><span class="line">&lt;div class=<span class="string">"copyright"</span> &gt;</span><br><span class="line">  &#123;% set current = date(Date.now(), <span class="string">"YYYY"</span>) %&#125;</span><br><span class="line">  &amp;copy; &#123;% <span class="keyword">if</span> theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; - &#123;% endif %&#125;</span><br><span class="line">  &lt;span itemprop=<span class="string">"copyrightYear"</span>&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=<span class="string">"with-love"</span>&gt;</span><br><span class="line">    &lt;i class=<span class="string">"fa fa-balance-scale"</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=<span class="string">"author"</span> itemprop=<span class="string">"copyrightHolder"</span>&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"busuanzi-count"</span>&gt;</span><br><span class="line">    &lt;script async=<span class="string">""</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-uv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">      访问用户： &lt;span class=<span class="string">"busuanzi-value"</span> id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt; 人</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;div class=<span class="string">"powered-by"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-uv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">      访问次数： &lt;span class=<span class="string">"busuanzi-value"</span> id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt; 次</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;!-- 博客字数统计 --&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-pv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-pencil"</span>&gt;&lt;/i&gt;</span><br><span class="line">      博客全站共： &lt;span class=<span class="string">"post-count"</span>&gt;&#123;&#123; totalcount(site) &#125;&#125;&lt;/span&gt; 字</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 新增访客统计代码 END--&gt;</span><br></pre></td></tr></table></figure><h3 id="二、next主题如何添加动态背景"><a href="#二、next主题如何添加动态背景" class="headerlink" title="二、next主题如何添加动态背景"></a>二、next主题如何添加动态背景</h3><h5 id="注意：如果next主题在5-1-1以上的话就不用我这样设置，直接在主题配置文件中找到canvas-nest-false，把它改为canvas-nest-true就行了（注意分号后面要加一个空格）"><a href="#注意：如果next主题在5-1-1以上的话就不用我这样设置，直接在主题配置文件中找到canvas-nest-false，把它改为canvas-nest-true就行了（注意分号后面要加一个空格）" class="headerlink" title="注意：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）"></a><strong>注意</strong>：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）</h5><h5 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改<code>_layout.swig</code></h5><p>打开 <code>next/layout/_layout.swig</code><br>在 <code>&lt; /body&gt;</code>之前添加代码(注意不要放在&lt; /head&gt;的后面)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>打开 <code>/next/_config.yml</code>,在里面添加如下代码：(可以放在最后面)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><p>到此就结束了，运行 <code>hexo clean</code>，然后运行 <code>hexo g</code>,然后运行 <code>hexo s</code>，最后打开浏览器在浏览器的地址栏输入 <code>localhost:4000</code> 就能看到效果了\（￣︶￣）/</p><h5 id="如果你感觉默认的线条太多的话"><a href="#如果你感觉默认的线条太多的话" class="headerlink" title="如果你感觉默认的线条太多的话"></a>如果你感觉默认的线条太多的话</h5><h5 id="可以这么设置-gt"><a href="#可以这么设置-gt" class="headerlink" title="可以这么设置====&gt;"></a>可以这么设置====&gt;</h5><p>在上一步修改 <code>_layout.swig</code>中，把刚才的这些代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"0,0,255"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"99"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>color</code> ：线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>: 线条的总数量, 默认: <code>150</code></li><li><code>zIndex:</code> 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li></ul><h3 id="三、然hexo内的markdown文件显示文件"><a href="#三、然hexo内的markdown文件显示文件" class="headerlink" title="三、然hexo内的markdown文件显示文件"></a>三、然hexo内的markdown文件显示文件</h3><p>将网站根目录下的source文件夹下新建images目录，将需要的文件根据自己的需要在新建文件夹来保存图片，引用图片的格式为/images/img/1.jpg</p><p><img src="D:\mygit\chenmaoqing\img\img1" alt="img1"></p><h3 id="四、添加评论"><a href="#四、添加评论" class="headerlink" title="四、添加评论"></a>四、添加评论</h3><p>可以使用的评论系统有</p><ul><li><p>HyperComments：<a href="https://www.hypercomments.com/" target="_blank" rel="noopener">https://www.hypercomments.com</a> （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）</p></li><li><p>来必力：<a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com</a> （来自韩国，使用邮箱注册。）</p></li><li>畅言： <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com</a> （安装需要备案号。不太好用。）</li><li>Gitment： <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a> （有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）</li><li>Valine: <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> (基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）</li></ul><p>综上，最终采用了来必力。</p><p>打开来必力官网：<br><a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com</a></p><p>按套路注册（有可能注册上面要花费点功夫）。（貌似需要科学上网？之前没科学上网好像登录界面显示不了）。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>点击上方的安装，选择免费的city版本。 获取UUID</p><p><img src="D:\mygit\chenmaoqing\img\来必力" alt="1532405120649"></p><p>复制其中的uid字段。</p><p>打开主题目录下的 <code>blog/themes/next/_config.yml</code> 配置文件，定位到 <code>livere_uid</code> 字段，粘贴上刚刚复制的UID。至此，大功告成。</p><p>五、添加打赏功能</p><p>六、添加本地搜索</p><ul><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><p>$ npm install hexo-generator-searchdb –save</p></li><li><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h2 id=&quot;hexo博客next主题设计&quot;&gt;&lt;a href=&quot;#hexo博客next主题设计&quot; class=&quot;headerlink&quot; title=&quot;h
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.python100.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>进程线程</title>
    <link href="http://www.python100.com/2018/07/03/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://www.python100.com/2018/07/03/进程线程/</id>
    <published>2018-07-03T14:19:00.000Z</published>
    <updated>2018-07-13T09:08:17.628Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><p>进程、线程、多线程相关总结</p><p>一、说说概念</p><p>1、进程（process）</p><p>狭义定义：进程就是一段程序的执行过程。</p><p>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p><p>简单的来讲进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。</p><p>进程状态：进程有三个状态，就绪、运行和阻塞。就绪状态其实就是获取了出cpu外的所有资源，只要处理器分配资源就可以马上执行。就绪状态有排队序列什么的，排队原则不再赘述。运行态就是获得了处理器分配的资源，程序开始执行。阻塞态，当程序条件不够时候，需要等待条件满足时候才能执行，如等待i/o操作时候，此刻的状态就叫阻塞态。</p><p>2、程序</p><p>说起进程，就不得不说下程序。先看定义：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。而进程则是在处理机上的一次执行过程，它是一个动态的概念。这个不难理解，其实进程是包含程序的，进程的执行离不开程序，进程中的文本区域就是代码区，也就是程序。</p><p>3、线程</p><p>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</p><p>4、多线程</p><p>在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。</p><p>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。</p><p>二、说说区别</p><p>1、进程与线程的区别：</p><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p><p>1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.</p><p>2) 线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p>4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><p>三、说说优缺点</p><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP(多核处理机)机器上运行，而进程则可以跨机器迁移。</p><p>四、总结</p><p>入职第一天闲的无聊，参考下别人的总结自己也简单总结了下。知道以上的基本面试够用了，至于进程、线程的细节，底层构成，调度等问题是操作系统的东西。我就不详述了。</p><p>五、实例</p><p>1、多线程写日志，涉及到单例模式，异步写</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;p&gt;进程、线程、多线程相关总结&lt;/p&gt;&lt;p&gt;一、说说概念&lt;/p&gt;&lt;p&gt;1、进程（process）&lt;/p&gt;&lt;p&gt;狭义定义：进程就是一段程序的执行过程。&lt;/p&gt;&lt;p
      
    
    </summary>
    
      <category term="进程线程" scheme="http://www.python100.com/categories/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>git和markdown使用总结</title>
    <link href="http://www.python100.com/2018/06/21/git%E5%92%8Cmarkdown%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://www.python100.com/2018/06/21/git和markdown使用总结/</id>
    <published>2018-06-20T18:36:00.000Z</published>
    <updated>2018-07-24T04:42:20.913Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --><h1 id="git-上传更新代码步骤"><a href="#git-上传更新代码步骤" class="headerlink" title="git 上传更新代码步骤"></a>git 上传更新代码步骤</h1><pre><code>- git pull   #先拉取最新代码- 将自己的写好的代码放入到相应的文件夹下，比如op/issues- 如果有图片将对应的图片也复制到当前目录下的img下- git add 自己加入到的文件和图片- git commit 自己加入和文件和图片 -m  message- 这里如果不加-m message 选项可能会push不成功，最好加上- git push   #上传自己新加的文件到GitHub</code></pre><h1 id="markdown语法总结"><a href="#markdown语法总结" class="headerlink" title="markdown语法总结"></a>markdown语法总结</h1><h2 id="图片"><a href="#图片" class="headerlink" title="- 图片"></a>- 图片</h2><pre><code>方法一：    - 加入图片，格式是 ![]()    - 其中的[]中的内容可以自定义，比如[log]    - ()中写使用该图片的文件相对图片的相对路径方法二：    &lt;img src=&quot;images/img/1.jpg&quot; width=256 height=256 /&gt;</code></pre><h3 id="图片引用方法一实例"><a href="#图片引用方法一实例" class="headerlink" title="图片引用方法一实例"></a>图片引用方法一实例</h3><pre><code>此时img文件夹和当前文档在同一级目录下![1](/images/img/1.jpg)![2](/images/img/2.jpg)</code></pre><p><img src="/images/img/1.jpg" alt="1"><br><img src="/images/img/2.jpg" alt="2"></p><h3 id="图片引用方法二实例，可以控制图片大小"><a href="#图片引用方法二实例，可以控制图片大小" class="headerlink" title="图片引用方法二实例，可以控制图片大小"></a>图片引用方法二实例，可以控制图片大小</h3><pre><code>&lt;img src=&quot;/images/img/1.jpg&quot; width=256 height=256 /&gt;&lt;img src=&quot;/images/img/2.jpg&quot; width=256 height=256 /&gt;</code></pre><p><img src="/images/img/1.jpg" width="256" height="256"><br><img src="/images/img/2.jpg" width="256" height="256"></p><h3 id="让图片居中的方法，使用div标签"><a href="#让图片居中的方法，使用div标签" class="headerlink" title="让图片居中的方法，使用div标签"></a>让图片居中的方法，使用div标签</h3><pre><code>&lt;div align=center&gt;&lt;img src=&quot;/images/img/1.jpg&quot; width=256 height=256 /&gt;&lt;/div&gt;</code></pre><div align="center"><br><img src="/images/img/1.jpg" width="256" height="256"><br></div><h2 id="斜体"><a href="#斜体" class="headerlink" title="- 斜体"></a>- 斜体</h2><pre><code>- 用左右各一个 *的方式包裹住文字就是斜体的语法</code></pre><h2 id="粗体"><a href="#粗体" class="headerlink" title="- 粗体"></a>- 粗体</h2><pre><code>- 用左右各两个**的方式包裹住文字就是粗体的语法</code></pre><h2 id="改变字体大小"><a href="#改变字体大小" class="headerlink" title="- 改变字体大小"></a>- 改变字体大小</h2><pre><code>- 一个字、一句话、一个段落加上#就可以改变字体的大小</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="- 分割线"></a>- 分割线</h2><pre><code>- 输入三个--就可以得到分割线</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="- 引用"></a>- 引用</h2><pre><code>-在内容首位加入&gt;符号即可</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="- 表格"></a>- 表格</h2><pre><code>1、 原生的表格语法    | 嘻嘻 | 哈哈 | 呵呵    | :------------- :|:-------------:| :-----:|    | 你好|我好|大家好 |    | 是的| 是的 | 是的 |2、 也可以使用html语言来实现，实例如下    &lt;table&gt;      &lt;tr&gt;        &lt;th width=10%, bgcolor=yellow &gt;参数&lt;/th&gt;        &lt;th width=40%, bgcolor=yellow&gt;详细解释&lt;/th&gt;        &lt;th width=50%, bgcolor=yellow&gt;备注&lt;/th&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td bgcolor=#eeeeee&gt; -l &lt;/td&gt;        &lt;td&gt; use a long listing format  &lt;/td&gt;        &lt;td&gt; 以长列表方式显示（显示出文件/文件夹详细信息）  &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td bgcolor=#00FF00&gt;-t &lt;/td&gt;        &lt;td&gt; sort by modification time &lt;/td&gt;        &lt;td&gt; 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） &lt;/td&gt;      &lt;tr&gt;        &lt;td bgcolor=rgb(0,10,0)&gt;-r &lt;/td&gt;        &lt;td&gt; reverse order while sorting &lt;/td&gt;        &lt;td&gt;  逆序排列 &lt;/td&gt;      &lt;/tr&gt;    &lt;/table&gt;</code></pre><h1 id="html方式实现表格实例"><a href="#html方式实现表格实例" class="headerlink" title="html方式实现表格实例"></a>html方式实现表格实例</h1><table><br><tr><br><th width="10%," bgcolor="yellow">参数</th><br><th width="40%," bgcolor="yellow">详细解释</th><br><th width="50%," bgcolor="yellow">备注</th><br></tr><br><tr><br><td bgcolor="#eeeeee">-l</td><br><td>use a long listing format</td><br><td>以长列表方式显示（显示出文件/文件夹详细信息）</td><br></tr><br><tr><br><td bgcolor="#00FF00">-t</td><br><td>sort by modification time</td><br><td>按照修改时间排序（默认最近被修改的文件/文件夹排在最前面）</td><br></tr><tr><br><td bgcolor="rgb(0,10,0)">-r</td><br><td>reverse order while sorting</td><br><td>逆序排列</td><br></tr><br></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Jul 24 2018 18:28:29 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;git-上传更新代码步骤&quot;&gt;&lt;a href=&quot;#git-上传更新代码步骤&quot; class=&quot;headerlink&quot; title=&quot;git 上传更新代
      
    
    </summary>
    
    
      <category term="git&amp;markdown语法" scheme="http://www.python100.com/tags/git-markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
