<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乘风破浪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.python100.com/"/>
  <updated>2018-07-26T01:48:57.000Z</updated>
  <id>http://www.python100.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数</title>
    <link href="http://www.python100.com/2018/07/26/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E5%87%BD%E6%95%B0%E8%83%8C%E8%AF%B5/"/>
    <id>http://www.python100.com/2018/07/26/第二阶段函数背诵/</id>
    <published>2018-07-26T01:44:00.000Z</published>
    <updated>2018-07-26T01:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a><strong>函数参数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 函数  是一个容器，里面包含了代码执行语句，还有一系列的变量数据</span></span><br><span class="line">函数的参数是在定义函数时括号中的内容</span><br><span class="line">形参是一个待赋值的变量</span><br><span class="line">实参是函数实际调用时传递进去的值</span><br><span class="line">形参是被实参所赋值</span><br><span class="line">实参在传递的时候要和形参一一对应</span><br><span class="line">缺省参数：</span><br><span class="line">在函数定义时，指明一个形参的默认值，就可以不给这个具有默认值得参数传递参数了</span><br><span class="line">    给一个具有默认参数的形参传递一个实参，那么会覆盖原有的默认值</span><br><span class="line">    缺省参数的定义顺序一点是从右向左，从后向前</span><br><span class="line">    <span class="comment">#缺省参数可以让形参具有默认值</span></span><br><span class="line"><span class="comment">#缺省参数的定义一定是从右向左</span></span><br><span class="line"><span class="comment">#缺省参数后面要么是缺省，要么就没参数了</span></span><br><span class="line">不定长参数：</span><br><span class="line">元组不定长*arg</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">            print(args)</span><br><span class="line">        func([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'abc'</span>,<span class="string">'中国'</span>)</span><br><span class="line">     字典不定长：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">            print(kwargs)   <span class="comment">#*args 用来接收不定长参数保存成元组</span></span><br><span class="line">    func(a=&#123;<span class="string">'name'</span>:<span class="string">'小明'</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>&#125;,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">        形参：a,b,c</span><br><span class="line">        实参：就是后面的数据</span><br><span class="line">     不定长参数可以接收空值</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,j,*args,**kwargs)</span>:</span></span><br><span class="line">            <span class="comment">#**kwargs 用来接收不定长参数保存成字典，而且在函数调用时，</span></span><br><span class="line">            <span class="comment">#一定要注意使用命名传参的方式</span></span><br><span class="line">            print(i,j,args,kwargs)</span><br><span class="line">         func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">     传递的时候首先传递单纯变量作为元组不定长，键值对不定长必须在后</span><br><span class="line">命名参数</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,c,d,e,f)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        func(b=<span class="number">1</span>,a=<span class="number">2</span>,d=<span class="number">3</span>,f=<span class="number">4</span>,e=<span class="number">3</span>,c=<span class="number">5</span>)</span><br><span class="line">        <span class="comment">#命名传参可以打乱顺序</span></span><br><span class="line">返回值</span><br><span class="line">    - 函数内部的一些操作，不能影响外界的事务</span><br><span class="line">    - <span class="keyword">return</span> 语句 在函数执行完成之后返回一个结果</span><br><span class="line">    - <span class="keyword">return</span> 会终止函数运行</span><br><span class="line">    - 函数调用完成之后会返回结果</span><br><span class="line">    - 默认的函数如果没有返回值，那么返回<span class="keyword">None</span></span><br><span class="line">    - 函数返回值可以任意多个</span><br><span class="line">    - 只要是合理的数据，**模块**，对象，函数名均可以返回</span><br></pre></td></tr></table></figure><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a><strong>函数作用域</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment">#全局就是全局</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">2</span> <span class="comment">#局部就是局部</span></span><br><span class="line">        <span class="comment">#修改全局a变为2  错误</span></span><br><span class="line">        <span class="comment">#在局部空间创建一个新的同名a 正确</span></span><br><span class="line">    print(<span class="string">"内:"</span>,a)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">global</span> 把一个局部变量声明成全局的</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span> <span class="comment">#全局就是全局</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a <span class="comment">#升级局部变量成为全局的</span></span><br><span class="line">    a = <span class="number">2</span> <span class="comment">#局部就是局部</span></span><br><span class="line">        <span class="comment">#修改全局a变为2  正确</span></span><br><span class="line">        <span class="comment">#在局部空间创建一个新的同名a  错误的</span></span><br><span class="line">    print(<span class="string">"内:"</span>,a)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#局部作用域：函数内空间</span></span><br><span class="line"><span class="comment">#全局作用域：整个脚本空间</span></span><br><span class="line"></span><br><span class="line">- 形参都是局部的</span><br><span class="line">- 不可变数据对象，在函数内外的值，用到了引用计数</span><br><span class="line">- 全局变量可以被局部作用域使用</span><br><span class="line">- 但是局部变量不可以被全局作用域所使用，除非你用<span class="keyword">global</span>语句升级，声明为全局变量</span><br><span class="line">- 全局可变对象,在函数内部使用的时,其实是一个共享状态</span><br><span class="line">- 是因为列表的指针域 是一个 也会存在引用计数的情况</span><br><span class="line">- 解决办法就是在函数内部使用深浅拷贝</span><br><span class="line"><span class="comment">#内外其实现在共同使用同一个列表</span></span><br><span class="line"><span class="comment">#内外互相影响，用的就是同一个列表</span></span><br><span class="line"><span class="comment">#这样的数据可以在函数之间进行通信</span></span><br><span class="line">可变数据在传递参数时</span><br><span class="line">    - 在函数内部直接通过形参修改,也会影响原有数据</span><br><span class="line">    - 可变对象在传递参数时,只是一个引用</span><br><span class="line">不可变数据在传递参数时</span><br><span class="line">- 在函数内部直接通过形参修改,不会影响原有数据</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+= 或者 = 号赋值都会使一个不可变数据类型在函数的局部作用域下成为一个局部变量</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">a = a + <span class="number">1</span></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个作用域下的a都是来自于同一个作用域的</span></span><br><span class="line"><span class="comment">#你不能说 第一个a是局部的、第二个a是全局的</span></span><br><span class="line">    <span class="comment">#这样的话，一个a在一个内存空间下可以表示两个值了，这就二义性了</span></span><br><span class="line"><span class="comment"># 现在的a 就是一个局部变量了</span></span><br><span class="line"><span class="comment"># 局部变量a 需要 局部变量a + 1</span></span><br><span class="line"><span class="comment"># 这个代码会报错</span></span><br><span class="line"><span class="comment"># local variable 'a' referenced before assignment</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    mylist[<span class="number">0</span>] = <span class="string">'a'</span></span><br><span class="line">    print(<span class="string">'内:'</span>,mylist)</span><br><span class="line">    <span class="comment">#内外其实现在共同使用同一个列表</span></span><br><span class="line">    <span class="comment">#内外互相影响，用的就是同一个列表</span></span><br><span class="line">    <span class="comment">#这样的数据可以在函数之间进行通信</span></span><br><span class="line">func()</span><br><span class="line">print(<span class="string">'外:'</span>,mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#==================</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] <span class="comment">#全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    new_list = mylist.copy() <span class="comment">#浅拷贝之后，互不影响</span></span><br><span class="line">    new_list[<span class="number">0</span>] = <span class="string">'a'</span> <span class="comment">#局部变量</span></span><br><span class="line">    print(<span class="string">'内:'</span>,new_list)</span><br><span class="line">func()</span><br><span class="line">print(<span class="string">'外:'</span>,mylist)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mydict = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'Small White'</span>,</span><br><span class="line">    <span class="string">'money'</span>:<span class="number">500</span></span><br><span class="line">&#125; <span class="comment">#字典是一个可变的 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(key,value)</span>:</span></span><br><span class="line">    mydict[key] += value</span><br><span class="line">move_dict = &#123;</span><br><span class="line">    <span class="string">'中彩'</span>: [func,<span class="number">20</span>],</span><br><span class="line">    <span class="string">'生病'</span>: [func,<span class="number">-20</span>],</span><br><span class="line">    <span class="comment">#字典的value要给定一个实际的值</span></span><br><span class="line">&#125;</span><br><span class="line">move = <span class="string">'中彩'</span></span><br><span class="line">move_dict[move][<span class="number">0</span>](<span class="string">'money'</span>,move_dict[move][<span class="number">1</span>])</span><br><span class="line"><span class="comment">#move_dict[move][0] 取到函数</span></span><br><span class="line"><span class="comment">#move_dict[move][1] 取到应该修改的值</span></span><br><span class="line">print(mydict)</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><strong>匿名函数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">lambda</span> 表达式</span><br><span class="line">- 除了def语句,我们还可以通过lambda语句来创建函数</span><br><span class="line">- <span class="keyword">lambda</span>创建的函数 因为默认不具有名字，他需要我们来指定一个变量名来保存</span><br><span class="line">- 表达式的结果，将作为返回值自动返回</span><br><span class="line">- 轻量级的函数 一般使用<span class="keyword">lambda</span>来实现</span><br><span class="line">a = <span class="keyword">lambda</span> x: x*<span class="number">2</span></span><br><span class="line">a(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#lamdba 参数 : 表达式</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="keyword">lambda</span> x,y:x**y,<span class="keyword">lambda</span> x,y:x**(y+<span class="number">1</span>),<span class="keyword">lambda</span> x,y:x**(y+<span class="number">2</span>)] <span class="comment">#跳转表</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> range(<span class="number">5</span>): <span class="comment">#取出来0-4的数据</span></span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> mylist:</span><br><span class="line">        res = func(var,<span class="number">2</span>)</span><br><span class="line">        print(res)</span><br><span class="line">   print(<span class="string">'-------------'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算器</span></span><br><span class="line">oper_func_dict = &#123;</span><br><span class="line">    <span class="string">'+'</span>:<span class="keyword">lambda</span> x,y : x + y <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> x - y,</span><br><span class="line">    <span class="string">'-'</span>:<span class="keyword">lambda</span> x,y : x-y,</span><br><span class="line">    <span class="string">'*'</span>:<span class="keyword">lambda</span> x,y : x*y,</span><br><span class="line">    <span class="string">'/'</span>:<span class="keyword">lambda</span> x,y : x/y,</span><br><span class="line">&#125;</span><br><span class="line">res = oper_func_dict[<span class="string">'+'</span>](x=<span class="number">0</span>,y=<span class="number">1</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h5 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a><strong>三元表达式</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x + <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> x - <span class="number">1</span></span><br><span class="line"><span class="comment">#当条件满足时(x &gt; 0) 执行表达式左边的,反之执行表达式右边的</span></span><br></pre></td></tr></table></figure><h5 id="跳转表：包含函数的字典或者列表"><a href="#跳转表：包含函数的字典或者列表" class="headerlink" title="跳转表：包含函数的字典或者列表"></a>跳转表：包含函数的字典或者列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mylist = [<span class="keyword">lambda</span> x,y:x**y,<span class="keyword">lambda</span> x,y:x**(y+<span class="number">1</span>),<span class="keyword">lambda</span> x,y:x**(y+<span class="number">2</span>)]</span><br><span class="line"><span class="comment">#列表中的每一数据都是一个函数</span></span><br><span class="line"><span class="comment">#求出0-4数据的每一个2，3，4次方的结果</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> range(<span class="number">5</span>): <span class="comment">#取出来0-4的数据</span></span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="comment">#func = lambda x:x**2</span></span><br><span class="line">        <span class="comment">#func = lambda x:x**3</span></span><br><span class="line">        <span class="comment">#func = lambda x:x**4</span></span><br><span class="line">        res = func(var,<span class="number">2</span>)</span><br><span class="line">        print(res)</span><br><span class="line">    <span class="comment">#外层for循环取出每一个值</span></span><br><span class="line">        <span class="comment">#传递到内存循环中执行三次，分别求出2，3，4的方结果</span></span><br><span class="line">    print(<span class="string">'-------------'</span>)</span><br><span class="line"><span class="comment">#跳转表：包含函数的字典或者列表</span></span><br></pre></td></tr></table></figure><h5 id="作业：模拟人生"><a href="#作业：模拟人生" class="headerlink" title="作业：模拟人生"></a><strong>作业：模拟人生</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">move_dict = &#123;</span><br><span class="line">    <span class="string">'w'</span>: <span class="keyword">lambda</span> y: y + <span class="number">1</span>,</span><br><span class="line">    <span class="string">'s'</span>: <span class="keyword">lambda</span> y: y - <span class="number">1</span>,</span><br><span class="line">    <span class="string">'a'</span>: <span class="keyword">lambda</span> x: x - <span class="number">1</span>,</span><br><span class="line">    <span class="string">'d'</span>: <span class="keyword">lambda</span> x: x + <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    move = input(<span class="string">'你要怎么移动:'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'w'</span> == move <span class="keyword">or</span> <span class="string">'s'</span> == move:</span><br><span class="line">        y = move_dict[move](y.</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'a'</span> == move <span class="keyword">or</span> <span class="string">'d'</span> == move:</span><br><span class="line">        x = move_dict[move](x)</span><br><span class="line">    print(<span class="string">'你当前的位置:%s:%s'</span> % (x,y))</span><br></pre></td></tr></table></figure><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a><strong>递归</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 当函数自身包含了对自身的调用，那么就是递归</span><br><span class="line">- 递归有最大上限次数:<span class="number">1000</span>次左右</span><br><span class="line">- 递归每一次都在开启一个新的函数空间</span><br><span class="line">- 递归会非常占用内存</span><br><span class="line">- 递归一定要确定终止条件</span><br><span class="line">普通循环 <span class="keyword">for</span> <span class="keyword">while</span> 一般适用于解决线性循环</span><br><span class="line">递归的优势在与解决非线性的</span><br></pre></td></tr></table></figure><h5 id="递归求和作业练习："><a href="#递归求和作业练习：" class="headerlink" title="递归求和作业练习："></a><strong>递归求和作业练习：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>],<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],<span class="number">1</span>,<span class="number">2</span>] <span class="comment">#-&gt; 44</span></span><br><span class="line"><span class="comment">#试一下用循环求和，</span></span><br><span class="line"><span class="comment">#如果列表变化，那么代码可以兼容，可以直接复用，不能改变</span></span><br><span class="line">mysum = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(iter)</span>:</span><span class="comment">#接收一个等待求和的多层序列</span></span><br><span class="line">    <span class="comment">#iter 中 无非两种数据类型: list int</span></span><br><span class="line">    <span class="keyword">global</span> mysum</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> iter:</span><br><span class="line">        <span class="keyword">if</span> type(var) == int: <span class="comment">#当前取出来的数据是int</span></span><br><span class="line">        <span class="comment">#if type(var) == type([])</span></span><br><span class="line">            mysum += var</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            get_sum(var) <span class="comment">#遇到的又是一个列表，那么我们继续遍历</span></span><br><span class="line">    <span class="comment">#for循环结束的时候，递归结束</span></span><br><span class="line">get_sum(mylist)</span><br><span class="line">print(mysum)</span><br></pre></td></tr></table></figure><p>递归统计每一个出现的字符出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="string">'asdazxc'</span>,<span class="string">'adxzc'</span>,[<span class="string">'12390145fcsdjfhzkjxcmnasd'</span>,<span class="string">'123987189asjkdsajkb'</span>],<span class="string">'asdqwewqerq'</span>,[<span class="string">'asd890q8390'</span>],<span class="string">'asdhquiweqysa'</span>,<span class="string">'asdhjkzhxjkckjasdh'</span>]</span><br><span class="line"><span class="comment">#把一样的提出来</span></span><br><span class="line"><span class="comment">#统计每一个出现的字符出现的次数</span></span><br><span class="line"><span class="comment">#for循环实现</span></span><br><span class="line">dict_num = &#123;&#125;</span><br><span class="line"><span class="comment">#key:对应的字符</span></span><br><span class="line"><span class="comment">#value:出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(seq)</span>:</span></span><br><span class="line">    <span class="comment">#字典是可变数据类型，所以直接可以在函数作用域内进行修改</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> seq: <span class="comment">#遍历整个列表数据</span></span><br><span class="line">        <span class="keyword">if</span> type(var) == list:</span><br><span class="line">            <span class="comment">#如果取出来的还是一个列表，那么就继续递归</span></span><br><span class="line">            get_num(var)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment">#如果碰到的是一个字符串</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> var:  <span class="comment">#遍历字符串，记录次数</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> dict_num:</span><br><span class="line">                    <span class="comment"># 如果获取到的字符，已经存在了字典中，那么他的次数+1</span></span><br><span class="line">                    dict_num[i] = dict_num[i] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果获取到的字符没出现过，那么就创建默认值1就行</span></span><br><span class="line">                    dict_num[i] = <span class="number">1</span></span><br><span class="line">get_num(mylist)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict_num:</span><br><span class="line">    print(key,<span class="string">':'</span>,dict_num[key])</span><br></pre></td></tr></table></figure><h5 id="回文判断"><a href="#回文判断" class="headerlink" title="回文判断"></a><strong>回文判断</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#问题：使用递归 判断一个字符串是否是回文:</span></span><br><span class="line"></span><br><span class="line">mystr = input(<span class="string">"请输入一个你觉得是回文的字符串我来帮你判断:"</span>)</span><br><span class="line"><span class="keyword">if</span> mystr == mystr[::<span class="number">-1</span>]:</span><br><span class="line">    print(<span class="string">'这就是回文'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'这不是回文'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_h</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(obj) &lt; <span class="number">2</span>: <span class="comment">#'a'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="comment">#返回 结束</span></span><br><span class="line">    <span class="keyword">elif</span> obj[<span class="number">0</span>] != obj[<span class="number">-1</span>]:</span><br><span class="line">        <span class="comment">#如果判断对应索引位置的值不一样，那么就返回False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># 现在我判断完了0和-1位置，是不是就可以不要他们了</span></span><br><span class="line">    <span class="keyword">return</span> p_h(obj[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">print(p_h(mystr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#奇数一定有1，偶数一定没有</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_h_2</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="comment">#7 - 1 / 2 = 3</span></span><br><span class="line">    <span class="comment">#7 / 2 - 1  /  2</span></span><br><span class="line">    <span class="comment">#结果少了小数点后的</span></span><br><span class="line">    index = len(obj) // <span class="number">2</span> <span class="comment">#取出中间索引位置</span></span><br><span class="line">    <span class="comment">#取出下一半字符串</span></span><br><span class="line">    b = obj[index:] <span class="keyword">if</span> <span class="keyword">not</span> (len(obj) &amp; <span class="number">1</span>) <span class="keyword">else</span> obj[index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment">#判断是否是奇或 偶数位</span></span><br><span class="line">        <span class="comment">#三元表达式 当 if条件成立，那么返回左边的，反之返回右边的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> obj[:index] == b[::<span class="number">-1</span>] <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">print(p_h_2(mystr))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回文判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_h_2</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="comment">#7 - 1 / 2 = 3</span></span><br><span class="line">    <span class="comment">#7 / 2 - 1  /  2   #结果少了小数点后的</span></span><br><span class="line">    index = len(obj) // <span class="number">2</span> <span class="comment">#取出中间索引位置</span></span><br><span class="line">    <span class="comment">#取出下一半字符串</span></span><br><span class="line">    b = obj[index:] <span class="keyword">if</span> <span class="keyword">not</span> (len(obj) &amp; <span class="number">1</span>) <span class="keyword">else</span> obj[index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment">#判断是否是奇或 偶数位</span></span><br><span class="line">        <span class="comment">#三元表达式 当 if条件成立，那么返回左边的，反之返回右边的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> obj[:index] == b[::<span class="number">-1</span>] <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">print(p_h_2(mystr))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归回文判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_h</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(obj) &lt; <span class="number">2</span>: <span class="comment">#'a'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> <span class="comment">#返回 结束</span></span><br><span class="line">    <span class="keyword">elif</span> obj[<span class="number">0</span>] != obj[<span class="number">-1</span>]:</span><br><span class="line">        <span class="comment">#如果判断对应索引位置的值不一样，那么就返回False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># 现在我判断完了0和-1位置，是不是就可以不要他们了</span></span><br><span class="line">    <span class="keyword">return</span> p_h(obj[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">print(p_h(mystr))</span><br></pre></td></tr></table></figure><h5 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a><strong>os模块</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">- os模块支持以下平台，他会根据平台来对应处理你调用的函数</span><br><span class="line">  - posix：类Unix操作 安卓 Centos ubuntu Debian</span><br><span class="line">  - nt：Win</span><br><span class="line">  - mac：MacOS</span><br><span class="line">    - <span class="number">4</span>月<span class="number">28</span>号早上<span class="number">8</span>点多的时候我的mac丢了</span><br><span class="line">  - dos：DOS</span><br><span class="line">    - dos必须关机 开机的阶段才能看到</span><br><span class="line">  - U盘安装dos操作系统</span><br><span class="line">- os.name</span><br><span class="line">  输出当前os模块在哪个平台下</span><br><span class="line">- os.getcwd() -&gt; str</span><br><span class="line">  - 获取当前的程序工作目录</span><br><span class="line">  - 工作目录：是我们程序在运行期间的时候，如果你需要和当前运行环境(操作系统)进行交互，相对路径互相参照，工作目录可以在程序运行期间修改</span><br><span class="line">  - 运行目录：维护当前程序是从哪个路径下被执行的</span><br><span class="line">- os.listdir(path=os.getcwd()) -&gt; list</span><br><span class="line">  - 返回指定path目录下的所有文件及文件夹的列表</span><br><span class="line">  - 当你不传递一个路径的时候，默认的会返回当前的工作目录下的内容</span><br><span class="line">  - 该函数返回的结果，不会明确什么是文件，什么是文件夹</span><br><span class="line">  - 返回的结果是一个字符串列表，并且每一个路径都是相对路径的</span><br><span class="line">  - 该函数也会将隐藏文件展示</span><br><span class="line">- os.remove(file_path) <span class="comment">#rm </span></span><br><span class="line">  - 删除file_path所指定的一个文件</span><br><span class="line">  - 如果成功返回<span class="keyword">None</span>，失败了直接报错</span><br><span class="line">  - 删除的时候一定要指明文件的后缀</span><br><span class="line">        IsADirectoryError: [Errno <span class="number">21</span>] Is a directory: <span class="string">'test'</span></span><br><span class="line">        删除了一个文件夹</span><br><span class="line">        FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'tesasdjklajdkt'</span></span><br><span class="line">        删除了一个不存在的文件</span><br><span class="line">- os.rmdir(dir_path) <span class="comment"># rm -rf</span></span><br><span class="line">  - 删除dir_path指定的一个文件夹(目录)</span><br><span class="line">  - 如果成功返回<span class="keyword">None</span>，失败了直接报错</span><br><span class="line">  - 无法递归删除文件夹，如果文件夹不为空，那么删除不了</span><br><span class="line">- os.makedirs(<span class="string">'a/b/c'</span>)</span><br><span class="line">  - 递归创建目录</span><br><span class="line">  - 可以嵌套创建目录</span><br><span class="line">  - 成功返回<span class="keyword">None</span>，失败则报错</span><br><span class="line">- os.mkdir(<span class="string">'a'</span>)</span><br><span class="line">  - 创建目录</span><br><span class="line">  - 不能在linux下创建一个和文件名重名的文件夹</span><br><span class="line">  - 虽然类型不同，但是名字也不能是相同的</span><br><span class="line">  - 成功返回<span class="keyword">None</span>，失败则报错</span><br><span class="line">- os.chdir() </span><br><span class="line">  - 在程序运行期间可以通过该函数来改变工作目录</span><br><span class="line">  - os.listdir() 这个函数可以不传递参数执行，返回当前工作目录下的所有文件及文件夹的列表</span><br><span class="line"></span><br><span class="line">os模块下还有一个子模块叫os.path</span><br><span class="line"></span><br><span class="line">os.path可以处理和路径及文件类型有关的问题</span><br><span class="line"></span><br><span class="line">- os.path.isfile(path)  -&gt; Bool</span><br><span class="line">  - 判断路径是否是一个真正的文件 </span><br><span class="line">- os.path.isdir(path)  -&gt; Bool</span><br><span class="line">  - 判断路径是否是一个真正的目录</span><br><span class="line">- os.path.join(<span class="string">'path'</span>,<span class="string">'sub_path'</span>)</span><br><span class="line">  - 拼接path和sub_path</span><br><span class="line">  - 可以构成绝对路径</span><br><span class="line">  - 路径中重复的部分不会被去掉</span><br><span class="line">      &gt;&gt;&gt; os.path.join(<span class="string">'home'</span>,<span class="string">'home/CODE'</span>)</span><br><span class="line">      <span class="string">'home/home/CODE'</span></span><br><span class="line">- os.path.exists(path)</span><br><span class="line">  - 判断路径是否存在</span><br><span class="line">  - 如果存在返回<span class="keyword">True</span>，反之返回<span class="keyword">False</span></span><br><span class="line">- os.path.getsize(path)</span><br><span class="line">  - 返回路径对应的文件大小</span><br><span class="line">  - 返回的文件大小单位为Byte</span><br></pre></td></tr></table></figure><h5 id="os语音控制你的电脑"><a href="#os语音控制你的电脑" class="headerlink" title="os语音控制你的电脑"></a>os<strong>语音控制你的电脑</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pip install PyAudio 是可以控制你的音频设备 录音还有播放</span></span><br><span class="line"><span class="string">pip install pyttsx3 是可以让你的电脑播放音频</span></span><br><span class="line"><span class="string">pip install requests 可以访问百度语音接口</span></span><br><span class="line"><span class="string">然后安装好pywin32软件即可</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1.你先向电脑传输音频</span></span><br><span class="line"><span class="string">2.解析音频 转换成字符串</span></span><br><span class="line"><span class="string">requests</span></span><br><span class="line"><span class="string">百度云接口</span></span><br><span class="line"><span class="string">3.说话后的字符串再分析</span></span><br><span class="line"><span class="string">4.os.system(处理分析后的字符串)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> pyttsx3 <span class="comment">#播放</span></span><br><span class="line"><span class="keyword">import</span> pyaudio <span class="comment">#录音</span></span><br><span class="line"><span class="keyword">import</span> time <span class="comment">#获取时间</span></span><br><span class="line"><span class="keyword">import</span> json <span class="comment">#用来分析json字符串</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="comment">#访问链接</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen,Request <span class="comment">#访问连接</span></span><br><span class="line"><span class="keyword">import</span> base64 <span class="comment">#b64编码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(data)</span>:</span></span><br><span class="line">eg = pyttsx3.init()</span><br><span class="line">eg.say(data)</span><br><span class="line">eg.runAndWait()</span><br><span class="line"></span><br><span class="line"><span class="comment">#向电脑说话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_audio</span><span class="params">()</span>:</span></span><br><span class="line">pa = pyaudio.PyAudio() <span class="comment">#初始化音频设备</span></span><br><span class="line">audio_equip = pa.open(</span><br><span class="line">format=pyaudio.paInt16,<span class="comment">#存储位深</span></span><br><span class="line">channels=<span class="number">1</span>,<span class="comment">#声道</span></span><br><span class="line">rate=<span class="number">16000</span>,<span class="comment">#采样率</span></span><br><span class="line">input=<span class="keyword">True</span>,<span class="comment">#输入</span></span><br><span class="line">frames_per_buffer=<span class="number">1024</span>,<span class="comment">#获取的数据大小</span></span><br><span class="line">)</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line">data = []</span><br><span class="line">print(<span class="string">'[+] 请说话...'</span>)</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">while</span> times &lt; <span class="number">45</span>: <span class="comment">#控制到了说话时间为3秒</span></span><br><span class="line">audio_data = audio_equip.read(<span class="number">1024</span>) <span class="comment">#从设备中读取音频</span></span><br><span class="line">data.append(audio_data) <span class="comment">#吧每一次read读取到的音频 追加到我的data列表中</span></span><br><span class="line">times += <span class="number">1</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'[+] 你说话耗时:%.2f'</span> % (end-start))</span><br><span class="line"></span><br><span class="line">audio_equip.close() <span class="comment">#关闭设备</span></span><br><span class="line">res = <span class="string">b''</span>.join(data) <span class="comment">#把列表中的所有数据拼接成整体</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">()</span>:</span></span><br><span class="line">url = <span class="string">'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s'</span></span><br><span class="line">client_id = <span class="string">'npFlwGurf1tMvMS8myW6W9AA'</span></span><br><span class="line">client_secret = <span class="string">'TZcTamTfVlYWilclkLbatZe18e8xYzIY'</span></span><br><span class="line">host = url % (client_id,client_secret)</span><br><span class="line">res = urlopen(host).read().decode() <span class="comment">#urlopen函数打开链接提交参数，获取Toekn</span></span><br><span class="line"><span class="comment">#但是这里获取到的是一个json的并且是编码过后的数据</span></span><br><span class="line">token = json.loads(res)[<span class="string">'access_token'</span>]</span><br><span class="line"><span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="comment">#百度音频解析 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bd_analysis</span><span class="params">()</span>:</span></span><br><span class="line">token = get_token()</span><br><span class="line">audio_data = get_audio()</span><br><span class="line">audio_data_len = len(audio_data)</span><br><span class="line">audio_data = base64.b64encode(audio_data).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment">#百度云在接收音频的时候，需要传递两个值</span></span><br><span class="line"><span class="comment">#第一个是音频的实际数据，用base64编码</span></span><br><span class="line"><span class="comment">#第二个是音频的长度, 一定是未编码之前的</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'format'</span>:<span class="string">'wav'</span>,</span><br><span class="line"><span class="string">'rate'</span>:<span class="number">16000</span>,</span><br><span class="line"><span class="string">'channel'</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">'cuid'</span>: <span class="string">'1804shuaideyipi'</span>,</span><br><span class="line"><span class="string">'dev_pid'</span>:<span class="number">1536</span>,</span><br><span class="line"><span class="string">'token'</span>:token,</span><br><span class="line"><span class="string">'speech'</span>:audio_data,</span><br><span class="line"><span class="string">'len'</span>:audio_data_len,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = json.dumps(data).encode() <span class="comment">#处理成json格式并且编码</span></span><br><span class="line">host = <span class="string">'http://vop.baidu.com/server_api'</span> <span class="comment">#把所有的东西都给到百度</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>, <span class="comment">#指明你提交的数据类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req = Request(url=host,headers=headers,data=data)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = json.loads(urlopen(req).read().decode())[<span class="string">'result'</span>][<span class="number">0</span>].replace(<span class="string">'，'</span>,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">res = <span class="string">'语音质量有问题,请重新喊话!'</span></span><br><span class="line">talk(<span class="string">'语音质量有问题,请重新喊话!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'[+] 你说话的内容:'</span>,res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="string">'yes'</span> <span class="keyword">in</span> bd_analysis():</span><br><span class="line">talk(<span class="string">'请告诉我，我要做什么！'</span>)</span><br><span class="line">res = bd_analysis()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'计算器'</span> <span class="keyword">in</span> res:</span><br><span class="line">os.system(<span class="string">'calc'</span>)</span><br><span class="line">talk(<span class="string">'爷，你的计算器打开了'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">'取消关机'</span> <span class="keyword">in</span> res:</span><br><span class="line">os.system(<span class="string">'shutdown -a'</span>)</span><br><span class="line">talk(<span class="string">'已经取消关机了'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">'关机'</span> <span class="keyword">in</span> res:</span><br><span class="line">os.system(<span class="string">'shutdown -s -t 1000'</span>)</span><br><span class="line">talk(<span class="string">'OK给你关机!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">所有的文件都是在磁盘上的！</span><br><span class="line">CPU只能处理在内存中的数据，也就是说，CPU无法直接去阅读磁盘里的文件</span><br><span class="line">CPU &lt;-&gt; MEM &lt;-&gt; DISK</span><br><span class="line">- 文件操作，在程序里都是对内存中的文件进行操作！</span><br><span class="line">第一步：打开文件  fp = open(path, mode=<span class="string">'r'</span>) </span><br><span class="line">open函数返回的是一个文件的句柄，不是完全的文件展开体，只是一个可以导出整个文件的头指针</span><br><span class="line">第二步：读   </span><br><span class="line">fp.read(num)</span><br><span class="line">    函数直接阅读整个文件，并返回整个文件为一个字符串</span><br><span class="line">        把整个文件读到了内存</span><br><span class="line">        如果给read函数传递了num变量</span><br><span class="line">        那么他是通过num来读取对应文件中的指定字符个数</span><br><span class="line">        read函数获取到的文件内容会保留行末尾的\n\r</span><br><span class="line">    fp.readline()</span><br><span class="line">    readline函数一次可以读取文件中的一行内容</span><br><span class="line">        当遇到了\n\r则停止，代表当前是一行了</span><br><span class="line">        当遇到了EOF（文件结束标志）</span><br><span class="line">        readline如果去读取超过文件本身行数的次数，那么不会报错，只会返回空</span><br><span class="line">        readline不会一次性把整个文件展开在内存</span><br><span class="line">        但是需要我们手动的维护行数</span><br><span class="line">        readline函数在获取到文件内容的每一行后，也会保留结尾的\r\n</span><br><span class="line">fp.readlines()</span><br><span class="line">    返回了字符串列表</span><br><span class="line">        列表中每一个元素都是一行的数据</span><br><span class="line">        并且保留行末尾的换行符号</span><br><span class="line">第三步：关闭文件</span><br><span class="line">fp.close()</span><br><span class="line">fp.tell()  获取文件指针位置   </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>) <span class="keyword">as</span> fp  这里的<span class="keyword">with</span> <span class="keyword">as</span> 语句可以自动做资源创建和释放</span><br><span class="line">文件权限：</span><br><span class="line">w:权限可以让我们打开一个文件，进行写入，但是每一次打开都会将之前的文件内容清空</span><br><span class="line">       write函数在写入文件内容的时候，不会自动的带换行\r\n</span><br><span class="line">    a：append 追加，读写指针在文件末尾</span><br></pre></td></tr></table></figure><h5 id="缓冲和缓存"><a href="#缓冲和缓存" class="headerlink" title="缓冲和缓存"></a><strong>缓冲和缓存</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">缓冲区( 内存(临时) )  针对读写文件 </span><br><span class="line">- 缓冲区让效率慢的和效率快的组件之间可以协同工作，缓和速度之间的矛盾，不频繁的写入磁盘，可以保护设备。因为磁盘的寿命是由写次数决定的。</span><br><span class="line">    - 当你关闭文件的时候，缓冲区中的内容会刷新到磁盘上</span><br><span class="line">    - 手动刷新缓冲区：fp.flush()</span><br><span class="line">    </span><br><span class="line">- 磁盘是保存数据的</span><br><span class="line">- 内存是流通数据的</span><br><span class="line">- CPU才是真正计算数据的</span><br><span class="line">- CPU处理内存中的数据，而内存中的数据来自于磁盘</span><br><span class="line"></span><br><span class="line">缓存：为了提高数据流通速度</span><br><span class="line">缓存是在CPU里有</span><br><span class="line">缓存是一块超级告诉的数据流通空间（类似内存），但是太贵了，所以电脑上缓存空间一般不大</span><br><span class="line">L1：CPU经常从L1中拿取数据、控制线程和进程</span><br><span class="line">L2：存储数据</span><br><span class="line">L3：管控内存</span><br></pre></td></tr></table></figure><h5 id="读写指针修改"><a href="#读写指针修改" class="headerlink" title="读写指针修改"></a><strong>读写指针修改</strong></h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fp.seek(offset,when)</span><br><span class="line">offset：偏移量</span><br><span class="line">字节为单位</span><br><span class="line">when: 从哪里开始移动</span><br><span class="line"><span class="number">0</span>:文件开头</span><br><span class="line"><span class="number">1</span>:当前位置</span><br><span class="line"><span class="number">2</span>:文件末尾</span><br><span class="line">a模式下的文件末尾读写指针如何移动到文件头部呢？</span><br><span class="line">fp.seek(<span class="number">0</span>,<span class="number">0</span>) -&gt; 回到了文件开头</span><br><span class="line">fp.tell()  获取文件指针，返回的也是以一个字节为单位</span><br><span class="line"></span><br><span class="line">不同权限下读写指针位置：</span><br><span class="line">- r: 文件开头</span><br><span class="line">- w: 文件开头</span><br><span class="line">- a: 文件末尾</span><br></pre></td></tr></table></figure><h5 id="csv文件操作"><a href="#csv文件操作" class="headerlink" title="csv文件操作"></a><strong>csv</strong>文件操作</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- CSV文件是一个用于电子表格存储类型</span><br><span class="line">- csv文件是存储了以逗号分隔的数据</span><br><span class="line"></span><br><span class="line">csv文件默认写入的时候 会在每两行之间多一个空行</span><br><span class="line">解决办法：</span><br><span class="line">在打开文件的时候</span><br><span class="line">fp = open(<span class="string">'1.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>)</span><br><span class="line"><span class="comment">#newline参数用来控制 每一次写入csv文件数据的时候，一行行之间是否需要空行</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: 处理普通文本对象为csv文本对象</span><br><span class="line">打开文件：</span><br><span class="line">fp = open(path,mode)</span><br><span class="line">加工：</span><br><span class="line">csv_read_fp = csv.reader(fp)  负责读取</span><br><span class="line">csv_write_fp = csv.writer(fp) 负责写入</span><br><span class="line"><span class="number">2</span>: 对csv_read_fp进行<span class="keyword">for</span>循环迭代，就可以一行行的访问csv表格中的内容</span><br><span class="line"><span class="keyword">for</span> var1,var2 <span class="keyword">in</span> csv_read_fp:</span><br><span class="line">print(var1,var2)</span><br><span class="line"><span class="number">3</span>: 对csv_write_fp文件写入内容，写入的是一些逗号分隔开的数据</span><br><span class="line">csv_write_fp.wirterow([seq])</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字典读取csv时：</span><br><span class="line">dict_read_csv = csv.DictReader(fp)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> dict_read_csv:</span><br><span class="line">print(var[<span class="string">'name'</span>],var[<span class="string">'sex'</span>])</span><br><span class="line">csv文件中第一行是key值，下面的数据是value</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字典写一个csv文件</span><br><span class="line">dict_write_csv = csv.DictWriter(fp,fileds)</span><br><span class="line">fp: </span><br><span class="line">打开的文件对象，需要加工成csv字典处理文件对象</span><br><span class="line">fileds： 标题行 第一行</span><br><span class="line">fileds 也是一个逗号分隔的数据 比如: fileds = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>]</span><br><span class="line"></span><br><span class="line">dict_write_csv.writeheader() <span class="comment">#将指定的标题行先写入到csv文件里</span></span><br><span class="line">dict_write_csv.writerow(&#123;<span class="string">'name'</span>:<span class="string">'BOB'</span>,<span class="string">'age'</span>:<span class="string">'16'</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">fp = open(<span class="string">'test1.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>)</span><br><span class="line">fileds = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>]  <span class="comment">#标题行</span></span><br><span class="line">name = [<span class="string">'Bob'</span>,<span class="string">'Jack'</span>,<span class="string">'Lucy'</span>]</span><br><span class="line">age = [<span class="number">10</span>,<span class="number">16</span>,<span class="number">18</span>]</span><br><span class="line">sex = [<span class="string">'man'</span>,<span class="string">'man'</span>,<span class="string">'woman'</span>]</span><br><span class="line">human_list = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">3</span>): <span class="comment">#0-2 </span></span><br><span class="line"><span class="comment">#外层循环用来控制生产三个数据</span></span><br><span class="line">human_dict = &#123;&#125;</span><br><span class="line">human_dict[fileds[<span class="number">0</span>]] = name[index] <span class="comment">#name</span></span><br><span class="line">human_dict[fileds[<span class="number">1</span>]] = age[index] <span class="comment">#name</span></span><br><span class="line">human_dict[fileds[<span class="number">2</span>]] = sex[index] <span class="comment">#name</span></span><br><span class="line">human_list.append(human_dict)</span><br><span class="line"><span class="comment">#BOB = &#123;'name':'BOB','age':'16','sex':'man'&#125;</span></span><br><span class="line">dict_write_csv = csv.DictWriter(fp,fileds) <span class="comment">#加工文件对象，指明标题行</span></span><br><span class="line">print(help(csv.DictWriter)) <span class="comment">#写入标题行</span></span><br><span class="line"><span class="comment">#******************************</span></span><br><span class="line">dict_write_csv.writeheader() <span class="comment">#用来在csv文件中写入标题行</span></span><br><span class="line"><span class="comment">#******************************</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> human_list: <span class="comment">#遍历用户字典，分别写入csv文件中</span></span><br><span class="line">dict_write_csv.writerow(var)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h5 id=&quot;函数参数&quot;&gt;&lt;a href=&quot;#函数参数&quot; class=&quot;headerlink&quot; title=&quot;函数参数&quot;&gt;&lt;/a&gt;&lt;strong&gt;函数参
      
    
    </summary>
    
      <category term="python(二）" scheme="http://www.python100.com/categories/python-%E4%BA%8C%EF%BC%89/"/>
    
    
  </entry>
  
  <entry>
    <title>函数进阶</title>
    <link href="http://www.python100.com/2018/07/26/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <id>http://www.python100.com/2018/07/26/第三阶段函数进阶/</id>
    <published>2018-07-26T01:44:00.000Z</published>
    <updated>2018-07-26T01:47:14.104Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><strong>闭包</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">实现闭包步骤：</span><br><span class="line">- <span class="number">1</span>: 你要先来一个函数嵌套</span><br><span class="line">  - 外函数里包装一个内函数</span><br><span class="line">- <span class="number">2</span>: 外函数作用域有一个局部数据对象</span><br><span class="line">- <span class="number">3</span>: 内部函数对于外部函数作用域里非全局变量的引用</span><br><span class="line">- <span class="number">4</span>: 外函数返回内部函数</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">()</span>:</span></span><br><span class="line">        a = <span class="number">1</span> <span class="comment">#a是属于wai函数作用域里的</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">()</span>:</span> <span class="comment">#nei函数就是一个载体了</span></span><br><span class="line">            print(a)</span><br><span class="line">        <span class="keyword">return</span> nei <span class="comment">#返回的是一个函数对象</span></span><br><span class="line">    func = wai() <span class="comment">#func -&gt; None</span></span><br><span class="line">    <span class="comment">#func == nei</span></span><br><span class="line">    func() <span class="comment"># a</span></span><br><span class="line">    <span class="comment">#返回的nei函数可以在wai函数执行完成之后，继续不报错执行</span></span><br><span class="line">    <span class="comment">#证明了在nei函数，也就是此时的func中，保留一个a变量。</span></span><br><span class="line">    </span><br><span class="line"><span class="number">1</span>: 闭包内部创建载体，可以使一个局部变量续命</span><br><span class="line"><span class="number">2</span>:变量私有化：</span><br><span class="line">每一次闭包函数执行后的返回值都是一个新的，这是因为函数运行首先开辟的都   是一块新的函数临时空间</span><br><span class="line">每一次闭包函数执行后，都是返回了一个不一样的闭包函数载体，</span><br><span class="line">那么这个载体里的变量，也是不一样的</span><br><span class="line"><span class="number">3</span>: 变量状态维持：</span><br><span class="line">闭包函数载体(返回值)，只要存活着，那么它其中的变量也将会一直维护</span><br><span class="line"><span class="number">4</span>: 闭包会一直保存变量，所以呢，本该死去的局部变量现在无法及时得到释放,</span><br><span class="line">    消耗内存</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span> <span class="comment">#局部变量 只能存活在函数运行期间</span></span><br><span class="line">    <span class="comment">#mylist[0] += 1 #在函数内部引用全局可变变量，那么其实你们都是全局的</span></span><br><span class="line">    mylist = [<span class="string">'a'</span>,<span class="string">'b'</span>] <span class="comment">#局部变量</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">func   <span class="comment">#函数对象 函数名</span></span><br><span class="line">func() <span class="comment">#函数调用</span></span><br><span class="line">print(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#让一个局部变量存活下来:</span></span><br><span class="line">    <span class="comment">#1: 返回值</span></span><br><span class="line">    <span class="comment">#2: global</span></span><br><span class="line">    <span class="comment">#3: 列表保存数据 全局共享同一个(只在函数内部做修改) 可变数据的引用</span></span><br><span class="line">    <span class="comment">#4: 闭包也可以给一个局部变量续命</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于可变数据对象：</span></span><br><span class="line">    <span class="comment">#赋值：我为自己创建了一个新得 找了新欢</span></span><br><span class="line">        <span class="comment">#直接创建了一个新的 ： 局部变量</span></span><br><span class="line">    <span class="comment">#修改：影响咱俩共有的女朋友</span></span><br><span class="line">        <span class="comment">#全局被局部所使用 ： 全局</span></span><br></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><strong>装饰器</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器可以在函数运行前添加功能，并且不影响原有函数内容</span></span><br><span class="line"></span><br><span class="line">函数三要素</span><br><span class="line">def func(arg): <span class="comment">#定义</span></span><br><span class="line">var = arg ** <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> var</span><br><span class="line">函数名: func</span><br><span class="line">函数参数(形参)：arg</span><br><span class="line">函数返回值: arg</span><br><span class="line">默认的，如果没有函数内的<span class="keyword">return</span>语句，函数默认返回None</span><br><span class="line"></span><br><span class="line">res = func(<span class="number">10</span>) <span class="comment">#执行</span></span><br><span class="line">函数名：func</span><br><span class="line">返回值：res</span><br><span class="line">参数(实参)：<span class="number">10</span></span><br><span class="line"></span><br><span class="line">- func：函数对象</span><br><span class="line">- func() ：函数调用</span><br></pre></td></tr></table></figure><h3 id="普通装饰器"><a href="#普通装饰器" class="headerlink" title="普通装饰器"></a><strong>普通装饰器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">(b_func)</span>:</span> <span class="comment">#外函数的参数是一个函数对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"嘿嘿嘿"</span>) <span class="comment">#在nei函数里写的代码基本上都是添加的功能</span></span><br><span class="line">        <span class="keyword">return</span> b_func() <span class="comment">#这个是nei函数返回值，用来返回之前在wai函数所接收的参数</span></span><br><span class="line">        <span class="comment">#b_func()</span></span><br><span class="line">        <span class="comment">#return ''</span></span><br><span class="line">    <span class="keyword">return</span> nei <span class="comment">#返回了wai函数里的这个定义好的闭包容器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@wai #语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'哈哈哈哈'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func'</span></span><br><span class="line"></span><br><span class="line">res = func() <span class="comment">#调用一个被装饰函数 其实相等于 wai(func)()</span></span><br><span class="line">print(<span class="string">'func的返回值:'</span>,res)</span><br><span class="line"><span class="comment">#func() 传统函数调用</span></span><br><span class="line">    <span class="comment">#1: print('哈哈哈')</span></span><br><span class="line">    <span class="comment">#2: return None</span></span><br><span class="line"><span class="comment">#func() 被装饰时调用 @wai</span></span><br><span class="line">    <span class="comment">#被装饰函数: func</span></span><br><span class="line">    <span class="comment">#装饰器函数: wai</span></span><br><span class="line">    <span class="comment">#1: wai(func) -&gt; return nei</span></span><br><span class="line">    <span class="comment">#2: nei() -&gt;</span></span><br><span class="line">        <span class="comment">#1: print("嘿嘿嘿")</span></span><br><span class="line">        <span class="comment">#2: return b_func()</span></span><br><span class="line">            <span class="comment">#1: b_func() -&gt; 'func'  #内部调用被装饰函数</span></span><br><span class="line">            <span class="comment">#2: return 'func' #内部闭包函数的返回值 其实是被装饰函数的返回值</span></span><br></pre></td></tr></table></figure><h3 id="被装饰函数带参数"><a href="#被装饰函数带参数" class="headerlink" title="被装饰函数带参数"></a><strong>被装饰函数带参数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">(func)</span>:</span> <span class="comment">#装饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">(var1,var2)</span>:</span></span><br><span class="line">        var1 = <span class="number">100</span>  <span class="comment">#在闭包函数内部对被装饰函数参数进行干预</span></span><br><span class="line">        var2 = <span class="number">99</span></span><br><span class="line">        <span class="keyword">return</span> func(var1,var2)</span><br><span class="line">    <span class="keyword">return</span> nei</span><br><span class="line"></span><br><span class="line"><span class="meta">@wai</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">res = work(<span class="number">20</span>,<span class="number">30</span>)  <span class="comment">#wai(work)(a,b)</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="装饰器函数也可以有参数"><a href="#装饰器函数也可以有参数" class="headerlink" title="装饰器函数也可以有参数"></a><strong>装饰器函数也可以有参数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#商品</span></span><br><span class="line">mind = <span class="keyword">True</span></span><br><span class="line">zhekou = <span class="number">0.9</span> <span class="comment">#折扣的数值</span></span><br><span class="line">youhuiquan = <span class="number">5</span></span><br><span class="line"><span class="comment"># 当你的装饰器函数也需要参数的时候，只需要多一层包装即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dazhe</span><span class="params">(con,zk,yhq)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">(money)</span>:</span></span><br><span class="line">            print(<span class="string">'-----------'</span>)</span><br><span class="line">            <span class="keyword">if</span> con:</span><br><span class="line">                print(<span class="string">'打折!'</span>)</span><br><span class="line">                money = money * zk</span><br><span class="line">            <span class="keyword">elif</span> yhq:</span><br><span class="line">                print(<span class="string">"优惠券！"</span>)</span><br><span class="line">                money = money - yhq</span><br><span class="line">            <span class="keyword">return</span> func(money)</span><br><span class="line">        <span class="keyword">return</span> nei</span><br><span class="line">    <span class="keyword">return</span> wai</span><br><span class="line"><span class="comment">#dazhe -&gt; wai</span></span><br><span class="line"><span class="comment">#wai -&gt; nei</span></span><br><span class="line"><span class="comment">#nei -&gt; func()</span></span><br><span class="line"><span class="meta">@dazhe(mind,zhekou,youhuiquan)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apple</span><span class="params">(money)</span>:</span></span><br><span class="line">    print(<span class="string">'苹果的价钱是:%d'</span> % money)</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line"><span class="meta">@dazhe(mind,zhekou,youhuiquan)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pants</span><span class="params">(money)</span>:</span></span><br><span class="line">    print(<span class="string">'裤子的价钱是:%d'</span> % money)</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line"><span class="meta">@dazhe(mind,zhekou,youhuiquan)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skirt</span><span class="params">(money)</span>:</span></span><br><span class="line">    print(<span class="string">'裙子的价钱是:%d'</span> % money)</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line"></span><br><span class="line">apple(<span class="number">10</span>)</span><br><span class="line">pants(<span class="number">50</span>)</span><br><span class="line">skirt(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">(b_func)</span>:</span> <span class="comment">#外函数的参数是一个函数对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"嘿嘿嘿"</span>) <span class="comment">#在nei函数里写的代码基本上都是添加的功能</span></span><br><span class="line">        <span class="keyword">return</span> b_func() <span class="comment">#这个是nei函数返回值，用来返回之前在wai函数所接收的参数</span></span><br><span class="line">        <span class="comment">#b_func()</span></span><br><span class="line">        <span class="comment">#return ''</span></span><br><span class="line">    <span class="keyword">return</span> nei <span class="comment">#返回了wai函数里的这个定义好的闭包容器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@wai #语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'哈哈哈哈'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func'</span></span><br><span class="line"></span><br><span class="line">res = func() <span class="comment">#调用一个被装饰函数 其实相等于 wai(func)()</span></span><br><span class="line">print(<span class="string">'func的返回值:'</span>,res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#func() 传统函数调用</span></span><br><span class="line">    <span class="comment">#1: print('哈哈哈')</span></span><br><span class="line">    <span class="comment">#2: return None</span></span><br><span class="line"><span class="comment">#func() 被装饰时调用 @wai</span></span><br><span class="line">    <span class="comment">#被装饰函数: func</span></span><br><span class="line">    <span class="comment">#装饰器函数: wai</span></span><br><span class="line">    <span class="comment">#1: wai(func) -&gt; return nei</span></span><br><span class="line">    <span class="comment">#2: nei() -&gt;</span></span><br><span class="line">        <span class="comment">#1: print("嘿嘿嘿")</span></span><br><span class="line">        <span class="comment">#2: return b_func()</span></span><br><span class="line">            <span class="comment">#1: b_func() -&gt; 'func'  #内部调用被装饰函数</span></span><br><span class="line">            <span class="comment">#2: return 'func' #内部闭包函数的返回值 其实是被装饰函数的返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'穿裙子'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'穿大衣'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'穿牛仔'</span>)</span><br><span class="line">func_dict = &#123;</span><br><span class="line">    <span class="string">'裙子'</span>:func_1,</span><br><span class="line">    <span class="string">'大衣'</span>:func_2,</span><br><span class="line">    <span class="string">'牛仔'</span>:func_3,</span><br><span class="line">&#125;</span><br><span class="line">choice = random.choice(list(func_dict.keys()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wai</span><span class="params">(choice)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wai</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">nei</span><span class="params">()</span>:</span></span><br><span class="line">            func_dict[choice]()</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> nei</span><br><span class="line">    <span class="keyword">return</span> wai</span><br><span class="line"></span><br><span class="line"><span class="meta">@_wai(choice)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">girl</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'上班了！'</span>)</span><br><span class="line"></span><br><span class="line">girl() <span class="comment">#装饰这个函数</span></span><br></pre></td></tr></table></figure><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a><strong>异常捕获</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">常见错误：</span><br><span class="line">IndentationError: unexpected indent缩进错误</span><br><span class="line">ZeroDivisionError: division by zero除数为<span class="number">0</span></span><br><span class="line">NameError: name <span class="string">'b'</span> is not defined访问未声明变量</span><br><span class="line">IndexError: list index out of range访问越界(超过了原有数据的长度)变量</span><br><span class="line">KeyError: <span class="number">2</span>访问字典中(JSON类似)不存在key值</span><br><span class="line">AttributeError: module <span class="string">'socket'</span> has no attribute <span class="string">'create'</span></span><br><span class="line">访问一个对象(变量，函数，类，模块)不存在的属性</span><br><span class="line"></span><br><span class="line">异常捕获的作用：</span><br><span class="line">- 异常捕获可以提高代码的健壮性</span><br><span class="line">- 让我们的代码在不同情况下，可以让程序继续向下，而不是直接中断</span><br><span class="line">- 有一些异常错误，需要额外导入模块才可以使用，切记。</span><br><span class="line"></span><br><span class="line">异常的类型：</span><br><span class="line">SystemExit(系统中断异常)</span><br><span class="line">KeyboardInterrupt(ctrl+c)</span><br><span class="line">Exception(内建异常类) </span><br><span class="line">Python中的异常都是继承自这个Exception而来的</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'打开文件'</span>)  <span class="comment">#捕获异常</span></span><br><span class="line">    fp = open(<span class="string">'1.txt'</span>)</span><br><span class="line">except FileNotFoundError :</span><br><span class="line">    print(<span class="string">'这个文件不存在'</span>)   <span class="comment">#捕获到异常后要做的事情</span></span><br><span class="line">except Exception as e:</span><br><span class="line"><span class="comment">#捕获所有错误，一般不用</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"><span class="comment">#不管错误是否发生，都执行这里的代码，比如关闭文件</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"关闭文件"</span>)</span><br><span class="line">    fp.close()</span><br><span class="line"><span class="comment">#else 分支可以在没有异常出现的时候 执行</span></span><br></pre></td></tr></table></figure><h3 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a><strong>手动抛出异常</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动抛出异常，就是直接raiseraise MyError('你能不能好好传参')</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">'我心情不好，我就是要报错'</span>)</span><br><span class="line">    <span class="comment">#raise语句去将一个合法的异常</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    print(<span class="string">'这是我刚才自己要抛出来的异常，现在我要捕获他'</span>)</span><br><span class="line">print(<span class="string">"哈哈哈哈哈哈"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(name) == str <span class="keyword">and</span> type(age) == int:</span><br><span class="line">        print(<span class="string">'%s:%d'</span> % (name,age,abc))  <span class="comment">#定义了传入参数的类型，类型不对就报错</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'你能不能好好传参'</span>)</span><br><span class="line">    <span class="comment">#%d只能接受数字</span></span><br><span class="line">name = <span class="string">'小明'</span></span><br><span class="line">age = <span class="string">'18'</span></span><br><span class="line">func(name,age)</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span> <span class="comment">#面向对象的继承方法</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment">#什么都不干，过！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#继承已又的异常基类，从这个基础来创建自己的异常</span></span><br><span class="line"><span class="comment"># 现在已经创建出来了一个自己的错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    <span class="comment">#name str</span></span><br><span class="line">    <span class="comment">#age int</span></span><br><span class="line">    <span class="keyword">if</span> type(name) == str <span class="keyword">and</span> type(age) == int:</span><br><span class="line">        print(<span class="string">'%s:%d'</span> % (name,age,abc))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> MyError(<span class="string">'你能不能好好传参'</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">'小明'</span></span><br><span class="line">age = <span class="string">'18'</span></span><br><span class="line">func(name,age)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="comment">#2,3版本是两个Python</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">    <span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> urllib2 <span class="keyword">import</span> urlopen,URLError</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.asdaskljdklasjdsajdlk.com'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = urlopen(url)</span><br><span class="line">    print(res.read())</span><br><span class="line"><span class="keyword">except</span> URLError:</span><br><span class="line">    print(<span class="string">'[+] 链接异常，无法访问'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">human = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'小明'</span>,</span><br><span class="line">    <span class="string">'company'</span>:<span class="string">'小红'</span>,</span><br><span class="line">    <span class="comment">#'gays':'小暗'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'%s的老婆是%s'</span> % (human[<span class="string">'name'</span>],human[<span class="string">'company'</span>],human[<span class="string">'gays'</span>]))</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'company'</span> <span class="keyword">in</span> str(e):</span><br><span class="line">        print(<span class="string">'他没老婆'</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'gays'</span> <span class="keyword">in</span> str(e):</span><br><span class="line">        print(<span class="string">'他没老公'</span>)</span><br></pre></td></tr></table></figure><h3 id="时间模块time"><a href="#时间模块time" class="headerlink" title="时间模块time"></a><strong>时间模块time</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">- time.time()  -&gt; float_time</span><br><span class="line">  - linux时间：从<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日， <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">  - 获取从Unix时间到现在经过的秒数 -&gt; 浮点数</span><br><span class="line">- time.localtime(float_time)  -&gt; 时间元组</span><br><span class="line">  - 如果不传递参数，那么默认返回本地时间的一个时间元组</span><br><span class="line">    </span><br><span class="line">res = time.localtime() -&gt; 时间结果是具备时区的</span><br><span class="line">time.struct_time(</span><br><span class="line">    tm_year=<span class="number">2018</span>,  年</span><br><span class="line">    tm_mon=<span class="number">6</span>,  月</span><br><span class="line">    tm_mday=<span class="number">9</span>,  日</span><br><span class="line">    tm_hour=<span class="number">10</span>,  时</span><br><span class="line">    tm_min=<span class="number">17</span>,  分</span><br><span class="line">    tm_sec=<span class="number">9</span>,  秒</span><br><span class="line">    tm_wday=<span class="number">5</span>,  星期几  星期一数字是<span class="number">0</span> 从<span class="number">0</span>开始 表示星期几</span><br><span class="line">    tm_yday=<span class="number">160</span>,  今年第几天</span><br><span class="line">    tm_isdst=<span class="number">0</span>  夏令时</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res.tm_year</span><br><span class="line">res.tm_mon</span><br><span class="line">通过返回值的内置属性来获取到对应的值</span><br><span class="line"></span><br><span class="line">time.sleep(seconds)  --&gt; 程序休眠，让程序挂起</span><br><span class="line">time.clock()  ---&gt;   一般衡量程序的耗时</span><br><span class="line">- win：</span><br><span class="line">          - 第一次调用：返回当前的CPU时间</span><br><span class="line">          - 第二次调用：返回距离上一次调用所花费的时间</span><br><span class="line">    - linux：</span><br><span class="line">         - 直接返回程序运行到执行这个函数所花费的时间</span><br><span class="line">time.asctime(时间元组)</span><br><span class="line">time.strftime(格式，时间元组)  -&gt; 良好可读性的字符串</span><br><span class="line">将时间元组根据你指定的格式来成为一个良好可读性的字符串</span><br><span class="line">time.strptime(良好可读性的字符串，格式) -&gt; 时间元组</span><br><span class="line">把一个字符串变成时间元组。</span><br><span class="line"></span><br><span class="line">%Y: 年份 Year</span><br><span class="line">%m: 月份 month</span><br><span class="line">%d: 天数 day</span><br><span class="line"><span class="comment">#年月日，时分秒中，只有月和天是小写的，其他都是大写的</span></span><br><span class="line">%H：时 Hour</span><br><span class="line">%M：分 Minute</span><br><span class="line">%S：秒 Seconds</span><br><span class="line"><span class="comment">#以上六个死记硬背</span></span><br><span class="line"><span class="string">'%Y-%m-%d %H:%M:%S'</span></span><br><span class="line"></span><br><span class="line">%x 月/日/年</span><br><span class="line">%A: 星期的全称英语</span><br><span class="line">%a：星期的缩写英语</span><br><span class="line"></span><br><span class="line">%F 年/月/日</span><br><span class="line">%T 时/分/秒</span><br><span class="line"></span><br><span class="line">- strf  将时间元组变成字符串</span><br><span class="line">- strp 将字符串变成时间元组</span><br><span class="line">- 时间元组用来被处理，时间字符串只是一个展示的</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.time()</span><br><span class="line"><span class="number">1530412385.3557775</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">10</span>, tm_min=<span class="number">33</span>, tm_sec=<span class="number">14</span>, tm_wday=<span class="number">6</span>, tm_yday=<span class="number">182</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.asctime(time.localtime())</span><br><span class="line"><span class="string">'Sun Jul  1 10:33:39 2018'</span></span><br></pre></td></tr></table></figure><h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a><strong>datetime模块</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime</span><br><span class="line">    - 处理年月日，时分秒的</span><br><span class="line">    - datetime.datetime.now()</span><br><span class="line">    - datetime.datetime.today()</span><br><span class="line">      - 获取当前的时间</span><br><span class="line">      - 返回值：datetime.datetime类型</span><br><span class="line">      - 返回值类型支持差值运算，用来求出两个时间区间的秒数，或者说你指定的时间单位</span><br><span class="line"></span><br><span class="line">datetime.date</span><br><span class="line">    - 处理年月日</span><br><span class="line">    - datetime.date.today()</span><br><span class="line">      - 年月日返回当前时间</span><br><span class="line">datetime.time</span><br><span class="line">    - 只能处理时分秒</span><br><span class="line">    - 多用来创建时分秒的时间</span><br><span class="line">    </span><br><span class="line">创建时间</span><br><span class="line">    datetime.datetime(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">59</span>) 创建年月日，时分秒</span><br><span class="line">    datetime.date(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">6</span>) 创建年月日</span><br><span class="line">    datetime.time(<span class="number">10</span>,<span class="number">50</span>,<span class="number">59</span>) 创建时分秒</span><br><span class="line">    </span><br><span class="line"><span class="comment">#我想求出再过20天是啥时候</span></span><br><span class="line">&gt;&gt;&gt; de = datetime.timedelta(days=<span class="number">25</span>)</span><br><span class="line">&gt;&gt;&gt; now = datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt; now + de </span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">286059</span>)</span><br><span class="line"><span class="comment">#结果中，会自动把天数，月数向上换算</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now()</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">190926</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>de=datetime.timedelta(days=<span class="number">20</span>)  <span class="comment">#求20天后日期时间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now=datetime.datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now+de</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">53</span>, <span class="number">726784</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>de=datetime.timedelta(days=<span class="number">-20</span>)  <span class="comment">#使用-20求的是20天之前的日期时间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now+de</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">53</span>, <span class="number">726784</span>)</span><br></pre></td></tr></table></figure><h3 id="随机模块random"><a href="#随机模块random" class="headerlink" title="随机模块random"></a><strong>随机模块random</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- random.randrange(stop)</span><br><span class="line">  - 生产出从<span class="number">0</span>到stop区间内的一个随机整数</span><br><span class="line">  - 不包含stop</span><br><span class="line">- random.randrange(start,stop,step)  </span><br><span class="line">  - 生产出从<span class="number">0</span>到stop区间内以步长为step的一个随机整数</span><br><span class="line">  - 不包含stop</span><br><span class="line">- random.randint(start,stop)</span><br><span class="line">  - 返回start和stop区间内的一个随机整数</span><br><span class="line">  - 起点和终点都可能被取到</span><br><span class="line">- random.getrandbits(num)</span><br><span class="line">  - 传入一个num值，<span class="number">0</span>-<span class="number">2</span>**num次方，去一个随机的整数</span><br><span class="line">  - 如果传递的num是<span class="number">1</span>，<span class="number">0</span> - <span class="number">2</span> ** <span class="number">1</span>  <span class="number">0</span> -<span class="number">2</span></span><br><span class="line">  - 不能取到终点：如果你传递的是<span class="number">2</span>**<span class="number">3</span>,那么取不到<span class="number">8</span></span><br><span class="line">- 随机浮点数</span><br><span class="line">- random.random()  -&gt;   &lt;<span class="number">1</span></span><br><span class="line">  - 返回介于<span class="number">0</span>到<span class="number">1</span>之间的浮点数</span><br><span class="line">- random.uniform(start,stop)</span><br><span class="line">  - 取出一个从start开始到stop结束的一个随机浮点数</span><br><span class="line">  - 这里start也可能出现</span><br><span class="line">  - stop的值是不取的</span><br><span class="line">- 随机序列</span><br><span class="line">- random.choice(seq) </span><br><span class="line">  - 从一个非空序列中随机选择一个元素</span><br><span class="line">  - 序列为空则报错</span><br><span class="line">  - 序列：字符串，列表，元组 支持索引操作的数据</span><br><span class="line">- random.shuffle(seq)</span><br><span class="line">  - 打乱序列的顺序</span><br><span class="line">- random.sample(seq,num)</span><br><span class="line">  - num是我要从seq中随机抽取数据的长度，num 一定要小于 len(seq)</span><br><span class="line">  - 从seq中 随机抽取num个数据 返回成一个列表</span><br><span class="line">  - num代表取几个</span><br></pre></td></tr></table></figure><h3 id="SYS模块"><a href="#SYS模块" class="headerlink" title="SYS模块"></a><strong>SYS模块</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sys.argv:</span><br><span class="line">获取当前程序的命令行参数</span><br><span class="line">命令行参数 就是你在执行.py脚本时传递的</span><br><span class="line">参数的列表</span><br><span class="line">sys.argv[<span class="number">0</span>]: 当前程序的名字</span><br><span class="line">sys.platform</span><br><span class="line">  - 用来输出当前的环境平台</span><br><span class="line">  - os.name</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line">  直接退出程序</span><br><span class="line">sys.path</span><br><span class="line">  - 环境变量列表</span><br><span class="line">IO流处理：</span><br><span class="line">i: <span class="keyword">in</span> 进去</span><br><span class="line">- 键盘向程序输入内容</span><br><span class="line">- 写文件</span><br><span class="line">- 接受其他服务器反馈</span><br><span class="line">o: out 出来</span><br><span class="line">- print向屏幕打印</span><br><span class="line">- 读文件</span><br><span class="line">- 向其他服务器发送请求</span><br><span class="line">IO是影响程序性能,print操作是IO操作，那么尽量少在代码里print</span><br><span class="line"></span><br><span class="line">sys.stdin </span><br><span class="line">    - 标准输入   input</span><br><span class="line">    sys.stdin.readline()[:-<span class="number">1</span>] == input()</span><br><span class="line">sys.stdout</span><br><span class="line">- 标准输出 print</span><br><span class="line">sys.stdout.write(<span class="string">'abc\n'</span>) == print(<span class="string">'abc'</span>)</span><br><span class="line">sys.stderr</span><br><span class="line">- 标准出错</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;&lt;strong&gt;闭包&lt;/stron
      
    
    </summary>
    
      <category term="python(三)" scheme="http://www.python100.com/categories/python-%E4%B8%89/"/>
    
    
  </entry>
  
  <entry>
    <title>python基础数据类型</title>
    <link href="http://www.python100.com/2018/07/26/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E8%83%8C%E8%AF%B5/"/>
    <id>http://www.python100.com/2018/07/26/第一阶段背诵/</id>
    <published>2018-07-26T01:44:00.000Z</published>
    <updated>2018-07-26T01:46:02.835Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p><strong>数据类型：数字，字符串，列表，元组，集合，字典</strong></p><h5 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">整数：int</span><br><span class="line">浮点数：float</span><br><span class="line">布尔值：大小写敏感  非空非零为真，<span class="number">0</span>或空为假</span><br><span class="line">复数：以J或j结尾，</span><br><span class="line"></span><br><span class="line">type(判断谁)</span><br><span class="line">查看类型</span><br></pre></td></tr></table></figure><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">字符串里面的东西是无意义的</span><br><span class="line">索引：从左到右，从<span class="number">0</span>开始，从右到左，从<span class="number">-1</span>开始</span><br><span class="line">切片：左闭右开</span><br><span class="line">    a[start:stop(不取):step]</span><br><span class="line">    step 步长  start起点 stop终点(不取)</span><br><span class="line">同符号情况下，如果步长是负数，那么应该从大到小</span><br><span class="line">start &gt; stop</span><br><span class="line">如果步长是个正的，那么从小大到</span><br><span class="line">start &gt; stop</span><br><span class="line">字符串是一个不可变数据类型</span><br><span class="line">一般对于不可变数据的函数处理，操作只会返回一个新的值，不会影响自己本身</span><br><span class="line">字符串支持 加法和乘法  分别是拼接和多次输出</span><br></pre></td></tr></table></figure><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">列表(list)</span><br><span class="line">语法:  a = [1,2,3,4,5]</span><br><span class="line">支持索引和切片</span><br><span class="line">一个列表里可以存储任意的数据类型</span><br><span class="line">可以创建一个空列表</span><br><span class="line">列表可变，可以通过索引访问修改</span><br><span class="line">通过切片重新赋值</span><br><span class="line">切片修改的时候，只要给的值和坑对应了就行</span><br><span class="line">列表的范围赋值：</span><br><span class="line">切片赋值：</span><br><span class="line">步长绝对值为1时，取一个数据集合的每一个值，放置到这个之前的位置</span><br><span class="line">步长绝对值大于1时，一个萝卜一个坑，要一一对应</span><br><span class="line">切片的步长包含起点</span><br></pre></td></tr></table></figure><h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元组(tuple) </span><br><span class="line">()</span><br><span class="line">不可变</span><br><span class="line">创建一个只含有一个数据的元组</span><br><span class="line">a = (&apos;a&apos;,)</span><br><span class="line">只含有单个数据的元组，要加逗号</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">字符串、列表、元组  都是有顺序的一个数据集，也就是有序的序列</span><br><span class="line">序列就是有顺序的数据集。字符串 列表 元组都是序列。</span><br><span class="line">可变数据：  列表 （可变而的是列表中的数据，而不是这个对象）</span><br><span class="line">不可变数据：  数、字符串、元组</span><br><span class="line">可变不可变性质:不可变的是类型其中的数据</span><br><span class="line">不可变数据对象，不可变的是指向关系，不是这个变量名</span><br><span class="line">不可变的变量，变量在变的时候，重新给了新的指向关系，原来的不可变指向关系被抛弃了！</span><br><span class="line">可变的变量，直接就能变指向关系</span><br><span class="line"></span><br><span class="line">iterable</span><br><span class="line">可迭代的对象</span><br><span class="line">含有数据是一个集合</span><br><span class="line">数据前后可以互相找到</span><br><span class="line">有序的序列就是可迭代的对象，如字符串，列表和元组。</span><br></pre></td></tr></table></figure><h5 id="序列"><a href="#序列" class="headerlink" title="序列"></a><strong>序列</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">序列包含：字符串，元组，列表</span><br><span class="line">序列支持索引和切片</span><br><span class="line">序列是可迭代的对象</span><br></pre></td></tr></table></figure><h5 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a><strong>变量的本质</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">变量本质：</span><br><span class="line">变量不需要先定义(不需要声明大小类型)，可以直接使用，直接赋值a = <span class="number">1</span></span><br><span class="line">变量可以重复赋值，哪怕更换类型</span><br><span class="line">同时可以给多个变量赋值</span><br><span class="line">命名风格，不要和模块名，常用函数 <span class="keyword">print</span>，不能用数字开头，字母，数字，下划线，在python3，中文也可以做变量名</span><br><span class="line">__num__ 特殊的python内置变量</span><br><span class="line">不支持自增和自减</span><br><span class="line">引用计数： 就是针对一些不可变数据</span><br><span class="line">    变量的内存分配方式</span><br><span class="line">变量在创建的时候，首先不会直接开辟空间，会先去查找，已有的空间</span><br><span class="line">如果有这个数据了，那么他不会创建新的，而是利用已有的</span><br><span class="line"><span class="keyword">del</span>语句可以删除一个变量名，但是不会释放变量数据占据的空间</span><br><span class="line"><span class="keyword">del</span>语句还把引用计数减<span class="number">1</span>了，数据的空间只有在引用计数真正为<span class="number">0</span>的时候才会释放</span><br><span class="line">python中的del语句释放数据内存? x</span><br><span class="line">查看变量的内存地址：id(变量名)</span><br><span class="line"><span class="keyword">import</span> sys sys.getrefcount()  查看变量的引用计数</span><br><span class="line">注意：</span><br><span class="line">python解释器有没有在用</span><br><span class="line">赋值语句是否是单独创建，还是借用别人</span><br></pre></td></tr></table></figure><h5 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a><strong>引用计数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">引用计数：</span><br><span class="line">常见变量会使用引用计数的方式分配内存，</span><br><span class="line">一个变量创建的时候，不会去直接创建一个新的地址，先去查找已有的(不可变数据：元组，字符串，整数)</span><br><span class="line"><span class="keyword">del</span> 引用计数减一</span><br><span class="line">当一个对象真正最后引用计数为<span class="number">0</span>的时候，才会被释放，延迟性</span><br><span class="line"><span class="keyword">del</span>切断了变量名和具体数据的内存地址的连接，该变量所使用的数据的引用计数减去<span class="number">1</span></span><br><span class="line">使用引用计数的原因：定义变量开辟空间，变量多，占用多，值相同的内存空间，相互共享，而不用创建</span><br></pre></td></tr></table></figure><h5 id="运算表达式"><a href="#运算表达式" class="headerlink" title="运算表达式"></a><strong>运算表达式</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">算数表达式:</span><br><span class="line">+ - * /   //  %  ** </span><br><span class="line">逻辑表达式 返回值类型是Bool</span><br><span class="line">a = <span class="number">1</span>非空非<span class="number">0</span>为真</span><br><span class="line">    b = <span class="number">0</span>  <span class="number">0</span>或空为假</span><br><span class="line">    <span class="keyword">not</span> a 逻辑非</span><br><span class="line">    a <span class="keyword">and</span> b  逻辑与</span><br><span class="line">    a <span class="keyword">or</span> b 逻辑或</span><br><span class="line">    a <span class="keyword">is</span> b  a和b是不是同一个对象</span><br><span class="line">    a <span class="keyword">is</span> <span class="keyword">not</span> b  a和b不是同一个对象</span><br><span class="line">    </span><br><span class="line"><span class="keyword">is</span>不光是判断值相同，还要判断是否是同一地址</span><br><span class="line">与：and -&gt; False 真真为真，真假为假，假假为假，只要有假则为假</span><br><span class="line">或：or -&gt; True真真为真，真假为真，假假为假，只要有真则为真</span><br><span class="line">关系表达式 如果不是数字来判断，那么判断的就是阿斯克码</span><br><span class="line">表达式          汉译              返回值类型</span><br><span class="line">    a==b         a,b是否值相等            bool</span><br><span class="line">    a!=b         a,b是否值不相等          bool</span><br><span class="line">    a&lt;&gt;b         a,b是否值不相等          bool</span><br><span class="line">    a&gt;b          a是否大于b               bool</span><br><span class="line">    a&lt;b          a是否小于b               bool</span><br><span class="line">    a&gt;=b          a是否大于等于b          bool</span><br><span class="line">    a&lt;=b          a是否小于等于b          bool</span><br><span class="line">    </span><br><span class="line">    小写字母a的十进制 ascii：<span class="number">97</span></span><br><span class="line">    大写字母A的十进制 ascii：<span class="number">65</span></span><br><span class="line">位运算：</span><br><span class="line">表达式           汉译               操作解释</span><br><span class="line">    ~a               按位取反             -(a+<span class="number">1</span>)</span><br><span class="line">    a&lt;&lt;n             左移n位              -</span><br><span class="line">    a&gt;&gt;n             右移n位              -</span><br><span class="line">    a&amp;b              a和b按位与           11-&gt;1  00-&gt;0  01-&gt;0(都是1时才得1)</span><br><span class="line">    a|b              a和b按位或           01-&gt;1  11-&gt;1  00-&gt;0(只要有1就得1)</span><br><span class="line">    a^b              a和b按位异或         01-&gt;1  11-&gt;0  00-&gt;0(相同得0，不同得1)</span><br><span class="line"></span><br><span class="line">    计算机中存储的都是二进制</span><br><span class="line">所有的运算，到最后，都是二进制的补码在运算，补码才是真正在计算机里存储的，</span><br><span class="line">符号位参与运算，计算完成的结果也是补码</span><br><span class="line">    原码，反码，补码</span><br><span class="line">    正数的原码，反码，补码都是本身</span><br><span class="line">    负数：</span><br><span class="line">        原码：<span class="number">1000</span> <span class="number">0001</span> 最高位是符号位</span><br><span class="line">        反码：<span class="number">1111</span> <span class="number">1110</span> 符号位不变，其余各位取反</span><br><span class="line">        补码：<span class="number">1111</span> <span class="number">1111</span> <span class="number">-1</span> 补码是反码加一</span><br><span class="line">所有的运算都是 补码在做运算</span><br><span class="line">       <span class="number">1</span>              <span class="number">-1</span></span><br><span class="line">    原码  <span class="number">0000</span> <span class="number">0001</span>     <span class="number">1000</span> <span class="number">0001</span> </span><br><span class="line">    反码  <span class="number">0000</span> <span class="number">0001</span>     <span class="number">1111</span> <span class="number">1110</span>  负数的反码 符号为不变，其余各位取反</span><br><span class="line">    补码  <span class="number">0000</span> <span class="number">0001</span>     <span class="number">1111</span> <span class="number">1111</span>  反码+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    对补码在求一次补码即可求出原码</span><br><span class="line">    </span><br><span class="line">    a &gt;&gt; n 向右移动  位移的位置包含起点，其实就位移了一位。类似切片中的步长，步长计算也包含起点</span><br><span class="line">    ------------------------</span><br><span class="line">    a &amp; b  a和b按位与 ，位上的值，只要有<span class="number">0</span>，结果为<span class="number">0</span></span><br><span class="line">    a | b   a和b按位或，位上的值，只要有<span class="number">1</span>，结果为<span class="number">1</span></span><br><span class="line">    a ^ b  a和b按位异或，只要值不同，结果才为<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    所有的运算，都是补码在运算！！！</span><br></pre></td></tr></table></figure><h5 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a><strong>条件分支语句</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> …. <span class="keyword">else</span>… 语句中 如果有一个条件满足，其他不会执行</span><br><span class="line"><span class="keyword">else</span>条件也可以没有,<span class="keyword">elif</span>条件也可以没有</span><br><span class="line"><span class="keyword">elif</span> 可以 继续细分条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>条件语句返回值为<span class="keyword">True</span>时，执行语句才会被执行</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 访问可迭代的对象</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> 可迭代的对象(str,list,tuple):</span><br><span class="line">一次次的从里面取一个值</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">条件满足时，直接跳出循环</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">条件满足时，只是跳过本次循环</span><br><span class="line">循环搭配<span class="keyword">else</span>语句来使用，这里<span class="keyword">else</span>语句中的内容会在循环正常结束之后来执行</span><br><span class="line"></span><br><span class="line"><span class="comment">#for var in seq:</span></span><br><span class="line">    <span class="comment">#遍历一个序列(前后数据间有顺序关系)，然后去其中一次次的拿取值</span></span><br><span class="line">    <span class="comment">#for循环一般不用来实现死循环</span></span><br><span class="line">    <span class="comment">#for次数一般由我们的数据长度来决定</span></span><br><span class="line">    <span class="comment">#for循环每次会向后遍历</span></span><br><span class="line">    <span class="comment">#for循环的死循环 需要构建环形或者无限延申的数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#from itertools import cycle</span></span><br><span class="line">    <span class="comment">#cycle([1,2,3]) -&gt; 圈</span></span><br></pre></td></tr></table></figure><h5 id="python3和python2区别"><a href="#python3和python2区别" class="headerlink" title="python3和python2区别"></a><strong>python3和python2区别</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python3:</span><br><span class="line">print() %s接收到的可以是任意的数据类型</span><br><span class="line">%d 用来输出整数</span><br><span class="line">%f 用来输出浮点数，%.100f 控制输出的精度</span><br><span class="line">input()所有接收到的都是字符串</span><br><span class="line">range() 抽象,不会生成数据，只有在使用的时候才会生成数据</span><br><span class="line">python2:</span><br><span class="line">    print()</span><br><span class="line">    input()  有效的数据，代码输入进来也是有效的，缓冲区溢出攻击</span><br><span class="line">    raw_input() 所有接收到的都是字符串</span><br><span class="line">    range() 具象的，会立即创建出实际的数据，很耗费内存</span><br><span class="line">xrange() 抽象的，不会生成数据，只有在使用的时候才会生成数据</span><br></pre></td></tr></table></figure><h5 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a><strong>深浅拷贝</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">拷贝： 可变数据对象的指针被共享了(引用计数)，所以需要我们引入拷贝</span><br><span class="line">创建变量的时候，我们希望的只是值相等，而不是互相影响</span><br><span class="line">a[:] 这是返回了一个新的列表，只是值和原先的a是一样的</span><br><span class="line">浅拷贝的方法：</span><br><span class="line">切片拷贝，只能是复制浅层的数据对象，返回一个新的地址中的数据，内层的数据并没有实现拷贝</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    b=a[:]</span><br><span class="line">    <span class="keyword">import</span> copy</span><br><span class="line">    b=copy.copy(a)</span><br><span class="line">深拷贝：</span><br><span class="line">深拷贝可以实现地址不同</span><br><span class="line">    深拷贝，拷贝的都是列表中的指向关系，对应列表中的数据还是使用引用计数的</span><br><span class="line">    <span class="keyword">import</span> copy</span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line">    b = copy.deepcopy(a)</span><br></pre></td></tr></table></figure><h5 id="作业：使用切片实现深拷贝"><a href="#作业：使用切片实现深拷贝" class="headerlink" title="作业：使用切片实现深拷贝"></a><strong>作业：使用切片实现深拷贝</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>]]]</span><br><span class="line">b=a[:]</span><br><span class="line">b[<span class="number">-1</span>]=a[<span class="number">-1</span>][:]  <span class="comment">#[1,2,3,[1,2,[1,2],3]]</span></span><br><span class="line">b[<span class="number">-1</span>][<span class="number">-1</span>]=a[<span class="number">-1</span>][<span class="number">-1</span>][:]   <span class="comment">#[1,2,[1,2],3]</span></span><br><span class="line">b[<span class="number">-1</span>][<span class="number">-1</span>][<span class="number">2</span>]=a[<span class="number">-1</span>][<span class="number">-1</span>][<span class="number">2</span>][:]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"a:"</span>,a)</span><br><span class="line">print(<span class="string">"b:"</span>,b)</span><br><span class="line">print(<span class="string">"------------"</span>)</span><br><span class="line">b[<span class="number">-1</span>][<span class="number">-1</span>][<span class="number">2</span>][<span class="number">-1</span>]=<span class="string">'abc'</span></span><br><span class="line">print(<span class="string">"a:"</span>,a)</span><br><span class="line">print(<span class="string">"b:"</span>,b)</span><br></pre></td></tr></table></figure><h5 id="作业：求出mylist中每一个值"><a href="#作业：求出mylist中每一个值" class="headerlink" title="作业：求出mylist中每一个值"></a><strong>作业：求出mylist中每一个值</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>)],<span class="string">'c'</span>,<span class="string">'def'</span>]</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> mylist:</span><br><span class="line">    <span class="keyword">if</span> type(var) == type([<span class="number">1</span>]):<span class="comment">#print('----',var)#当前满足列表</span></span><br><span class="line">        <span class="keyword">for</span> var1 <span class="keyword">in</span> var:</span><br><span class="line">            <span class="keyword">if</span> type(var1) == type((<span class="number">1</span>,)):<span class="comment">#var1此时是元组</span></span><br><span class="line">                <span class="keyword">for</span> var2 <span class="keyword">in</span> var1:</span><br><span class="line">                    print(var2)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(var1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(var)</span><br><span class="line">print(<span class="string">'---------------------'</span>)</span><br></pre></td></tr></table></figure><h5 id="作业：两数交换有几种办法"><a href="#作业：两数交换有几种办法" class="headerlink" title="作业：两数交换有几种办法"></a><strong>作业：两数交换有几种办法</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">两数交换有几种办法？分别列举</span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">最笨的方法：x=a a=b b=x</span><br><span class="line">方法一：a,b=b,a</span><br><span class="line">方法二：a=a+b  a=a-b b=a-b</span><br><span class="line">方法三：a=a*b  b=a/b a=a/b</span><br><span class="line">方法四：a=a|b  b=a^b a=a^b</span><br></pre></td></tr></table></figure><h5 id="作业：实现99乘法表"><a href="#作业：实现99乘法表" class="headerlink" title="作业：实现99乘法表"></a><strong>作业：实现99乘法表</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> i&gt;j:</span><br><span class="line">print(<span class="string">"%s x %s = %s   "</span>%(j,i,i*j),end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print()</span><br><span class="line">j+=<span class="number">1</span></span><br><span class="line">i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="作业：机器学习代码"><a href="#作业：机器学习代码" class="headerlink" title="作业：机器学习代码"></a><strong>作业：机器学习代码</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">"data.pkl"</span>):</span><br><span class="line">f=open(<span class="string">"data.pkl"</span>,<span class="string">"rb"</span>)</span><br><span class="line">mydict=pickle.load(f)</span><br><span class="line"><span class="comment"># print("数据已存在！")</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mydict=&#123;<span class="string">'hello'</span>:<span class="string">'hello'</span>&#125;</span><br><span class="line">f=open(<span class="string">"data.pkl"</span>,<span class="string">"wb"</span>)</span><br><span class="line">pickle.dump(mydict,f)</span><br><span class="line"><span class="comment"># print("新建数据库信息！")</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">ques=input(<span class="string">"请输入困扰你的问题： "</span>)</span><br><span class="line"><span class="keyword">if</span> ques != <span class="string">"quit"</span>:</span><br><span class="line"><span class="keyword">if</span> ques <span class="keyword">in</span> mydict:</span><br><span class="line">print(mydict[ques])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ans=input(<span class="string">"你教教俺吧。。。"</span>)</span><br><span class="line"><span class="keyword">if</span> ans:</span><br><span class="line">mydict[ques]=ans</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"data.pkl"</span>,<span class="string">"wb"</span>)</span><br><span class="line">pickle.dump(mydict,f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h5 id="作业：实现计算器"><a href="#作业：实现计算器" class="headerlink" title="作业：实现计算器"></a><strong>作业：实现计算器</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">cm = input(<span class="string">"请输入你要计算的表达式:"</span>)</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> cm:</span><br><span class="line">    <span class="keyword">if</span> var <span class="keyword">in</span> &#123;<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>&#125;:</span><br><span class="line">        l_num,r_num = float(cm[:index]),float(cm[index+<span class="number">1</span>:])</span><br><span class="line">        <span class="comment">#取出左边的数据,并且转换成浮点型</span></span><br><span class="line">        <span class="comment">#取出右边的数据,并且转换成浮点型</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index += <span class="number">1</span> <span class="comment">#index是操作符在输入表达式的里面</span></span><br><span class="line">cau = &#123;</span><br><span class="line">    <span class="string">'+'</span>: l_num + r_num,</span><br><span class="line">    <span class="string">'-'</span>: l_num - r_num,</span><br><span class="line">    <span class="string">"*"</span>: l_num * r_num,</span><br><span class="line">&#125; <span class="comment">#if条件远远不如字典判断快</span></span><br><span class="line"><span class="keyword">if</span> r_num != <span class="number">0</span>:</span><br><span class="line">    cau[<span class="string">'/'</span>] = l_num / r_num</span><br><span class="line">print(<span class="string">'result:'</span>,cau.get(cm[index]))</span><br><span class="line"><span class="comment">#get方法在key值不存在的时候，不会爆错</span></span><br><span class="line"><span class="comment">#cm[index]: 获取到了操作符</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">********************************************************************************</span><br><span class="line"></span><br><span class="line">expr = input(<span class="string">'请输入一个运算表达式:'</span>)</span><br><span class="line"><span class="comment">#'    2  |*| 0'</span></span><br><span class="line">index = <span class="number">0</span> <span class="comment">#用来查找表达式中 + - * /符号的位置</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> expr: <span class="comment">#定位表达式中操作符的位置</span></span><br><span class="line">    <span class="keyword">if</span> var <span class="keyword">in</span> &#123;<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>&#125;:</span><br><span class="line">        print(<span class="string">"[+] 操作符位置:%d"</span> % index)</span><br><span class="line">        print(<span class="string">"[+] 操作符:%s"</span> % var)</span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># 找到了操作符，那么就跳出循环即可</span></span><br><span class="line">        <span class="comment">#%d 可以整形转义输出</span></span><br><span class="line">        <span class="comment">#%s 转移输出字符串</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="comment">#找到左右两个数字</span></span><br><span class="line"><span class="comment">#通过切片访问到字符串中的所有两个数字</span></span><br><span class="line">l_num = float(expr[:index]) <span class="comment">#左边的操作数</span></span><br><span class="line">r_num = float(expr[index+<span class="number">1</span>:]) <span class="comment">#右边的操作数 不能是0</span></span><br><span class="line"><span class="comment">#除法 被除数不能为0</span></span><br><span class="line">oper = expr[index] <span class="comment">#找到了操作符</span></span><br><span class="line"></span><br><span class="line">res = &#123;</span><br><span class="line">    <span class="string">'+'</span>: l_num + r_num,</span><br><span class="line">    <span class="string">'-'</span>: l_num - r_num,</span><br><span class="line">    <span class="string">'*'</span>: l_num * r_num,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r_num != <span class="number">0</span>: <span class="comment">#当第二个操作不为0的时候 才支持除法</span></span><br><span class="line">    res[<span class="string">'/'</span>] = l_num / r_num</span><br><span class="line"></span><br><span class="line">print(<span class="string">'你的结果是: %s'</span> % res.get(oper))</span><br><span class="line"><span class="comment">#get获取字典中不存在key值不会报错，只会返回None</span></span><br><span class="line">    <span class="comment"># %d 只能支持数字(整数)</span></span><br><span class="line">    <span class="comment"># %s 随意一些，支持所有的类型</span></span><br></pre></td></tr></table></figure><h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">创建方法：</span><br><span class="line"><span class="number">1</span>、语法大括号包裹：创建字典 = &#123;key:value&#125;</span><br><span class="line"><span class="number">2</span>、工厂方法创建字典：res = dict(([<span class="number">1</span>, <span class="number">2</span>],[<span class="string">'a'</span>, <span class="string">'b'</span>]))</span><br><span class="line">    <span class="number">3</span>、内建方法：dict.fromkeys( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="string">'a'</span> )</span><br><span class="line">   批量创建key值，无法单独为每个key分配具体的value</span><br><span class="line">字典的key是绝对唯一的，不可变的数据才可以做key值</span><br><span class="line">字典的value可以重复，可以是任意的数据类型</span><br><span class="line">字典来自于hash表构成的，hash的检索特别块，hash之后，key值对应的hash值会指向一个具体value地址，也就是为啥我们通过key值访问value很快，就是因为hash表</span><br><span class="line">hash算法处理后的数据，不管之前有多么接近，之后绝对是唯一的，所以需要，key值是一个不能变的</span><br><span class="line">字典也算的上是个无序的数据类型，在python3<span class="number">.6</span> 字典有序了</span><br><span class="line"></span><br><span class="line">字典： &#123; key: value  &#125;</span><br><span class="line">key：</span><br><span class="line"><span class="number">1</span>：hash运算key创建出hash表</span><br><span class="line"><span class="number">2</span>：hash表的查询速度很快</span><br><span class="line"><span class="number">3</span>：字典，他是不可以做索引，切片</span><br><span class="line"><span class="number">4</span>：key值必须是一个不可变数据对象：数字，字符串，元组，</span><br><span class="line"><span class="number">5</span>：key值必须是一个唯一的</span><br><span class="line">value：</span><br><span class="line"><span class="number">1</span>：可以存储不同的数据类型</span><br><span class="line"><span class="number">2</span>：多个key同时对应一个value</span><br><span class="line">&#123;<span class="number">1</span>:<span class="string">'a'</span> , <span class="number">2</span>: <span class="string">'a'</span>&#125;</span><br><span class="line">访问字典：</span><br><span class="line">mydict[key]</span><br><span class="line">mydict.keys()获取字典中所有的key值</span><br><span class="line">mydict.values()获取字典中所有的value值</span><br><span class="line">更新字典：</span><br><span class="line">mydict[key]=value</span><br><span class="line">如果key存在的话，就更新value，如果key不存在的话就创建一个先的key:value的值</span><br><span class="line">删除字典：</span><br><span class="line"><span class="keyword">del</span> mydict[key]直接删除key值</span><br><span class="line">    mydict.pop()  在删除key值得过程中，还会把value值返回</span><br><span class="line">    mydict.clear() 清空字典</span><br><span class="line">    <span class="keyword">del</span> mydict  直接删除字典</span><br><span class="line">mydict.get(key)  此命令在key存在的时候返回对应的value，若key不存在，返回空，不报错</span><br></pre></td></tr></table></figure><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a><strong>集合</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">可变集合：myset=set()</span><br><span class="line">不可变集合：myset=frozenset()</span><br><span class="line"></span><br><span class="line">做爬虫的时候使用集合保存爬取的URL，可以处理重复的连接</span><br><span class="line">集合中的数据没有前后关系，而且是无序的，不能使用<span class="keyword">for</span>循环来遍历</span><br><span class="line">集合的特性：</span><br><span class="line"><span class="number">1</span>、集合是无序的，无法使用<span class="keyword">for</span>来遍历,不可以索引和切片</span><br><span class="line">    <span class="number">2</span>、集合的数据是去重的</span><br><span class="line">    <span class="number">3</span>、集合不能存储可变数据对象，因为可变数据对象无法进行hash运算</span><br><span class="line">    <span class="number">4</span>、集合中的所有数据元素都要经过hash运算，会维护hash表</span><br><span class="line">    <span class="number">5</span>、一个空集合只能通过set()的方式来创建</span><br><span class="line">    myset=&#123;&#125;这个创建的是一个字典</span><br><span class="line">    <span class="number">6</span>、没有value的字典就是集合</span><br><span class="line">    <span class="number">7</span>、普通集合是可变的，不可变集合是frozenset(序列)</span><br><span class="line">更新集合：</span><br><span class="line">set.add(不可变数据类型)</span><br><span class="line">    如果这个类型是不可变序列，这个序列会原样加进集合中</span><br><span class="line">    set.update(数据集str,list,tuple,dict,set)</span><br><span class="line">    数据集将拆分成单个的元素，去掉重复的，然后加入到集合中</span><br><span class="line">        数据集不允许含有可变数据对象</span><br><span class="line">        数据集：str,list,tuple,dict(key值作为集合中的数据)，set,frozenset</span><br><span class="line">可变集合---删除集合</span><br><span class="line">set.remove(集合中的数据元素) 删除后没有任何返回</span><br><span class="line">    set.pop() 不接收任何参数，随机删除，并返回被删除的元素</span><br><span class="line">    <span class="keyword">del</span> myset  直接删除这个变量</span><br><span class="line">可变集合和不可变集合都只能通过<span class="keyword">for</span>循环迭代访问</span><br><span class="line">可用<span class="keyword">in</span> 和 <span class="keyword">not</span> <span class="keyword">in</span> 判断元素是否在集合中</span><br><span class="line">可以用<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span>去获取一个数据集中是否有某个元素</span><br><span class="line">字符串，元组，列表，字典，集合</span><br><span class="line">    <span class="keyword">in</span>是去判断数据库里读取的数据集</span><br><span class="line">更新集合：</span><br><span class="line">myset.add(seq) 直接修改集合本身，会保留和维护数据的形态到集合中</span><br><span class="line">    myset.update(seq) 直接修改集合本身，会将数据拆分去重后加入到集合中</span><br><span class="line">    并且update不接收一个不可拆分的数据，比如整数</span><br><span class="line">        update也可以接收一个列表</span><br><span class="line">删除集合:</span><br><span class="line">    myset.pop()  随机删除并返回删除的值</span><br><span class="line">    myset.remove(obj) 在集合中删除obj,删除一个不存在的值会报错</span><br><span class="line">    myset.discard(obj) 在集合中删除obj,删除一个不存在的值不会报错</span><br><span class="line">    <span class="keyword">del</span>  myset  直接把集合删除了，集合的引用计数减去<span class="number">1</span></span><br><span class="line">集合的运算</span><br><span class="line">a的元素b都有</span><br><span class="line">        子集：a.issubset(b)  a是b的子集</span><br><span class="line">        超集：b.isuperset(b)  b是a的超集</span><br><span class="line">        交集(&amp;)：a和b中共同含有的数据，去重后返回的新的集合就a和b的交集</span><br><span class="line">        并集(|)：a和b两个集合所有元素放到一起，去掉重复返回的新的集合就是a和b的交集</span><br><span class="line">        差集(-)：a-b 从a中去掉a和b共有的，也就是b中有的a都不要了，返回一个新德集合</span><br><span class="line">        对称差分(^)：找出两个集合中各自单独有的数据，也就是a和b的交集减去并集的数据</span><br></pre></td></tr></table></figure><h5 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a><strong>系统内置函数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">enumerate(iter):接受一个可迭代的对象作为参数，返回一个enumerate对象，</span><br><span class="line">        也是一个迭代器，该对象生成由iter每个元素的index值和item值</span><br><span class="line">len(seq):返回seq长度</span><br><span class="line">max(iter,key=<span class="keyword">None</span>) <span class="keyword">or</span> max(arg0,arg1...key=<span class="keyword">None</span>):</span><br><span class="line">    返回iter或(arg0,arg1)中的最大值，如果指定了key，</span><br><span class="line">    这个key必须是可以传给sort()方法的，用于比较回调的函数</span><br><span class="line">min(iter,key=<span class="keyword">None</span>) <span class="keyword">or</span> min(arg0,arg1...key=<span class="keyword">None</span>):</span><br><span class="line">    返回iter或(arg0,arg1)中的最大值，如果指定了key，</span><br><span class="line">    这个key必须是可以传给sort()方法的，用于比较回调的函数</span><br><span class="line">    &gt;&gt;&gt; max(<span class="string">'a123'</span>,<span class="string">'b123'</span>,key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>])</span><br><span class="line">    &gt;&gt;&gt; <span class="string">'a123'</span></span><br><span class="line">max函数之后的<span class="keyword">lambda</span>表达式，在指定出元素之后，</span><br><span class="line">    会按照你选择的元素来排序，x[<span class="number">2</span>]就是x的第二个元素进行排序</span><br><span class="line">reversed(seq):接受一个序列作为参数，返回一个以逆序访问的迭代器</span><br><span class="line">sorted(iter,cmp=<span class="keyword">None</span>,key=<span class="keyword">None</span>):</span><br><span class="line">    接受一个可迭代的对象作为参数，返回一个有序的列表，可选参数是一个排序方式</span><br><span class="line">sum(seq,init=<span class="number">0</span>):返回seq和可选参数init的总和</span><br><span class="line">zip(it0,it1,...itN):返回一个列表，用法如下：</span><br><span class="line">    可以将对应的序列 对应的索引位置 拼接成一个二元组或者多元组</span><br><span class="line">如果序列长度不一，以短的为主。</span><br><span class="line">    zip函数返回的是一个抽象的数据，保证内存安全，实现了迭代器(可以延迟生产数据)</span><br><span class="line">    </span><br><span class="line">    &gt;&gt;&gt; a=zip(<span class="string">'123'</span>,<span class="string">'abcdef'</span>,<span class="string">'ABC'</span>)</span><br><span class="line">    &lt;zip object at <span class="number">0x000001E28964C848</span>&gt;</span><br><span class="line">    &gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        ...    print(i)</span><br><span class="line">        ...</span><br><span class="line">        (<span class="string">'1'</span>, <span class="string">'a'</span>,<span class="string">'A'</span>)</span><br><span class="line">        (<span class="string">'2'</span>, <span class="string">'b'</span>,<span class="string">'B'</span>)</span><br><span class="line">        (<span class="string">'3'</span>, <span class="string">'c'</span>,<span class="string">'C'</span>)</span><br><span class="line">map(func,seq):map函数第一个参数可以是一个函数对象，第二个是一个序列</span><br><span class="line">    map函数可以传入的函数依次作用在序列的每一个元素上。</span><br><span class="line">    实例：</span><br><span class="line">    &gt;&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">ys</span><span class="params">(x)</span>:</span></span><br><span class="line">        ...     <span class="keyword">return</span> x*x+<span class="number">1</span></span><br><span class="line">    &gt;&gt;&gt; mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    &gt;&gt;&gt; yes=map(ys,mylist)</span><br><span class="line">    &gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> yes:</span><br><span class="line">        ...     print(i)</span><br><span class="line">        <span class="number">2</span></span><br><span class="line">        <span class="number">5</span></span><br><span class="line">        <span class="number">10</span></span><br><span class="line">        <span class="number">17</span></span><br><span class="line">        <span class="number">26</span></span><br><span class="line">reduce函数(导入reduce函数 <span class="keyword">from</span> functools <span class="keyword">import</span> reduce)</span><br><span class="line">    用法：reduce把一个函数作用在一个序列[x1,x2,x3...]上，这个函数必须接收两个参数</span><br><span class="line">    reduce把结果继续和序列的下一个元素左累积计算，效果如下：</span><br><span class="line">    &gt;&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        ...     <span class="keyword">return</span> x+y</span><br><span class="line">    &gt;&gt;&gt; <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    &gt;&gt;&gt; mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    &gt;&gt;&gt; reduce(add,mylist)</span><br><span class="line">    <span class="number">15</span></span><br><span class="line">    &gt;&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">cf</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        ...     <span class="keyword">return</span> x*y+<span class="number">1</span></span><br><span class="line">    &gt;&gt;&gt; reduce(cf,mylist)</span><br><span class="line">    <span class="number">120</span></span><br><span class="line">eval(字符串对象)  -&gt; 一般不要用</span><br><span class="line">    会把无意义的字符串变成了合法的表达式</span><br><span class="line">    表达式 一个有效的可以得出结果的式子</span><br><span class="line">repr(表达式)  </span><br><span class="line">将一个表达式变成无意义的字符串</span><br></pre></td></tr></table></figure><h5 id="str内置函数"><a href="#str内置函数" class="headerlink" title="str内置函数"></a><strong>str内置函数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">字符串内建函数--大小写转换函数</span><br><span class="line">    string.lower():字母大写转换为小写</span><br><span class="line">    string.upper():字母小写转换为大写</span><br><span class="line">    string.swapcase():字母大写转换为小写,小写转大写</span><br><span class="line">    string.title():将语句中所有单词的首字母大写</span><br><span class="line">    string.capitalize():将语句中首字母大写，其他小写</span><br><span class="line">字符串内建函数--搜索函数</span><br><span class="line">    string.find(str,[start=<span class="number">0</span>,stop=len(string)])</span><br><span class="line">        计算string中出现str的第一个字母的索引，如果没有出现，则返回<span class="number">-1</span></span><br><span class="line">    string.index(str,[start=<span class="number">0</span>,stop=len(string)])</span><br><span class="line">        计算string中出现str的第一个字母的索引，如果没有出现，出现异常</span><br><span class="line">    string.count(str,[start=<span class="number">0</span>,stop=len(string)]):</span><br><span class="line">        计算str在string中出现的次数</span><br><span class="line">    string.endswith(str,[start=<span class="number">0</span>,stop=len(string)])</span><br><span class="line">        检查sring是否是以str结尾，如果是返回<span class="keyword">True</span>，反之返回<span class="keyword">False</span></span><br><span class="line">字符串内建函数--替换函数</span><br><span class="line">    string.replace(str1,str2,[num=string.count(str1)])</span><br><span class="line">        将str1替换为str2，num为替换次数，默认次数为str1出现的次数</span><br><span class="line">    string.strip(chr):在string的开头和结尾删除chr，当chr为空时，默认删除空白符(\r,\n,\t,<span class="string">" "</span>)</span><br><span class="line">    string.rstrip():删除string字符串末尾的空格，或者换行符号</span><br><span class="line">    string.lstrip():删除string字符串开头的空格，或者换行符号</span><br><span class="line">字符串内建函数--判断函数</span><br><span class="line">    string.isdigit():如果string只包含数字，则返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line">    string.islower():如果字符串中的字母都是小写则返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line">    string.isupper():如果字符串中的字母都是大写则返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line">    string.isspace():字符串中只包含空白字符，返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br></pre></td></tr></table></figure><h5 id="列表内置函数"><a href="#列表内置函数" class="headerlink" title="列表内置函数"></a><strong>列表内置函数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list.append(obj):在尾部追加obj</span><br><span class="line">list.count():返回一个对象在列表中出现的次数</span><br><span class="line">list.extend(seq):把序列seq中的内容添加到列表中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.extend(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">list.insert(index,obj):在索引index的位置插入obj，原位置数据向后移动</span><br><span class="line">list.pop(index):删除并返回index位置的数据对象，默认是最后一个对象</span><br><span class="line">list.reverse():反转列表</span><br></pre></td></tr></table></figure><h5 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a><strong>元组内置函数</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple.index(obj,beg=<span class="number">0</span>,end=len(string)):检查obj是否包含在tuple中</span><br><span class="line">tuple.count(obj):返回obj出现的次数</span><br></pre></td></tr></table></figure><h5 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a><strong>推导式</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">推导式：</span><br><span class="line">一种方便的结合<span class="keyword">for</span>循环进行数据处理的方式</span><br><span class="line">for循环 -&gt; 序列中一个个的取值</span><br><span class="line">列表推导式</span><br><span class="line">[ 表达式 <span class="keyword">for</span> var <span class="keyword">in</span> iterable <span class="keyword">if</span> 过滤条件 ]</span><br><span class="line"><span class="number">1</span>：<span class="keyword">for</span>循环从iterable取值</span><br><span class="line"><span class="number">2</span>：取到的值首先要经过<span class="keyword">if</span>条件判断</span><br><span class="line"><span class="number">3</span>：判断条件成立的数据，放到表达式运算，运算后的结果，作为新列表中的值</span><br><span class="line">集合推导式</span><br><span class="line">&#123; key <span class="keyword">for</span> var <span class="keyword">in</span> iterable <span class="keyword">if</span> 过滤条件 &#125;</span><br><span class="line"></span><br><span class="line">字典推导式</span><br><span class="line">&#123; key:value <span class="keyword">for</span> var <span class="keyword">in</span> iterable <span class="keyword">if</span> 过滤条件 &#125;</span><br><span class="line"></span><br><span class="line">元组推导式 == 迭代器</span><br><span class="line">( key for var in iterable if 过滤条件 )  -&gt; iter</span><br><span class="line">    </span><br><span class="line">列表表达式： [ 表达式 <span class="keyword">for</span> value <span class="keyword">in</span> 序列 <span class="keyword">if</span> 过滤条件 ]</span><br><span class="line">元组表达式： ( 表达式 <span class="keyword">for</span> value <span class="keyword">in</span> 序列 <span class="keyword">if</span> 过滤条件 )</span><br><span class="line">    所有从这个<span class="keyword">for</span>循环出来的每一个数据首先会经过<span class="keyword">if</span>条件过滤，然后执行前面的表达式，</span><br><span class="line">    最后重新返回成一个新的列表，过滤条件可有可无</span><br><span class="line">    &gt;&gt;&gt; mylist=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &gt;&gt;&gt; [var*var <span class="keyword">for</span> var <span class="keyword">in</span> mylist <span class="keyword">if</span> var!=<span class="number">3</span>]</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br><span class="line">    &gt;&gt;&gt; (var*var <span class="keyword">for</span> var <span class="keyword">in</span> mylist <span class="keyword">if</span> var!=<span class="number">3</span>)</span><br><span class="line">    &lt;generator object &lt;genexpr&gt; at <span class="number">0x00000238D160B3B8</span>&gt;</span><br><span class="line">    &gt;&gt;&gt; my_tuple=(var*var <span class="keyword">for</span> var <span class="keyword">in</span> mylist <span class="keyword">if</span> var!=<span class="number">3</span>)</span><br><span class="line">    &gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> my_tuple:</span><br><span class="line">    ...     print(i)</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">16</span></span><br><span class="line">    &gt;&gt;&gt; my_tuple=(var*var <span class="keyword">for</span> var <span class="keyword">in</span> mylist <span class="keyword">if</span> var!=<span class="number">3</span>)</span><br><span class="line">    &gt;&gt;&gt; my_tuple.__next__()</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    &gt;&gt;&gt; my_tuple.__next__()</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    &gt;&gt;&gt; my_tuple.__next__()</span><br><span class="line">    <span class="number">16</span></span><br><span class="line">    &gt;&gt;&gt; my_tuple.__next__()</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    StopIteration</span><br><span class="line"></span><br><span class="line">    通过列表推导式就可以把我们含有大小写的列表改成全部大写的列表</span><br><span class="line">    我们生成出所有经过表达式的一个结果序列，并且是列表类型的</span><br><span class="line">元组表达式就是生成器，只有在使用到的时候才生成，比较节约内存</span><br><span class="line"></span><br><span class="line">字典推导式：</span><br><span class="line">    和列表类似，只不过需要两个值存在来维护字典的键值对形式</span><br><span class="line">    &#123;key:value <span class="keyword">for</span> key <span class="keyword">in</span> 序列 <span class="keyword">if</span> 过滤条件&#125;</span><br><span class="line"></span><br><span class="line">    enumerate(obj):这个函数会返回两个值，一个是序列的下标，一个是下标对应的值</span><br><span class="line">    &gt;&gt;&gt; mylist=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">    &gt;&gt;&gt; mydict=&#123;key:value <span class="keyword">for</span> key,value <span class="keyword">in</span> enumerate(mylist)&#125;</span><br><span class="line">    &gt;&gt;&gt; mydict</span><br><span class="line">    &#123;<span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span>, <span class="number">3</span>: <span class="string">'d'</span>&#125;</span><br><span class="line">    </span><br><span class="line">mydict = &#123;<span class="string">'初心'</span>:&#123;<span class="string">'money'</span>:<span class="number">100000</span>,<span class="string">'sex'</span>:<span class="string">'male'</span>&#125;,<span class="string">'Infor'</span>:&#123;<span class="string">'Money'</span>:<span class="number">110000</span>,<span class="string">'sex'</span>:<span class="string">'male'</span>&#125;&#125;</span><br><span class="line"><span class="comment">#list(mydict[var].keys())[0]</span></span><br><span class="line">newdict = &#123;var:&#123;list(mydict[var].keys())[<span class="number">0</span>]:mydict[var][list(mydict[var].keys())[<span class="number">0</span>]]+<span class="number">1000</span>&#125; <span class="keyword">for</span> var <span class="keyword">in</span> mydict&#125;</span><br><span class="line">print(newdict)</span><br><span class="line"></span><br><span class="line">集合推到式：</span><br><span class="line">    集合推导式跟列表推导式非常相似，唯一的区别在于用&#123;&#125;代替[]</span><br><span class="line">    &#123;表达式 <span class="keyword">for</span> value <span class="keyword">in</span> 序列 <span class="keyword">if</span> 过滤条件&#125;</span><br><span class="line">    &gt;&gt;&gt; mylist</span><br><span class="line">    [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">    &gt;&gt;&gt; myset=&#123;var*<span class="number">2</span> <span class="keyword">for</span> var <span class="keyword">in</span> mylist&#125;</span><br><span class="line">    &gt;&gt;&gt; myset</span><br><span class="line">    &#123;<span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>, <span class="string">'dd'</span>&#125;</span><br><span class="line"></span><br><span class="line">推到式：表达式  <span class="keyword">for</span> var <span class="keyword">in</span> 序列 <span class="keyword">if</span> 过滤</span><br></pre></td></tr></table></figure><h5 id="作业：2万以下的-加工资"><a href="#作业：2万以下的-加工资" class="headerlink" title="作业：2万以下的 加工资"></a><strong>作业：2万以下的 加工资</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">salary_list = [<span class="number">13000</span>,<span class="number">12700</span>,<span class="number">15000</span>,<span class="number">14000</span>,<span class="number">25000</span>,<span class="number">16000</span>,<span class="number">18000</span>,<span class="number">22000</span>,<span class="number">32000</span>]</span><br><span class="line"><span class="comment">#2万以下的 加工资</span></span><br><span class="line"><span class="comment">#加1000</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> salary_list:</span><br><span class="line">    <span class="keyword">if</span> var &lt;= <span class="number">20000</span>:</span><br><span class="line">        var+=<span class="number">1000</span></span><br><span class="line">    new_list.append(var)</span><br><span class="line">print(new_list)</span><br><span class="line"></span><br><span class="line">res = [ var + <span class="number">1000</span> <span class="keyword">for</span> var <span class="keyword">in</span> salary_list <span class="keyword">if</span> var &lt;= <span class="number">20000</span> ]</span><br><span class="line">salary_list[:len(res)] = res</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#1: for循环取值</span></span><br><span class="line"><span class="comment">#2: 经过if条件判断</span></span><br><span class="line"><span class="comment">#3: 放到最前面，作为新列表的值</span></span><br><span class="line">    <span class="comment">#if...else  if如果不满足，那么执行else</span></span><br><span class="line">    <span class="comment">#for...else  可以循环正常结束的时候，for...else执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把新的列表替换原来的列表元素</span></span><br><span class="line"></span><br><span class="line">**********************************************************************</span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">13000</span>,<span class="number">15000</span>,<span class="number">15000</span>,<span class="number">17000</span>,<span class="number">20000</span>,<span class="number">14500</span>,<span class="number">23400</span>,<span class="number">27000</span>]</span><br><span class="line">        <span class="comment">#15000 + 2000 - &gt; 17000</span></span><br><span class="line">        <span class="comment">#这个17000和后面的17000重复了，所以会替换多次，一个15000到最后多添加了好几次呢</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(old,new)</span>:</span></span><br><span class="line">    <span class="comment">#不要因为数据相同而重复替换 要避免这个</span></span><br><span class="line">    <span class="comment">#直接修改mylist 这个变量本身</span></span><br><span class="line">    <span class="keyword">global</span> mylist <span class="comment">#使用全局变量mylist及index_list</span></span><br><span class="line">    <span class="keyword">global</span> index_list</span><br><span class="line">    <span class="keyword">for</span> _index,var <span class="keyword">in</span> enumerate(mylist):</span><br><span class="line">        <span class="keyword">if</span> var == old <span class="keyword">and</span> _index <span class="keyword">not</span> <span class="keyword">in</span> index_list: <span class="comment">#如果这个索引还没出现过，那么就替换</span></span><br><span class="line">            print(<span class="string">'当前替换的是:'</span>,mylist[_index])</span><br><span class="line">            mylist[_index] = new</span><br><span class="line">            index_list.append(_index) <span class="comment">#替换完成，记录一下</span></span><br><span class="line">    print(<span class="string">"--------------"</span>) <span class="comment">#函数之行一次之后打印一次横线</span></span><br><span class="line">        <span class="comment">#函数没有返回值，那么就返回None</span></span><br><span class="line"></span><br><span class="line">[replace(var,var+<span class="number">2000</span>) <span class="keyword">for</span> var <span class="keyword">in</span> mylist <span class="keyword">if</span> var &lt; <span class="number">20000</span>]</span><br><span class="line">    <span class="comment">#var : old</span></span><br><span class="line">    <span class="comment">#var + 2000 : new</span></span><br><span class="line">print(<span class="string">'new:'</span>,mylist)</span><br></pre></td></tr></table></figure><h5 id="作业：做一个自己的帮助文档"><a href="#作业：做一个自己的帮助文档" class="headerlink" title="作业：做一个自己的帮助文档"></a><strong>作业：做一个自己的帮助文档</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        这就是我的帮助文档</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#__doc__  可以调取帮助文档</span></span><br><span class="line">help(func)</span><br><span class="line">print(func.__doc__)</span><br><span class="line">res = dir(str)</span><br><span class="line">help_dict = &#123;&#125;</span><br><span class="line"><span class="comment">#帮助文档的列表</span></span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> res: <span class="comment">#提取每个函数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'__'</span> <span class="keyword">in</span> func: <span class="comment">#过滤下划线函数</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    help_dict[func] = func.__doc__ <span class="comment">#把帮助文档追加到列表</span></span><br><span class="line">        <span class="comment">#有则修改，没有则增加</span></span><br><span class="line">    <span class="comment">#key: func 函数名字符串</span></span><br><span class="line">    <span class="comment">#value: func.__doc__ 帮助文档</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> help_dict:</span><br><span class="line">    print(key) <span class="comment">#首先打印函数名</span></span><br><span class="line">    print(help_dict[key]) <span class="comment">#在打印帮助文档</span></span><br><span class="line">    print(<span class="string">'-------------------------'</span>)</span><br><span class="line"><span class="comment">#Web GUI</span></span><br><span class="line">***************************************************************************************</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">print(<span class="string">'退出请输入: q/Q\n'</span>)</span><br><span class="line">user_req = input(<span class="string">'请输入查询序列类型(str/list/tuple/dict/set):\n'</span>)</span><br><span class="line">print()</span><br><span class="line"><span class="keyword">if</span> user_req == <span class="string">'q'</span> <span class="keyword">or</span> user_req == <span class="string">'Q'</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = dir(eval(user_req))</span><br><span class="line">print(res)</span><br><span class="line">print()</span><br><span class="line">search_req = input(<span class="string">'请输入查询函数:\n'</span>)</span><br><span class="line">print()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">help(eval(user_req + <span class="string">'.'</span> + search_req))</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> first_reason:</span><br><span class="line">print(<span class="string">'请重新输入!!!The reason: '</span>,str(first_reason))</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> second_reason:</span><br><span class="line">print(<span class="string">"错啦,重新输入!!!The reason: "</span>,str(second_reason))</span><br></pre></td></tr></table></figure><h5 id="作业：每个爷们加1000工资"><a href="#作业：每个爷们加1000工资" class="headerlink" title="作业：每个爷们加1000工资"></a><strong>作业：每个爷们加1000工资</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mydict = &#123;</span><br><span class="line">    <span class="string">'KM'</span>:        &#123;<span class="string">'sex'</span>:<span class="string">'male'</span>,  <span class="string">'工作'</span>:<span class="string">'Star'</span>, <span class="string">'money'</span>:<span class="number">13000</span>,&#125;,</span><br><span class="line">    <span class="string">'Charles'</span>:   &#123;<span class="string">'money'</span>:<span class="number">13000</span>, <span class="string">'性别'</span>:<span class="string">'male'</span>,  <span class="string">'like'</span>:<span class="string">'DJ'</span>&#125;,</span><br><span class="line">    <span class="string">'Mark Smith'</span>:&#123;<span class="string">'salary'</span>:<span class="number">13000</span>, <span class="string">'sex'</span>:<span class="string">'male'</span>,  <span class="string">'job'</span>:<span class="string">'Rap'</span>&#125;,</span><br><span class="line">    <span class="string">'QQ'</span>:        &#123;<span class="string">'money'</span>:<span class="number">15000</span>, <span class="string">'性别'</span>:<span class="string">'female'</span>,<span class="string">'job'</span>:<span class="string">'Dancer'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#dict keys values dict[key] for key in dict</span></span><br><span class="line"><span class="comment">#推导式实现一下，每个爷们加个1000</span></span><br><span class="line"><span class="comment">#job要留下来,money要留下来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(var)</span>:</span></span><br><span class="line">    var = list(var)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'male'</span> <span class="keyword">in</span> var:<span class="comment">#先判断是否是个男的</span></span><br><span class="line">        <span class="keyword">for</span> _index,value <span class="keyword">in</span> enumerate(var): <span class="comment">#判断是不是个数字</span></span><br><span class="line">            <span class="keyword">if</span> type(value) == int:</span><br><span class="line">                var[_index] = value + <span class="number">1000</span> <span class="comment">#数个数字 加1000</span></span><br><span class="line">    <span class="keyword">return</span> tuple(var)</span><br><span class="line"></span><br><span class="line">new_dict = &#123; key:dict( zip( list( mydict[key].keys() ), func( mydict[key].values() ) ) ) <span class="keyword">for</span> key <span class="keyword">in</span> mydict &#125;</span><br><span class="line"><span class="comment">#只有工资对应的value值是一个整数 int</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> new_dict:</span><br><span class="line">    print(key,<span class="string">':'</span>,new_dict[key])</span><br><span class="line">print(<span class="string">"=================="</span>)</span><br></pre></td></tr></table></figure><h5 id="作业：四色五入"><a href="#作业：四色五入" class="headerlink" title="作业：四色五入"></a><strong>作业：四色五入</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123.9443712837819</span></span><br><span class="line">float_index = <span class="number">2</span> <span class="comment">#我就要2位小数</span></span><br><span class="line">int_part = str(a).split(<span class="string">'.'</span>)[<span class="number">0</span>] <span class="comment">#123 整数部分 str</span></span><br><span class="line">float_part = str(a).split(<span class="string">'.'</span>)[<span class="number">-1</span>] <span class="comment">#90182039 小数部分 str</span></span><br><span class="line">print(<span class="string">"原有数据:"</span>,a)</span><br><span class="line">print(<span class="string">'整数部分:'</span>,int_part)</span><br><span class="line">print(<span class="string">'小数部分:'</span>,float_part)</span><br><span class="line"><span class="comment">#字符串判断整数 直接对比值大小</span></span><br><span class="line"><span class="comment">#字符串判断的是字母 那就是对比ascii码 a 97 A 65</span></span><br><span class="line"><span class="keyword">if</span> len(float_part) &lt;= float_index: <span class="comment">#判断小数长度与精度位数的大小</span></span><br><span class="line">    print(<span class="string">"处理完成之后的小数:"</span>,a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> int(float_part[float_index]) &gt;= <span class="number">5</span>: <span class="comment">#获取小数部分最后一位</span></span><br><span class="line">        print(<span class="string">'小数部分最后一位:'</span>,float_part[float_index])</span><br><span class="line">        print(<span class="string">'扔掉最后一位的结果:'</span>,float_part[:float_index])</span><br><span class="line">        float_part = str( int(float_part[:float_index]) + <span class="number">1</span> )</span><br><span class="line">        print(<span class="string">'最后的小数部分:'</span>,float_part)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#如果说位数精度的数字小于5，不满足上位的条件，那么直接把后面的位省去</span></span><br><span class="line">        print(<span class="string">'小数部分最后一位:'</span>,float_part[float_index])</span><br><span class="line">        print(<span class="string">'扔掉最后一位的结果:'</span>,float_part[:float_index])</span><br><span class="line">        float_part = str( int(float_part[:float_index]) )</span><br><span class="line">        print(<span class="string">'最后的小数部分:'</span>,float_part)</span><br><span class="line">    res = float(<span class="string">'.'</span>.join( [int_part,float_part] ))</span><br><span class="line">    <span class="comment">#res = float(int_part + '.' + float_part)</span></span><br><span class="line">    print(<span class="string">'整数和小数拼接:'</span>,res)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(var,f_index)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        func(var,f_index) -&gt; float</span></span><br><span class="line"><span class="string">        这个函数用来做四舍五入的精度处理</span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">            var是你传入的小数</span></span><br><span class="line"><span class="string">            f_index是你需要的精度</span></span><br><span class="line"><span class="string">        返回值：</span></span><br><span class="line"><span class="string">            处理后的小数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    int_part = str(var).split(<span class="string">'.'</span>)[<span class="number">0</span>] <span class="comment">#123 整数部分 str</span></span><br><span class="line">    float_part = str(var).split(<span class="string">'.'</span>)[<span class="number">-1</span>] <span class="comment">#90182039 小数部分 st</span></span><br><span class="line">    <span class="keyword">if</span> len(float_part) &lt;= f_index: <span class="comment">#判断小数长度与精度位数的大小</span></span><br><span class="line">        float_part = float_part.ljust(f_index,<span class="string">'0'</span>) <span class="comment">#需要补位的长度</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#如果需要来维护精度，本身的浮点数长度大于了精度要求</span></span><br><span class="line">        <span class="keyword">if</span> int(float_part[f_index]) &gt;= <span class="number">5</span>: <span class="comment">#获取小数部分最后一位</span></span><br><span class="line">            float_part = str( int(float_part[:f_index]) + <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment">#如果说位数精度的数字小于5，不满足上位的条件，那么直接把后面的位省去</span></span><br><span class="line">            float_part = str( int(float_part[:f_index]) )</span><br><span class="line">    res = float(<span class="string">'.'</span>.join( [int_part,float_part] ))</span><br><span class="line">    <span class="comment">#res = float(int_part + '.' + float_part)</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">res = func(<span class="number">1.2</span>,<span class="number">5</span>) <span class="comment">#-&gt;1.124</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h5 id="作业：人生"><a href="#作业：人生" class="headerlink" title="作业：人生"></a><strong>作业：人生</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># seq 序列: str list tuple set dict</span></span><br><span class="line"><span class="comment"># iterable 可迭代的对象: str list tuple set dict 文件 数据库句柄 数据库返回结果集 生成器迭代器</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#baby -&gt; 小孩</span></span><br><span class="line"><span class="comment">#babe、sweet、my cup of tea -&gt; 宝贝</span></span><br><span class="line">    <span class="comment">#you are my cup of tea</span></span><br><span class="line"><span class="comment">#random choice -&gt; a random element from a non-empty sequence.</span></span><br><span class="line"><span class="comment">#choice(seq) method of random.Random instance</span></span><br><span class="line">    <span class="comment">#Choose a random element from a non-empty sequence.</span></span><br><span class="line">    <span class="comment">#从一个不为空的序列中去取一个值</span></span><br><span class="line">te = &#123;  <span class="comment">#个人信息</span></span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'human'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">'job'</span>:<span class="string">'tea'</span>,</span><br><span class="line">    <span class="string">'like'</span>:<span class="string">'study'</span>,</span><br><span class="line">    <span class="string">'babe'</span>:&#123;&#125;,</span><br><span class="line">        <span class="comment">#保存你的娃</span></span><br><span class="line">        <span class="comment">#娃的名字，娃的性别</span></span><br><span class="line">&#125;</span><br><span class="line">sex_list = [<span class="string">'male'</span>,<span class="string">'female'</span>] <span class="comment">#人的性别</span></span><br><span class="line">mind_list = [<span class="string">'不好'</span>,<span class="string">'还行'</span>,<span class="string">'非常好'</span>,<span class="string">' '</span>] <span class="comment">#情绪的列表，为了可以随机抽样选择</span></span><br><span class="line">things_list = [<span class="string">'normal'</span>,<span class="string">'dangours'</span>,<span class="string">'love'</span>,<span class="string">'gay'</span>,<span class="string">'moeny'</span>,<span class="string">'babe'</span>]</span><br><span class="line">active_dict = &#123; <span class="comment">#当你情绪不一样的时候，所要做的事情</span></span><br><span class="line">    <span class="string">'不好'</span>: <span class="string">'play computer'</span>, <span class="comment">#可以这样创建，但是后面的表达式 会实际的运行的</span></span><br><span class="line">    <span class="string">'还行'</span>: <span class="string">'eat'</span>,</span><br><span class="line">    <span class="string">'非常好'</span> : <span class="string">'不上课了 我要到外面的世界'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#字典不具体的来保存行为，他只是来保存我们要做的事情</span></span><br><span class="line">    <span class="comment">#这个事情一定不要在定义字典的时候来实现</span></span><br><span class="line"><span class="comment">#赋值语句是没有返回值的，直接修改的是对象本身</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> range(<span class="number">365</span> * <span class="number">80</span>):</span><br><span class="line">    mind = random.choice(mind_list) <span class="comment">#随机抽取今天的情绪</span></span><br><span class="line">    things = random.choice(things_list) <span class="comment">#随机抽取时间</span></span><br><span class="line">    active = active_dict.get(mind) <span class="comment">#执行今天这个心情我要做的事情</span></span><br><span class="line">    <span class="keyword">if</span> things == <span class="string">'babe'</span>:</span><br><span class="line">        print(<span class="string">'今天是第%d天,今天生了!'</span> % var)</span><br><span class="line">        print(<span class="string">'         *         '</span>)</span><br><span class="line">        print(<span class="string">'        ***        '</span>)</span><br><span class="line">        print(<span class="string">'       ******     '</span>)</span><br><span class="line">        print(<span class="string">'         **       '</span>)</span><br><span class="line">        print(<span class="string">'         **       '</span>)</span><br><span class="line">        babe_name = <span class="string">'babe'</span> + str(var) <span class="comment">#宝宝名字命名</span></span><br><span class="line">        babe_sex = random.choice(sex_list)</span><br><span class="line">        te[<span class="string">'babe'</span>][babe_name] = babe_sex</span><br><span class="line">    <span class="keyword">elif</span> things == <span class="string">'dangours'</span>:</span><br><span class="line">        print(<span class="string">'这是第%d天,今天GG了'</span> % var)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#其他时候都是平平淡淡</span></span><br><span class="line">        <span class="keyword">if</span> active:</span><br><span class="line">            te[<span class="string">'like'</span>] = active</span><br><span class="line">        print(<span class="string">'今天是第%d天,今天我遇到了%s: 今天的心情%s, 我要做的事情%s'</span> % (var, things, mind, te[<span class="string">'like'</span>] ))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'完美结束'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------人生总结----------'</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> te:</span><br><span class="line">    print(<span class="string">'%s:%s'</span> % (key,te[key]))</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">'babe'</span>:</span><br><span class="line">        print(<span class="string">"你还有孩子，在下面-------"</span>)</span><br><span class="line">        <span class="keyword">for</span> babe_name <span class="keyword">in</span> te[key]: <span class="comment">#拿到我的孩子列表</span></span><br><span class="line">            print(<span class="string">'%s:%s'</span> % (babe_name,te[key][babe_name]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#'rich':富有</span></span><br><span class="line"><span class="comment">#'handsome':帅气</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;数据类型：数字，字符串，列表，元组，集合，字典&lt;/strong&gt;&lt;/p&gt;&lt;h5 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; clas
      
    
    </summary>
    
      <category term="python(一)" scheme="http://www.python100.com/categories/python-%E4%B8%80/"/>
    
    
      <category term="python基础数据类型" scheme="http://www.python100.com/tags/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>常用函数</title>
    <link href="http://www.python100.com/2018/07/26/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <id>http://www.python100.com/2018/07/26/常见函数用法/</id>
    <published>2018-07-26T01:44:00.000Z</published>
    <updated>2018-07-26T01:48:28.325Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">map(func, seq1[, seq2,…]) </span><br><span class="line">第一个参数接受一个函数名，后面的参数接受一个或多个可迭代的序列，返回的是一个集合。</span><br><span class="line">Python函数编程中的map()函数是将func作用于seq中的每一个元素，并将所有的调用的结果作为一个list返回。如果func为<span class="keyword">None</span>，作用同zip()。</span><br><span class="line"><span class="comment">#使用lambda</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, range(<span class="number">7</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">一个seq时，可以使用filter()函数代替</span><br><span class="line">当seq多于一个时，map可以并行（注意是并行）地对每个seq执行</span><br><span class="line">每个seq的同一位置的元素同时传入一个多元的func函数之后，得到一个返回值，并将这个返回值存放在一个列表中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> map(<span class="keyword">lambda</span> x , y : x ** y, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">[<span class="number">8</span>, <span class="number">16</span>, <span class="number">6</span>]     <span class="comment">#执行过程[2**3,4**2,6**1]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> map(<span class="keyword">lambda</span> x , y : (x ** y, x + y), [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">[(<span class="number">8</span>, <span class="number">5</span>), (<span class="number">16</span>, <span class="number">6</span>), (<span class="number">6</span>, <span class="number">7</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> map(<span class="keyword">None</span>, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])  <span class="comment">#func为NONE时，就同zip一样了</span></span><br><span class="line">[(<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">2</span>), (<span class="number">6</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">其他用法例子：</span><br><span class="line">***将元组转换成list***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">***将字符串转换成list***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, <span class="string">'1234'</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">***提取字典的key，并将结果存放在一个list中***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(int, &#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="number">3</span>:<span class="number">4</span>&#125;)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">***字符串转换成元组，并将结果以列表的形式返回***</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(tuple, <span class="string">'agdf'</span>)</span><br><span class="line">[(<span class="string">'a'</span>,), (<span class="string">'g'</span>,), (<span class="string">'d'</span>,), (<span class="string">'f'</span>,)]</span><br><span class="line"><span class="comment">#将小写转成大写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_to_l</span> <span class="params">(s)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> s.upper()</span><br><span class="line"><span class="keyword">print</span> map(u_to_l,<span class="string">'asdfd'</span>)</span><br></pre></td></tr></table></figure><h3 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">zip函数返回一个以元组为元素的列表，其中第 i 个元组包含每个参数序列的第 i 个元素。返回的列表长度被截断为最短的参数序列的长度。只有一个序列参数时，它返回一个<span class="number">1</span>元组的列表。没有参数时，它返回一个空的列表。</span><br><span class="line">概括起来一句话：zip函数返回的是一个列表，但是列表里面的元素是由一个个元组构成的..</span><br><span class="line">做机器学习分类的时候，就可以利用zip函数，将我们的数据点与我们的数据点对应的标签进行关联..</span><br><span class="line"><span class="comment">#例一：</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">xyz = zip(x, y, z)</span><br><span class="line"><span class="keyword">print</span> xyz</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="comment">#例二：</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = zip(x)</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,)]</span><br><span class="line"><span class="comment">#例三：</span></span><br><span class="line">x = zip()</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">[]</span><br><span class="line"><span class="comment">#例四：</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">z = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">xyz = zip(x, y, z)</span><br><span class="line">u = zip(*xyz)</span><br><span class="line"><span class="keyword">print</span> u</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">一般认为这是一个unzip的过程，它的运行机制是这样的：</span><br><span class="line">在运行zip(*xyz)之前，xyz的值是：[(<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)]</span><br><span class="line">那么，zip(*xyz) 等价于 zip((<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>))</span><br><span class="line">所以，运行结果是：[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="comment">#例五：</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">r = zip(* [x] * <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)]</span><br><span class="line">它的运行机制是这样的：</span><br><span class="line">[x]生成一个列表的列表，它只有一个元素x</span><br><span class="line">[x] * <span class="number">3</span>生成一个列表的列表，它有<span class="number">3</span>个元素，[x, x, x]</span><br><span class="line">zip(* [x] * <span class="number">3</span>)的意思就明确了，zip(x, x, x)</span><br></pre></td></tr></table></figure><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">result1=random.random() <span class="comment">#随机生成一个浮点数[0,1)</span></span><br><span class="line">result2=random.randint(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">#产生1-10的一个随机整数,包含1和10</span></span><br><span class="line">result3=random.uniform(<span class="number">1.1</span>, <span class="number">2.1</span>) <span class="comment">#产生1.1-2.2之间的随机浮点数</span></span><br><span class="line">result4=random.choice(<span class="string">"python"</span>)  <span class="comment">#参数是一个可以迭代的类型，从参数中随机选一个元素</span></span><br><span class="line">result5=random.randrange(<span class="number">1</span>,<span class="number">50</span>,<span class="number">2</span>) <span class="comment">#随机产生1-50，间隔为2随机整数，左闭右开，不包含50</span></span><br><span class="line">test_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">random.shuffle(test_list) <span class="comment">#需要注意的是这个操作是在原来参数的基础上操作的，不会返回新的数据</span></span><br><span class="line">print(<span class="string">"test_list:"</span>+str(test_list))</span><br><span class="line">test_list:[<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>]   <span class="comment">#shuffle就是将原有列表的顺序打乱，也就是重新洗牌的功能</span></span><br><span class="line">random.sample(seq,n)  <span class="comment">#可以从指定的序列中，随机的截取指定长度的片断，不作原地修改。</span></span><br></pre></td></tr></table></figure><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前使用平台：</span></span><br><span class="line">os.name  <span class="comment">#返回当前使用平台的代表字符，Windows用'nt'表示，Linux用'posix'表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前路径和文件</span></span><br><span class="line">os.getcwd()  <span class="comment">#返回当前工作目录</span></span><br><span class="line">os.listdir(path)  <span class="comment">#返回path目录下所有文件列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#abspath()  将相对路径转化为绝对路径</span></span><br><span class="line">path = <span class="string">'./boys'</span><span class="comment">#相对</span></span><br><span class="line">result = os.path.abspath(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统操作：</span></span><br><span class="line">os.system()  <span class="comment">#运行shell命令</span></span><br><span class="line">&gt;&gt;&gt;os.system(<span class="string">'cmd'</span>)  <span class="comment">#Windows下打开终端</span></span><br><span class="line">&gt;&gt;&gt;os.system(<span class="string">'ls'</span>)  <span class="comment">#Linux下查看当前目录所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件名或目录：</span></span><br><span class="line">os.path.split(path)  <span class="comment">#将path的目录和文件名分开为元组，split() 将一个完整的路径切割成目录部分和主体部分</span></span><br><span class="line">os.path.join(path1,path2,...)  <span class="comment">#将path1，怕path2，...进行组合，若path2为绝对路径，则会将path1删除</span></span><br><span class="line">os.path.dirname(path)  <span class="comment">#返回path中的目录（文件夹部分），结果不包含'\'</span></span><br><span class="line">os.path.basename(path)  <span class="comment">#返回path中的文件名</span></span><br><span class="line"><span class="comment">#dirname()  获取完整路径当中的目录部分  &amp;  basename()获取完整路径当中的主体部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建目录：</span></span><br><span class="line">os.mkdir(path)  <span class="comment">#创建path目录（只能创建一级目录，如'F:\XXX\WWW'）,在XXX目录下创建WWW目录</span></span><br><span class="line">os.makedirs(path)  <span class="comment">#创建多级目录（如'F:\XXX\SSS'），在F盘下创建XXX目录，继续在XXX目录下创建SSS目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除文件或目录：</span></span><br><span class="line">os.remove(path)  <span class="comment">#删除文件（必须是文件）</span></span><br><span class="line">os.rmdir(path)  <span class="comment">#删除path目录(只能删除一级目录，如'F:\XXX\SSS'),只删除SSS目录，只能删除空目录</span></span><br><span class="line">os.removedirs(path)  <span class="comment">#删除多级目录（如'F:\XXX\SSS'）,必须为空目录，删除SSS、FFF目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更改路径：</span></span><br><span class="line">os.chdir(path)  <span class="comment">#将当前工作目录更改为指定路径path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件时间：</span></span><br><span class="line">os.path.getmtime(path)  <span class="comment">#返回文件或目录的最后修改时间，结果为秒数</span></span><br><span class="line">os.path.getatime(path)  <span class="comment">#返回文件或目录的最后访问时间，结果为秒数</span></span><br><span class="line">os.path.getctime(path)  <span class="comment">#返回文件或目录得创建时间，结果为秒数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件大小：</span></span><br><span class="line">os.path.getsize(path)  <span class="comment">#返回文件的大小，若是目录则返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件：</span></span><br><span class="line">os.path.exists(path)  <span class="comment">#判断path是否存在，存在返回True,不存在返回False</span></span><br><span class="line">os.path.isfile(path)  <span class="comment">#判断path是否为文件，是返回True,不是返回False</span></span><br><span class="line">os.path.isdir(path)  <span class="comment">#判断path是否目录，是返回True，不是返回False</span></span><br><span class="line">os.path.islink(path) <span class="comment">#islink() 检测是否是链接</span></span><br><span class="line">os.path.isabs(path) <span class="comment">#isabs() 检测一个路径是否是绝对路径</span></span><br><span class="line">os.path.samefile(path1,path2) <span class="comment">#samefile() 检测2个路径是否是同一个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文件和目录：</span></span><br><span class="line">os.walk(path)   <span class="comment">#递归返回path下的目录（包括path目录）、子目录、文件名的三元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获得shell命令返回值：</span></span><br><span class="line">fp=os.popen(cmd)   <span class="comment">#打开命令cmd或从命令cmd打开管道，返回值是连接到管道的文件对象</span></span><br><span class="line">rlt=fp.read()或 rlt=fp.readlines()  <span class="comment">#读取结果</span></span><br><span class="line">os.system(<span class="string">'dir'</span>)  <span class="comment">#获取系统命令的返回结果，但无法保存到一个变量里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rename() 文件或文件夹重命名</span></span><br><span class="line">os.rename(<span class="string">'/home/sy/a'</span>,<span class="string">'/home/sy/alibaba'</span>）</span><br><span class="line">os.rename(<span class="string">'02.txt'</span>,<span class="string">'002.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#stat() 获取文件或者文件夹的信息</span></span><br><span class="line">result = os.stat(<span class="string">'/home/sy/PycharmProject/Python3/10.27/01.py)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">#getenv() 获取系统的环境变量</span></span><br><span class="line"><span class="string">result = os.getenv('</span>PATH<span class="string">')</span></span><br><span class="line"><span class="string">print(result.split('</span>:<span class="string">'))</span></span><br><span class="line"><span class="string">                 </span></span><br><span class="line"><span class="string">#putenv() 将一个目录添加到环境变量中(临时增加仅对当前脚本有效)</span></span><br><span class="line"><span class="string">os.putenv('</span>PATH<span class="string">','</span>/home/sy/下载<span class="string">')</span></span><br><span class="line"><span class="string">os.system('</span>syls<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#常用变量</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.curdir #curdir  表示当前文件夹   .表示当前文件夹  一般情况下可以省略</span></span><br><span class="line"><span class="string">'</span>.<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.pardir #pardir  表示上一层文件夹   ..表示上一层文件夹  不可省略!</span></span><br><span class="line"><span class="string">'</span>..<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.name #name 获取代表操作系统的名称字符串</span></span><br><span class="line"><span class="string">'</span>nt<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.sep #sep 获取系统路径间隔符号  window -&gt;\    linux -&gt;/</span></span><br><span class="line"><span class="string">'</span>\\<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.extsep #extsep 获取文件名称和后缀之间的间隔符号  window &amp; linux -&gt; .</span></span><br><span class="line"><span class="string">'</span>.<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; repr(os.linesep) #linesep  获取操作系统的换行符号  window -&gt; \r\n  linux/unix -&gt; \n</span></span><br><span class="line"><span class="string">"'</span>\\r\\n<span class="string">'"</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; path = '</span>/home/sy/<span class="number">000.</span>py<span class="string">'   </span></span><br><span class="line"><span class="string">#splitext() 将一个路径切割成文件后缀和其他两个部分,主要用于获取文件的后缀</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; result = os.path.splitext(path)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">('</span>/home/sy/<span class="number">000</span><span class="string">', '</span>.py<span class="string">')</span></span><br></pre></td></tr></table></figure><h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sys.argv: </span></span><br><span class="line">实现从程序外部向程序传递参数。</span><br><span class="line">可以用sys.argv获取当前正在执行的命令行参数的参数列表(list)</span><br><span class="line">sys.argv[<span class="number">0</span>] 当前程序名</span><br><span class="line">sys.argv[<span class="number">1</span>] 第一个参数</span><br><span class="line">sys.argv[<span class="number">0</span>] 第二个参数</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.exit([arg]): </span></span><br><span class="line">程序中间的退出，arg=<span class="number">0</span>为正常退出。</span><br><span class="line">调用sys.exit(n)可以中途退出程序，当参数非<span class="number">0</span>时，会引发一个SystemExit异常，从而可以在主程序中捕获该异常。</span><br><span class="line">sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.setdefaultencoding():</span></span><br><span class="line">设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行 setdefaultencoding(<span class="string">'utf8'</span>)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.getfilesystemencoding(): </span></span><br><span class="line">获取文件系统使用编码方式，Windows下返回<span class="string">'mbcs'</span>，mac下返回<span class="string">'utf-8'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.path: </span></span><br><span class="line">获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中<span class="keyword">import</span>时正确找到。</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.platform: </span></span><br><span class="line">获取当前系统平台。如win32表示是Windows <span class="number">32</span>bit操作系统，linux2表示是linux平台；</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.stdin,sys.stdout,sys.stderr: </span></span><br><span class="line">stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而<span class="keyword">print</span> 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdin.readline()  <span class="comment">#从标准输入读一行</span></span><br><span class="line">sfdsafkjl</span><br><span class="line"><span class="string">'sfdsafkjl\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.write(<span class="string">"AAA"</span>)  </span><br><span class="line">AAA3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.write(<span class="string">"BBBBBb"</span>)</span><br><span class="line">BBBBBb6</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.modules</span></span><br><span class="line">功能：sys.modules是一个全局字典，该字典是python启动后就加载在内存中。每当程序员导入新的模块，sys.modules将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。它拥有字典所拥有的一切方法。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.keys()   <span class="comment">#返回所有已经导入模块列表</span></span><br><span class="line">dict_keys([<span class="string">'builtins'</span>, <span class="string">'sys'</span>, <span class="string">'_frozen_importlib'</span>, <span class="string">'_imp'</span>, <span class="string">'_warnings'</span>, <span class="string">'_thread'</span>, <span class="string">'_weakref'</span>, <span class="string">'_frozen_importlib_external'</span>, <span class="string">'_io'</span>, <span class="string">'marshal'</span>, <span class="string">'nt'</span>, <span class="string">'winreg'</span>, <span class="string">'zipimport'</span>, <span class="string">'encodings'</span>, <span class="string">'codecs'</span>, <span class="string">'_codecs'</span>, <span class="string">'encodings.aliases'</span>, <span class="string">'encodings.utf_8'</span>, <span class="string">'_signal'</span>, <span class="string">'__main__'</span>, <span class="string">'encodings.latin_1'</span>, <span class="string">'io'</span>, <span class="string">'abc'</span>, <span class="string">'_weakrefset'</span>, <span class="string">'site'</span>, <span class="string">'os'</span>, <span class="string">'errno'</span>, <span class="string">'stat'</span>, <span class="string">'_stat'</span>, <span class="string">'ntpath'</span>, <span class="string">'genericpath'</span>, <span class="string">'os.path'</span>, <span class="string">'_collections_abc'</span>, <span class="string">'_sitebuiltins'</span>, <span class="string">'sysconfig'</span>, <span class="string">'_bootlocale'</span>, <span class="string">'_locale'</span>, <span class="string">'encodings.gbk'</span>, <span class="string">'_codecs_cn'</span>, <span class="string">'_multibytecodec'</span>, <span class="string">'atexit'</span>, <span class="string">'pydoc'</span>, <span class="string">'importlib'</span>, <span class="string">'importlib._bootstrap'</span>, <span class="string">'importlib._bootstrap_external'</span>, <span class="string">'types'</span>, <span class="string">'functools'</span>, <span class="string">'_functools'</span>, <span class="string">'collections'</span>, <span class="string">'operator'</span>, <span class="string">'_operator'</span>, <span class="string">'keyword'</span>, <span class="string">'heapq'</span>, <span class="string">'_heapq'</span>, <span class="string">'itertools'</span>, <span class="string">'reprlib'</span>, <span class="string">'_collections'</span>, <span class="string">'weakref'</span>, <span class="string">'collections.abc'</span>, <span class="string">'warnings'</span>, <span class="string">'importlib.machinery'</span>, <span class="string">'importlib.util'</span>, <span class="string">'importlib.abc'</span>, <span class="string">'contextlib'</span>, <span class="string">'inspect'</span>, <span class="string">'ast'</span>, <span class="string">'_ast'</span>, <span class="string">'dis'</span>, <span class="string">'opcode'</span>, <span class="string">'_opcode'</span>, <span class="string">'enum'</span>, <span class="string">'linecache'</span>, <span class="string">'tokenize'</span>, <span class="string">'re'</span>, <span class="string">'sre_compile'</span>, <span class="string">'_sre'</span>, <span class="string">'sre_parse'</span>, <span class="string">'sre_constants'</span>, <span class="string">'copyreg'</span>, <span class="string">'token'</span>, <span class="string">'pkgutil'</span>, <span class="string">'platform'</span>, <span class="string">'subprocess'</span>, <span class="string">'time'</span>, <span class="string">'signal'</span>, <span class="string">'threading'</span>, <span class="string">'traceback'</span>, <span class="string">'msvcrt'</span>, <span class="string">'_winapi'</span>, <span class="string">'urllib'</span>, <span class="string">'urllib.parse'</span>, <span class="string">'tempfile'</span>, <span class="string">'shutil'</span>, <span class="string">'fnmatch'</span>, <span class="string">'posixpath'</span>, <span class="string">'zlib'</span>, <span class="string">'bz2'</span>, <span class="string">'_compression'</span>, <span class="string">'_bz2'</span>, <span class="string">'lzma'</span>, <span class="string">'_lzma'</span>, <span class="string">'random'</span>, <span class="string">'math'</span>, <span class="string">'hashlib'</span>, <span class="string">'_hashlib'</span>, <span class="string">'_blake2'</span>, <span class="string">'_sha3'</span>, <span class="string">'bisect'</span>, <span class="string">'_bisect'</span>, <span class="string">'_random'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.modules[<span class="string">"os"</span>])</span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'D:\\Program Files (x86)\\Python36-35\\lib\\os.py'</span>&gt;</span><br><span class="line"><span class="comment">#还可以通过key值获取模块所处路径</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.hexversion <span class="comment">#获取python解释器的版本值，16进制格式</span></span><br><span class="line"><span class="number">50726384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.version <span class="comment">#获取python解释器的版本信息</span></span><br><span class="line"><span class="string">'3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.copyright <span class="comment">#返回python版权相关信息</span></span><br><span class="line"><span class="string">'Copyright (c) 2001-2018 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.api_version <span class="comment">#解释器的C的API版本</span></span><br><span class="line"><span class="number">1013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.version_info  <span class="comment">#python版本信息，final表示最终版本，candidate表示候选，还有后续发行版本</span></span><br><span class="line">sys.version_info(major=<span class="number">3</span>, minor=<span class="number">6</span>, micro=<span class="number">5</span>, releaselevel=<span class="string">'final'</span>, serial=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.executable  <span class="comment">#返回python解释器的路径</span></span><br><span class="line"><span class="string">'D:\\Program Files (x86)\\Python36-35\\python.exe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getwindowsversion() <span class="comment">#获取windows的版本信息</span></span><br><span class="line">sys.getwindowsversion(major=<span class="number">10</span>, minor=<span class="number">0</span>, build=<span class="number">17134</span>, platform=<span class="number">2</span>, service_pack=<span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;map函数&quot;&gt;&lt;a href=&quot;#map函数&quot; class=&quot;headerlink&quot; title=&quot;map函数&quot;&gt;&lt;/a&gt;map函数&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kvm安装</title>
    <link href="http://www.python100.com/2018/07/24/%E5%AE%89%E8%A3%85kvm/"/>
    <id>http://www.python100.com/2018/07/24/安装kvm/</id>
    <published>2018-07-24T10:09:00.000Z</published>
    <updated>2018-07-24T10:17:24.624Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><p>VMware虚机在启动之前开启CPU虚拟化<br><img src="/images/kvm/虚拟化" alt="1"></p><p>1、安装桌面GUI</p><pre><code>yum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot; </code></pre><p>2、安装kvm</p><pre><code>yum -y install libcanberra-gtk2 qemu-kvm.x86_64 qemu-kvm-tools.x86_64  libvirt.x86_64 libvirt-cim.x86_64 libvirt-client.x86_64 libvirt-java.noarch  libvirt-python.x86_64 libiscsi-1.7.0-5.el6.x86_64  dbus-devel  virt-clone tunctl virt-manager libvirt libvirt-python python-virtinst</code></pre><p>查看kvm模块是否已经安装成功<br><img src="/images/kvm/lsmod" alt="2"></p><p>3、安装桥接网络，并设置/</p><p>yum -y install bridge-utils</p><p><img src="/images/kvm/br0" alt="3"></p><p><img src="/images/kvm/ifconfig" alt="4"></p><p>设置完成后重启网络，并查看网络</p><pre><code>[root@localhost network-scripts]# brctl showbridge name    bridge id        STP enabled    interfacesbr0        8000.000c29c12e49    yes        ens37virbr0        8000.525400c9ff4e    yes        virbr0-nic</code></pre><p>4、重启libvirt,设置开机自启动</p><pre><code>systemctl start libvirtdsystemctl enable libvirtd</code></pre><p>5、使用virt-manager图形化来管理kvm虚机<br><img src="/images/kvm/1-1" alt="1531910233741"><br><img src="/images/kvm/1-2" alt="1531910233741"><br><img src="/images/kvm/1-3" alt="1531910233741"><br><img src="/images/kvm/1-4" alt="1531910233741"><br><img src="/images/kvm/1-5" alt="1531910233741"><br><img src="/images/kvm/1-6" alt="1531910233741"><br><img src="/images/kvm/1-7" alt="1531910233741"><br><img src="/images/kvm/1-8" alt="1531910233741"><br><img src="/images/kvm/1-9" alt="1531910233741"><br><img src="/images/kvm/1-10" alt="1531910233741"></p><p>之后就是正常安装系统的步骤</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;p&gt;VMware虚机在启动之前开启CPU虚拟化&lt;br&gt;&lt;img src=&quot;/images/kvm/虚拟化&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;p&gt;1、安装桌面GUI&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongodb的优缺点</title>
    <link href="http://www.python100.com/2018/07/24/mongodb%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://www.python100.com/2018/07/24/mongodb的优缺点/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:18:40.104Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h1 id="mongodb的优缺点"><a href="#mongodb的优缺点" class="headerlink" title="mongodb的优缺点"></a>mongodb的优缺点</h1><p>对比mysql, mongo的优缺点有：</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>不支持事务操作</p></li><li><p>占用空间过大</p></li><li><p>MongoDB没有如MySQL那样成熟的维护工具</p></li><li><p>无法进行关联表查询，不适用于关系多的数据</p></li><li><p>复杂聚合操作通过mapreduce创建，速度慢</p></li><li><p>模式自由， 自由灵活的文件存储格式带来的数据错误</p></li><li><p>预分配模式带来的磁盘瓶颈。</p></li></ul><p>mongodb采用数据文件预分配模式来生成数据文件，<strong>数据文件的大小从64M开始</strong>，<strong>每增加一个文件，大小翻倍，直到2G，</strong><br>以后每次增加数据就会生成2G左右的数据文件，结合mongodb的mmap内存模型，对于写数据文件，将随机写转换为顺序写，<br>一定程度上缓解了磁盘的io压力。</p><p>但在实际使用中，遇到了在预分配2G的数据文件时<strong>，如果磁盘io较慢，则mongodb基本锁死，无法响应请求的情况。</strong><br>持续时间则根据磁盘io的性能来确定。这个问题在2.0之后版本可能会有些改善，但在磁盘性能低的服务器上，该问题依旧存在.</p><p>这个问题目前没有太好的解决方案，只能建议使用读写性能比较好的服务器来跑mongodb。</p><p><strong>在数据存量大于内存大小时，mongodb遇到冷数据查询速度变慢。</strong></p><p>mongodb使用mmap的内存管理模式，如果查询的都是热数据，那么会在内存中直接查询，如果遇到冷数据，就需要从磁盘读取，<br>并将一部分热数据从内存卸载掉.</p><p>有人曾经说mongodb内存管理是加载固定大小的文件块到内存，即如果冷数据在磁盘上，他会根据请求的数据，<br>加载一定大小的数据块到内存，并卸载掉同样的热数据，这个操作本身会带来一定io.</p><p>因为<strong>mongodb使用的是全局锁，在某个操作缓慢时，整个操作队列会全部变慢</strong>。</p><p>这个问题造成了mongodb会出现偶发性堵塞问题，连带整个库的性能下降。</p><p>该问题在应用需要尽量避免出现，需要将mongodb的数据大小规划好，尽量不要使数据量超过内存的大小，如果超过内存大小后，尽量不要去请求冷数据。</p><h3 id="Mongodb全局锁机制。"><a href="#Mongodb全局锁机制。" class="headerlink" title="Mongodb全局锁机制。"></a>Mongodb全局锁机制。</h3><p>mongodb最大的问题或者可以说是它的锁机制，在2.2版本之前，一个实例只有一个读写锁，不管有多少数据库和数据集合，<br>当一个操作进行时其他操作只能等待，在2.2版本后，mongodb锁降低了粒度，改为按库锁。</p><p>MongoDB 使用的是“readers-writer”锁， 可以支持并发但有很大的局限性，当一个读锁存在,许多读操作可以使用这把锁，<br>然而, 当一个写锁的存在，一个单一的写操作会exclusively 持有该锁，同时其它读，写操作不能使用共享这个锁；举个例子，假设一个集合里有 10 个文档，多个 update 操作不能并发在这个集合上，即使是更新不同的文档。</p><p><strong>删除数据集合后空间不会自动释放</strong></p><p><strong>mongodb删除集合后磁盘空间不释放，只有用db.repairDatabase()去修复才能释放。</strong></p><p><strong>修复可能要花费很长的时间,在使用db.repairDatabase()去修复时一定要停掉读写，并且mongodb要有备机才可以，不然千万不要随便使用db.repairDatabase()来修复数据库，切记。</strong></p><p>但是在修复的过程中如果出现了非正常的mongodb的挂掉，再次启动时启动不了的，需要先修复才可以，<br>可以利用./mongod –repair –dbpath=/data/mongo/<br>如果你是把数据库单独的放在一个文件夹中指定dbpath时就指向要修复的数据库就可以。</p><p>###replica set一些隐含问题 ###</p><ul><li><p>replica set模式最多支持12台服务器，而有投票权的服务器只支持7台，如果超过7台服务器，需设置部分服务器为无投票权服务器</p></li><li><p>replica set模式中，一个set服务器如果小于2台服务器，则自动故障恢复不会起作用，如果4台服务器出现2/2互相ping不通的情况，同样不会自动故障恢复。一般来说，一个set中尽量是有单数服务器。</p></li><li><p>replica set中，因为mongodb是按照时间进行操作，如果set中某个服务器时间超前或者延迟，很容易出现secondaries不断尝试更新oplog或者同步延迟的问题。甚至造成某些操作失败，如drop操作。</p></li></ul><p>###分片模式的一些隐含问题 ###</p><ul><li><p>config server尽量按照官方的要求，有3个configserver，如果只有2个configserver，则shard的自动负载均衡和自动切片功能不可用。</p></li><li><p>api中的nearest模式在shard中，判断的是set到mongos的距离而非set到client的距离，在切片模式下，尽量不要使用nearest模式，可能会造成一些请求延迟增加的问题。</p></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>文档结构的存储方式，能够更便捷的获取数据</p></li><li><p>内置GridFS，支持大容量的存储</p></li><li><p>内置Sharding，分片简单</p></li><li><p>海量数据下，性能优越</p></li><li><p>支持自动故障恢复（复制集）</p></li></ul><p>mongodb是一个介于nosql数据库和mysql数据库之间的一个数据存储系统，它没有严格的数据格式，但同时支持复杂查询，而且自带sharding模式和Replica Set模式，支持分片模式，复制模式，自动故障处理，自动故障转移，自动扩容，全内容索引，动态查询等功能。扩展性和功能都比较强大。</p><p>mongodb在数据查询方面，支持类sql查询，可以一个key多value内容，可以组合多个value内容来查询，支持索引，支持联合索引，支持复杂查询 ，支持排序，基本上除了join和事务类型的操作外，mongodb支持所有mysql支持的查询，甚至某个客户端api支持直接使用sql语句查询mongodb。</p><p>mongodb的sharding功能目前日渐完善，支持自定义范围分片，hash自动分片等，分片自动扩容，shard之间自动负载均衡等功能。实际使用中功能还不错。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongodb的优缺点&quot;&gt;&lt;a href=&quot;#mongodb的优缺点&quot; class=&quot;headerlink&quot; title=&quot;mongodb
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql数据库迁移如mongo数据库步骤</title>
    <link href="http://www.python100.com/2018/07/24/cq%E5%B9%B3%E5%8F%B0%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.python100.com/2018/07/24/cq平台迁移数据库备份步骤/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:26:36.891Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><p>备份MySQL</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@db:/<span class="comment"># mysqldump -uroot -p -d campus&gt;campus.sql  </span></span><br><span class="line"><span class="comment">#密码 Passwrd</span></span><br></pre></td></tr></table></figure><p>备份Mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@mongo:~<span class="comment"># mongodump -d user -o user</span></span><br><span class="line">root@mongo:~<span class="comment"># mongodump -d store -o store</span></span><br></pre></td></tr></table></figure><p>将MySQL备份成Mongo格式，使用python脚本来实现，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql,os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">host=<span class="string">'192.168.100.100'</span></span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">user=<span class="string">'root'</span></span><br><span class="line">password=<span class="string">'123qwe'</span></span><br><span class="line">database=<span class="string">'data'</span></span><br><span class="line"><span class="comment">#存放导出的数据的路径</span></span><br><span class="line">BASE_DIR=<span class="string">"D:\\mygit\\old\\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义连接数据库的引擎</span></span><br><span class="line">dbconn=pymysql.connect(</span><br><span class="line">    host=host,</span><br><span class="line">    port=port,</span><br><span class="line">    user=user,</span><br><span class="line">    password=password,</span><br><span class="line">    database=database,</span><br><span class="line">    charset=<span class="string">'utf8'</span>,</span><br><span class="line">    cursorclass=pymysql.cursors.DictCursor</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">table_list=[]</span><br><span class="line"><span class="comment">#查询数据库中的表的sql语句</span></span><br><span class="line">tab_sql=<span class="string">"show tables;"</span></span><br><span class="line"><span class="comment">#获取查询数据库游标</span></span><br><span class="line">cursor=dbconn.cursor()</span><br><span class="line"><span class="comment">#执行查询所有表</span></span><br><span class="line">cursor.execute(tab_sql)</span><br><span class="line"><span class="comment">#获取查询的结果，结果是一系列字典组成的字典</span></span><br><span class="line">res=cursor.fetchall()</span><br><span class="line"><span class="comment">#使用循环，将具体的表名从结果中取出来存入存放到一个列表中</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">    table_list.append(res[i][<span class="string">'Tables_in_%s'</span>%database])</span><br><span class="line"><span class="comment"># print(table_list)</span></span><br><span class="line">cursor.close()</span><br><span class="line">dbconn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> table_list:</span><br><span class="line">    print((<span class="string">"%s表中数据"</span>%t).center(<span class="number">50</span>,<span class="string">"*"</span>))</span><br><span class="line">    <span class="comment">#为每一个表新建一个文件，保存输出的结果</span></span><br><span class="line">    path=BASE_DIR+t</span><br><span class="line">    fp=open(path,<span class="string">'w'</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    conn=pymysql.connect(</span><br><span class="line">        host=host,</span><br><span class="line">        port=port,</span><br><span class="line">        user=user,</span><br><span class="line">        password=password,</span><br><span class="line">        database=database,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        cursorclass=pymysql.cursors.DictCursor</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cursor=conn.cursor()</span><br><span class="line">    print(cursor)</span><br><span class="line">    sql=<span class="string">"select * from %s"</span>%t</span><br><span class="line">    print(sql)</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    res =cursor.fetchall()</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> res:</span><br><span class="line">        fileds=var.keys()</span><br><span class="line">        fp.write(str(var))</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure><p>将导出的文件导入Mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">BASE_PATH=<span class="string">"/root/old"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls <span class="variable">$BASE_PATH</span>` :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    echo <span class="variable">$var</span></span><br><span class="line">    <span class="comment">#mongoimport -uadmin -pPassw0rd  -d old  -c $var $BASE_PATH/$var</span></span><br><span class="line">    mongoimport   -d  old  -c  <span class="variable">$var</span> <span class="variable">$BASE_PATH</span>/<span class="variable">$var</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>将MySQL导出为csv格式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uusername -ppassword -h <span class="number">172.16</span>.<span class="number">81.236</span> –D my_db  --default-character-set=gbk  -e <span class="string">'select * from server_warning_unrepaired'</span>  | sed <span class="string">'s/\t/","/g;s/^/"/;s/$/"/;s/\n//g'</span> &gt; /tmp/file.csv</span><br></pre></td></tr></table></figure><p>将csv到如到mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport --db network1 --collection networkmanagement --type csv --headerline --ignoreBlanks --file /home/erik/Documents/networkmanagement-<span class="number">1</span>.csv</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;p&gt;备份MySQL&lt;/p&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
      <category term="mysql迁移" scheme="http://www.python100.com/tags/mysql%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>docker设置本地仓库</title>
    <link href="http://www.python100.com/2018/07/24/docker_registry/"/>
    <id>http://www.python100.com/2018/07/24/docker_registry/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:20:14.325Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h3 id="account-chenqmc"><a href="#account-chenqmc" class="headerlink" title="account:chenqmc"></a>account:chenqmc</h3><pre><code>openssl req -newkey rsa:4096 -nodes -sha256 -keyout ${HOSTNAME}.key -x509 -days 365 -out ${HOSTNAME}.crt</code></pre><h3 id="vim-etc-docker-daemon-json"><a href="#vim-etc-docker-daemon-json" class="headerlink" title="vim /etc/docker/daemon.json"></a>vim /etc/docker/daemon.json</h3><pre><code>{&quot;registry-mirrors&quot;: [&quot;http://187193f5.m.daocloud.io&quot;]}</code></pre><h3 id="拉取registry"><a href="#拉取registry" class="headerlink" title="拉取registry"></a>拉取registry</h3><pre><code>docker pull registry</code></pre><h3 id="启动registry"><a href="#启动registry" class="headerlink" title="启动registry"></a>启动registry</h3><pre><code>docker run -d -p 5000:5000 -v  /opt/data/registry:/tmp/registry  registry</code></pre><h3 id="将镜像进行tag打包，传入本地镜像"><a href="#将镜像进行tag打包，传入本地镜像" class="headerlink" title="将镜像进行tag打包，传入本地镜像"></a>将镜像进行tag打包，传入本地镜像</h3><pre><code>[root@www1 ~]# docker tag 471e783ffeca 127.0.0.1:5000/mdc-cas[root@www1 ~]# docker push 127.0.0.1:5000/mdc-cas</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;account-chenqmc&quot;&gt;&lt;a href=&quot;#account-chenqmc&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="docker" scheme="http://www.python100.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>linux系统根目录扩容</title>
    <link href="http://www.python100.com/2018/07/24/%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/"/>
    <id>http://www.python100.com/2018/07/24/根目录扩容/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:09:02.326Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p>VMware的虚机根目录空间不足，添加一个100g磁盘，然后给根目录进行磁盘扩展</p><p>原磁盘：/dev/sda 20g</p><p>新磁盘：/dev/sdb 100g</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs        <span class="number">17</span>G  <span class="number">8.7</span>G  <span class="number">8.4</span>G  <span class="number">51</span>% /</span><br><span class="line">devtmpfs                devtmpfs  <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G   <span class="number">11</span>M  <span class="number">1.5</span>G   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs      <span class="number">1014</span>M  <span class="number">137</span>M  <span class="number">878</span>M  <span class="number">14</span>% /boot</span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M  <span class="number">4.0</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M   <span class="number">28</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">1000</span></span><br><span class="line">/dev/sr0                iso9660   <span class="number">4.2</span>G  <span class="number">4.2</span>G     <span class="number">0</span> <span class="number">100</span>% /run/media/qmc/CentOS <span class="number">7</span> x86_64</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># pvcreate /dev/sdb</span></span><br><span class="line">  Physical volume <span class="string">"/dev/sdb"</span> successfully created.</span><br><span class="line"> [root@server ~]<span class="comment"># vgs     #查看当前卷组名centos</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree</span></span><br><span class="line">  centos   <span class="number">1</span>   <span class="number">2</span>   <span class="number">0</span> wz--n- &lt;<span class="number">19.00</span>g    <span class="number">0</span> </span><br><span class="line">[root@server ~]<span class="comment"># vgextend  centos /dev/sdb</span></span><br><span class="line">  Volume group <span class="string">"centos"</span> successfully extended</span><br><span class="line">[root@server ~]<span class="comment"># vgs</span></span><br><span class="line">  VG     <span class="comment">#PV #LV #SN Attr   VSize   VFree   </span></span><br><span class="line">  centos   <span class="number">2</span>   <span class="number">2</span>   <span class="number">0</span> wz--n- <span class="number">118.99</span>g &lt;<span class="number">100.00</span>g</span><br><span class="line">[root@server ~]<span class="comment"># lvextend /dev/centos/root /dev/sdb </span></span><br><span class="line">  Size of logical volume centos/root changed from &lt;<span class="number">17.00</span> GiB (<span class="number">4351</span> extents) to <span class="number">116.99</span> GiB (<span class="number">29950</span> extents).</span><br><span class="line">  Logical volume centos/root successfully resized.</span><br><span class="line">[root@server ~]<span class="comment"># xfs_growfs /dev/mapper/centos-root </span></span><br><span class="line">meta-data=/dev/mapper/centos-root isize=<span class="number">512</span>    agcount=<span class="number">4</span>, agsize=<span class="number">1113856</span> blks</span><br><span class="line">         =                       sectsz=<span class="number">512</span>   attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">         =                       crc=<span class="number">1</span>        finobt=<span class="number">0</span> spinodes=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span>     =                       bsize=<span class="number">4096</span>   blocks=<span class="number">4455424</span>, imaxpct=<span class="number">25</span></span><br><span class="line">         =                       sunit=<span class="number">0</span>      swidth=<span class="number">0</span> blks</span><br><span class="line">naming   =version <span class="number">2</span>              bsize=<span class="number">4096</span>   ascii-ci=<span class="number">0</span> ftype=<span class="number">1</span></span><br><span class="line">log      =internal               bsize=<span class="number">4096</span>   blocks=<span class="number">2560</span>, version=<span class="number">2</span></span><br><span class="line">         =                       sectsz=<span class="number">512</span>   sunit=<span class="number">0</span> blks, lazy-count=<span class="number">1</span></span><br><span class="line">realtime =none                   extsz=<span class="number">4096</span>   blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span> blocks changed from <span class="number">4455424</span> to <span class="number">30668800</span></span><br><span class="line">[root@server ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/centos-root xfs       <span class="number">117</span>G  <span class="number">8.7</span>G  <span class="number">109</span>G   <span class="number">8</span>% /</span><br><span class="line">devtmpfs                devtmpfs  <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G   <span class="number">11</span>M  <span class="number">1.5</span>G   <span class="number">1</span>% /run</span><br><span class="line">tmpfs                   tmpfs     <span class="number">1.5</span>G     <span class="number">0</span>  <span class="number">1.5</span>G   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1               xfs      <span class="number">1014</span>M  <span class="number">137</span>M  <span class="number">878</span>M  <span class="number">14</span>% /boot</span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M  <span class="number">4.0</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs                   tmpfs     <span class="number">300</span>M   <span class="number">28</span>K  <span class="number">300</span>M   <span class="number">1</span>% /run/user/<span class="number">1000</span></span><br><span class="line">/dev/sr0                iso9660   <span class="number">4.2</span>G  <span class="number">4.2</span>G     <span class="number">0</span> <span class="number">100</span>% /run/media/qmc/CentOS <span class="number">7</span> x86_64</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;VMware的虚机根目录空间不足，添加一个100g磁盘，然后给根目录进行磁盘扩展&lt;/p&gt;&lt;p&gt;原磁盘：/dev/sda 20g&lt;/p&gt;&lt;p&gt;新磁盘：
      
    
    </summary>
    
      <category term="根目录扩容" scheme="http://www.python100.com/categories/%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>zfs和gluster安装</title>
    <link href="http://www.python100.com/2018/07/24/centos7%E4%B8%8A%E5%AE%89%E8%A3%85zfs%E5%92%8Cgluster/"/>
    <id>http://www.python100.com/2018/07/24/centos7上安装zfs和gluster/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:22:25.110Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p>在同一台主机上zfs和gluster无法同时安装</p><p><strong>centos7上安装zfs</strong></p><p><a href="https://blog.csdn.net/linuxnews/article/details/51286358" target="_blank" rel="noopener">https://blog.csdn.net/linuxnews/article/details/51286358</a></p><p>1、获取163yum源</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>2、安装zfs的yum源</p><p>yum -y install <a href="http://download.zfsonlinux.org/epel/zfs-release.el7_3.noarch.rpm" target="_blank" rel="noopener">http://download.zfsonlinux.org/epel/zfs-release.el7_3.noarch.rpm</a></p><p>3、安装zfs</p><p>yum -y install kernel zfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall --nogpgcheck http://epel.mirror.net.in/epel/7/x86_64/e/epel-release-7-5.noarch.rpm</span><br><span class="line">yum localinstall --nogpgcheck http://archive.zfsonlinux.org/epel/zfs-release.el7.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-devel zfs</span><br></pre></td></tr></table></figure><p>zfs命令 ——&gt; <a href="https://docs.oracle.com/cd/E26926_01/html/E29115/zfs-1m.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E26926_01/html/E29115/zfs-1m.html</a></p><p>zpool命令 ——&gt; <a href="https://docs.oracle.com/cd/E26926_01/html/E29115/zpool-1m.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E26926_01/html/E29115/zpool-1m.html</a></p><p><strong>安装gluster</strong></p><p>1、获取163yum源</p><p>​ wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>2、安装最新版本的gluster软件仓库：</p><p>​ yum -y install centos-release-gluster310</p><p>3、安装gluster软件：</p><p>​ yum -y install glusterfs glusterfs-server glusterfs-fuse glusterfs-cli glusterfs-geo-replication</p><p>4、 查看版本信息：</p><p>​ glusterfs -V</p><p>CentOS 7 升级内核到4.4.6 LTS</p><p>rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org" target="_blank" rel="noopener">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a></p><p>rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm" target="_blank" rel="noopener">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a></p><p>yum –enablerepo=elrepo-kernel install kernel-lt-devel kernel-lt -y</p><p>awk -F\’ ‘$1==”menuentry “ {print $2}’ /etc/grub2.cfg</p><p>grub2-set-default xxxx reboot</p><p>uname -r</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;在同一台主机上zfs和gluster无法同时安装&lt;/p&gt;&lt;p&gt;&lt;strong&gt;centos7上安装zfs&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="zfs" scheme="http://www.python100.com/categories/zfs/"/>
    
    
      <category term="zfs" scheme="http://www.python100.com/tags/zfs/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="http://www.python100.com/2018/07/24/hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.python100.com/2018/07/24/hexo搭建/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:19:15.999Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install npm git</span><br><span class="line">mkdir /hexo</span><br><span class="line">cd /hexo</span><br><span class="line">hexo init </span><br><span class="line">npm install</span><br><span class="line">   npm install --save  hexo-admin </span><br><span class="line">npm install hexo-cli</span><br><span class="line">   hexo server</span><br></pre></td></tr></table></figure><h3 id="2、常用命令"><a href="#2、常用命令" class="headerlink" title="2、常用命令"></a>2、常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">清理缓存命令：hexo clean</span><br><span class="line">重新构建项目：hexo generate</span><br><span class="line">启动server: hexo server -p 4000 </span><br><span class="line">提交改动到git：hexo deploy</span><br><span class="line">新建标签页：hexo new page tags</span><br></pre></td></tr></table></figure><h3 id="3、博客主题下载网址"><a href="#3、博客主题下载网址" class="headerlink" title="3、博客主题下载网址"></a>3、博客主题下载网址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hexo.io/themes/</span><br></pre></td></tr></table></figure><p>4、</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;f
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.python100.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.python100.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title> mongo安装和使用</title>
    <link href="http://www.python100.com/2018/07/24/Mongo%E5%AE%89%E8%A3%85%E5%8F%8A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
    <id>http://www.python100.com/2018/07/24/Mongo安装及用户认证/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:24:28.399Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h1 id="mongo安装和使用"><a href="#mongo安装和使用" class="headerlink" title="mongo安装和使用"></a>mongo安装和使用</h1><p>#<br>安装mongo</p><p>参考文档：<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/</a></p><h3 id="yum安装，先获取repo源"><a href="#yum安装，先获取repo源" class="headerlink" title="yum安装，先获取repo源"></a>yum安装，先获取repo源</h3><pre><code>[mongodb-enterprise]name=MongoDB Enterprise Repositorybaseurl=https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/3.6/$basearch/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</code></pre><p>sudo yum install -y mongodb-enterprise #安装最新mongo，默认会依赖安装下面的包</p><pre><code>mongodb-enterprise,mongodb-enterprise-server,mongodb-enterprise-shell,mongodb-enterprise-mongos,mongodb-enterprise-tools</code></pre><p>安装指定版本使用下面命令</p><pre><code>yum install -y mongodb-enterprise-3.6.5 mongodb-enterprise-server-3.6.5 mongodb-enterprise-shell-3.6.5 mongodb-enterprise-mongos-3.6.5 mongodb-enterprise-tools-3.6.5</code></pre><p>启动使用</p><pre><code>systemctl start mongodservice mongod start/stop/restartchkconfig mongod onmongo --host 127.0.0.1:27017</code></pre><p>数据目录</p><pre><code>日志：/var/log/mongodb数据：/var/lig/mongo</code></pre><h3 id="使用resource安装"><a href="#使用resource安装" class="headerlink" title="使用resource安装"></a>使用resource安装</h3><p>获取Mongo的安装包：</p><pre><code>curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgztar -xf mongodb-linux-x86_64-3.4.6.tgzmv mongodb-3.4.6 /usr/local/mongodbcd /usr/local/mongodb手动创建db和log目录mkdir -p /data/dbmkdir /data/logtouch /data/log/mongodb.log</code></pre><p>启动mongo</p><pre><code>./bin/mongod  --dbpath /data/db --logpath /data/log/mongodb.log --fork --port 27017--dbpath 数据存储目录--logpath mongo运行日志记录--fork 是后台运行--port  是运行的端口（默认是27017）</code></pre><p><img src="/images/mongo/mongo1.jpg" alt="mongo1"></p><p>出现如上图的字样就说明启动成功了</p><p>进入数据库</p><pre><code>./bin/mongo  </code></pre><p><img src="/images/mongo/mongo2.jpg" alt="mongo2"></p><h3 id="mongodb数据简介"><a href="#mongodb数据简介" class="headerlink" title="mongodb数据简介"></a>mongodb数据简介</h3><pre><code>mongodb是一个介于nosql数据库和mysql数据库之间的一个数据存储系统，它没有严格的数据格式，但同时支持复杂查询，而且自带sharding模式和Replica Set模式，支持分片模式，复制模式，自动故障处理，自动故障转移，自动扩容，全内容索引，动态查询等功能。扩展性和功能都比较强大。mongodb在数据查询方面，支持类sql查询，可以一个key多value内容，可以组合多个value内容来查询，支持索引，支持联合索引，支持复杂查询 ，支持排序，基本上除了join和事务类型的操作外，mongodb支持所有mysql支持的查询，甚至某个客户端api支持直接使用sql语句查询mongodb。mongodb的sharding功能目前日渐完善，支持自定义范围分片，hash自动分片等，分片自动扩容，shard之间自动负载均衡等功能。实际使用中功能还不错。mongodb 文档数据库,存储的是文档(Bson-&gt;json的二进制化).特点:内部执行引擎为JS解释器, 把文档存储成bson结构,在查询时,转换为JS对象,并可以通过熟悉的js语法来操作.mongo和传统型数据库相比,最大的不同:传统型数据库: 结构化数据, 定好了表结构后,每一行的内容,必是符合表结构的,就是说--列的个数,类型都一样.mongo文档型数据库: 表下的每篇文档,都可以有自己独特的结构(json对象都可以有自己独特的属性和值)</code></pre><p>安装目录下，bin下脚本作用</p><p><img src="/images/mongo/mongo3.png" alt="mongo3"></p><p>##mongo数据库的用户验证##<br>超级账号创建<br>&gt; db.createUser(<br>… … {<br>… … user:”admin”,<br>… … pwd:”admin123”,<br>… … roles:[ { role:”userAdminAnyDatabase”,db:”admin”}]<br>… … } )</p><pre><code>创建完成后，修改mongo启动的配置文件，加入auth=ondbpath=/data/dblogpath=/data/log/mongodb.confport=27017auth=onfork=truelogappend=true杀死mongo的所有进程，pkill -9 mongo  重新启动mongod(server)[root@www1 mongodb]# ~/bin/mongod -f conf/mongodb.conf about to fork child process, waiting until server is ready for connections.forked process: 18135child process started successfully, parent exiting[root@www1 mongodb]# ./bin/mongo  启动mongo(client)&gt; show dbs2018-06-24T21:47:19.974+0800 E QUERY    [thread1] Error: listDatabases failed:{    &quot;ok&quot; : 0,    &quot;errmsg&quot; : &quot;not authorized on admin to execute command { listDatabases: 1.0, $db: \&quot;admin\&quot; }&quot;,    &quot;code&quot; : 13,    &quot;codeName&quot; : &quot;Unauthorized&quot;} :这时无法show dbs就没有权限查看数据库了，需要使用admin来验证登陆&gt; db.auth(&apos;admin&apos;,&apos;admin123&apos;)1返回1表示已经验证成功 &gt; show dbsadmin   0.000GBconfig  0.000GBdata    0.000GBlocal   0.000GB此时admin验证成功，但是每个数据库此时会要有自己的认证用户若要查看某一个数据库的数据，还要使用admin超管为每个数据库创建账号，并认证登陆需要注意的是在建立data数据库用户的时候一定要先启用data数据库，否则会出现问题&gt;use data&gt;db.createUser({user:&apos;u1&apos;,pwd:&apos;123qwe&apos;,roles:[{role:&apos;readWrite&apos;,db:&apos;data&apos;}]})&gt; db.auth(&apos;u1&apos;,&apos;123qwe&apos;)1&gt; show collectionsstu</code></pre><p>超管密码忘记，更改密码步骤：</p><p>1、更改配置文件，将auth=true注释掉，或者true改为false</p><p>2、重启mongo</p><pre><code>pkill -9 mongo  ./bin/mongod -f conf/mongodb.conf./bin/mongo&gt;use admin&gt; db.system.users.find()  #查找admin用户&gt; db.system.users.remove({&apos;_id&apos;:&apos;data.admin&apos;}) #根据id将admin用户删除，然后重新建admin&gt; &gt; db.createUser(    ... ... {    ... ...    user:&quot;admin&quot;,    ... ...    pwd:&quot;admin123&quot;,    ... ...    roles:[ { role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;}]    ... ... } )db.createUser({ user:&quot;admin&quot;,pwd:&quot;admin123&quot;, roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;}]})</code></pre><p>3、再次kill掉mongo，将auth改为true后进行重启</p><h2 id="mongo数据库Role"><a href="#mongo数据库Role" class="headerlink" title="mongo数据库Role"></a>mongo数据库Role</h2><pre><code>Built-In Roles（内置角色）：1. 数据库用户角色：read、readWrite;2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；4. 备份恢复角色：backup、restore；5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase6. 超级用户角色：root  // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）7. 内部角色：__systemRead：允许用户读取指定数据库readWrite：允许用户读写指定数据库dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profileuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。root：只在admin数据库中可用。超级账号，超级权限userAdminAnyDatabase 权限只是针对用户管理的，对其他是没有权限的。mongodump --port=27020 -uzjyr -pzjyr --db=test -o backup   #只要读权限就可以备份mongorestore --port=27020 -uzjy -pzjy --db=test backup/test/  #读写权限可以进行还原更新用户密码    use xx    db.changeUserPassword(&quot;username&quot;,&quot;newpassword&quot;)删除用户    切换到用户授权的db    use xx    执行删除操作    db.dropUser(&quot;username&quot;)更新用户    切换到用户授权的db    use xx    执行更新    字段会覆盖原来的内容    db.updateUser(&quot;username&quot;,{        pwd:&quot;new password&quot;,        customData:{            &quot;title&quot;:&quot;PHP developer&quot;        }    })查看角色信息    use admin    db.getRole(&quot;rolename&quot;,{showPrivileges:true})删除角色    use admin    db.dropRole(&quot;rolename&quot;)更新用户密码查看用户信息    use admin    db.getUser(&quot;username&quot;)</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongo安装和使用&quot;&gt;&lt;a href=&quot;#mongo安装和使用&quot; class=&quot;headerlink&quot; title=&quot;mongo安装和使
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
  </entry>
  
  <entry>
    <title>mongo常用操作</title>
    <link href="http://www.python100.com/2018/07/24/mongo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/mongo常用命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:18:23.348Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h1 id="mongo常用操作"><a href="#mongo常用操作" class="headerlink" title="mongo常用操作"></a>mongo常用操作</h1><p>参考文档：<a href="https://www.jb51.net/article/48217.htm" target="_blank" rel="noopener">https://www.jb51.net/article/48217.htm</a></p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><pre><code>helpdb.help();db.yourColl.help();db.youColl.find().help();rs.help();</code></pre><h2 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h2><pre><code># 查看数据库    show dbs# 切换数据库    use mydatabase# 删除当前数据库    db.dropDatabase()  #进入需要删除的数据库下执行此命令#克隆数据库    db.cloneDatabase(“127.0.0.1”); 将指定机器上的数据库的数据克隆到当前数据库    db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;);将本机的mydb的数据复制到temp数据库中    db.repairDatabase(); 修复当前数据库#获取当前数据库的状态    db.getName();    db;     db和getName方法是一样的效果，都可以查询当前使用的数据库    db.stats(); 显示当前db状态    db.version();  当前db版本    db.getMongo();  查看当前db的链接机器地址</code></pre><h2 id="集合操作-Collection聚集集合"><a href="#集合操作-Collection聚集集合" class="headerlink" title="集合操作 Collection聚集集合"></a>集合操作 Collection聚集集合</h2><pre><code># 查看集合    show collections# 删除集合    db.users.drop()#创建一个聚集集合（table）    db.createCollection(“collName”, {size: 20, capped: 5, max: 100});//创建成功会显示{“ok”:1}    //判断集合是否为定容量db.collName.isCapped();# 得到指定名称的聚集集合（table）    db.getCollection(&quot;account&quot;);# 得到当前db的所有聚集集合    db.getCollectionNames();#显示当前db所有聚集索引的状态    db.printCollectionStats();</code></pre><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><pre><code>插入文档    db.users.insert({       name:&apos;harttle&apos;,       url:&apos;http://harttle.com&apos;    })查询文档    # 查询所有        db.users.find()    # 条件查询        db.users.find({           name:&apos;harttle&apos;        })    # 有缩进的输出 db.users.find().pretty()更新文档    db.users.update({       name:&apos;harttle&apos;    }, {       url:&apos;http://harttle.com&apos;        })删除文档    # 删除所有        db.users.remove({})    # 条件删除        db.users.remove({           url:&apos;http://harttle.com&apos;        })</code></pre><p>##用户操作##</p><pre><code># 添加一个用户    db.addUser(&quot;name&quot;);    db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true); 添加用户、设置密码、是否只读# 数据库认证、安全模式    db.auth(&quot;userName&quot;, &quot;123123&quot;);# 显示当前所有用户    show users;# 删除用户     db.removeUser(&quot;userName&quot;);</code></pre><p>##查询操作##</p><pre><code># 去掉查询结果显示id#查询所有记录    db.userInfo.find();    # 相当于：select* from userInfo;# 查询去掉后的当前聚集集合中的某列的重复数据    db.userInfo.distinct(&quot;name&quot;);   会过滤掉name中的相同数据# 查询age = 22的记录    db.userInfo.find({&quot;age&quot;: 22});# 查询age &gt; 22的记录    db.userInfo.find({age: {$gt: 22}});# 查询age &lt; 22的记录    db.userInfo.find({age: {$lt: 22}});# 查询age &gt;= 25的记录    db.userInfo.find({age: {$gte: 25}});# 查询age &lt;= 25的记录    db.userInfo.find({age: {$lte: 25}});# 查询age &gt;= 23 并且 age &lt;= 26    db.userInfo.find({age: {$gte: 23, $lte: 26}});# 查询name中包含 mongo的数据    db.userInfo.find({name: /mongo/});# 查询name中以mongo开头的    db.userInfo.find({name: /^mongo/});# 查询指定列name、age数据     db.userInfo.find({}, {name: 1, age: 1});# 查询指定列name、age数据, age &gt; 25    db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});# 按照年龄排序    升序：db.userInfo.find().sort({age: 1});    降序：db.userInfo.find().sort({age: -1});# 查询name = zhangsan, age = 22的数据    db.userInfo.find({name: &apos;zhangsan&apos;, age: 22});# 查询前5条数据    db.userInfo.find().limit(5);# 查询10条以后的数据    db.userInfo.find().skip(10);# 查询在5-10之间的数据    db.userInfo.find().limit(10).skip(5);    可用于分页，limit是pageSize，skip是第几页*pageSize# or与 查询    db.userInfo.find({$or: [{age: 22}, {age: 25}]});# 查询第一条数据    db.userInfo.findOne();# 查询某个结果集的记录条数    db.userInfo.find({age: {$gte: 25}}).count();# 按照某列进行排序    db.userInfo.find({sex: {$exists: true}}).count();</code></pre><p>##索引##</p><pre><code># 创建索引    db.userInfo.ensureIndex({name: 1});    db.userInfo.ensureIndex({name: 1, ts: -1});# 查询当前聚集集合所有索引    db.userInfo.getIndexes();# 查看总索引记录大小    db.userInfo.totalIndexSize();# 读取当前集合的所有index信息    db.users.reIndex();# 删除指定索引    db.users.dropIndex(&quot;name_1&quot;);    # 删除所有索引索引    db.users.dropIndexes();</code></pre><p>##修改、添加、删除集合数据##</p><pre><code># 添加    db.users.save({name: ‘zhangsan&apos;, age: 25, sex: true});# 修改    db.users.update({age: 25}, {$set: {name: &apos;changeName&apos;}}, false, true);    相当于：update users set name = ‘changeName&apos; where age = 25;    db.users.update({name: &apos;Lisi&apos;}, {$inc: {age: 50}}, false, true);    相当于：update users set age = age + 50 where name = ‘Lisi&apos;;    db.users.update({name: &apos;Lisi&apos;}, {$inc: {age: 50}, $set: {name: &apos;hoho&apos;}}, false, true);    相当于：update users set age = age + 50, name = ‘hoho&apos; where name = ‘Lisi&apos;;# 删除    db.users.remove({age: 132});# 查询修改删除    db.users.findAndModify({        query: {age: {$gte: 25}},            #query 查询过滤条件 {}         sort: {age: -1},          #如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象        update: {$set: {name: &apos;a2&apos;}, $inc: {age: 2}},        remove: true            #若为true，被选中对象将在返回前被删除     });    db.runCommand({ findandmodify : &quot;users&quot;,        query: {age: {$gte: 25}},        sort: {age: -1},        update: {$set: {name: &apos;a2&apos;}, $inc: {age: 2}},        remove: true    });    #update 或 remove 其中一个是必须的参数; 其他参数可选。</code></pre><p>##语句块操作##</p><pre><code># 简单Hello World    print(&quot;Hello World!&quot;);# 将一个对象转换成json    tojson(new Object());    tojson(new Object(&apos;a&apos;));# 循环添加数据    &gt; for (var i = 0; i &lt; 30; i++) {    ... db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});    ... };    &gt; for (var i = 0; i &lt; 30; i++) db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});# find 游标查询    &gt;var cursor = db.users.find();    &gt; while (cursor.hasNext()) {        printjson(cursor.next());    }# forEach迭代循环    db.users.find().forEach(printjson);    # forEach中必须传递一个函数来处理每条迭代的数据信息    db.things.find({x:4}).forEach(function(x) {print(tojson(x));});  # forEach传递函数显示信息# 将find游标当数组处理    var cursor = db.users.find();    cursor[4];    # 取得下标索引为4的那条数据    # 既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();    # 那样我们也可以用循环显示数据    for (var i = 0, len = c.length(); i &lt; len; i++) printjson(c[i]);# 将find游标转换成数组    &gt; var arr = db.users.find().toArray();    # 用toArray方法将其转换为数组    &gt; printjson(arr[2]);# 定制我们自己的查询结果，只显示age &lt;= 28的并且只显示age这列数据    db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);    db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);    db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);   #排除age序列</code></pre><p>##其他 ##</p><pre><code># 查询之前的错误信息    db.getPrevError();# 清除错误记录    db.resetError();查看聚集集合基本信息1、查看帮助  db.yourColl.help();2、查询当前集合的数据条数  db.yourColl.count();3、查看数据空间大小 db.userInfo.dataSize();4、得到当前聚集集合所在的db db.userInfo.getDB();5、得到当前聚集的状态 db.userInfo.stats();6、得到聚集集合总大小 db.userInfo.totalSize();7、聚集集合储存空间大小 db.userInfo.storageSize();8、Shard版本信息  db.userInfo.getShardVersion()9、聚集集合重命名 db.userInfo.renameCollection(&quot;users&quot;); 将userInfo重命名为users10、删除当前聚集集合 db.userInfo.drop();show dbs:显示数据库列表show collections：显示当前数据库中的集合（类似关系数据库中的表）show users：显示用户use &lt;db name&gt;：切换当前数据库，这和MS-SQL里面的意思一样db.help()：显示数据库操作命令，里面有很多的命令db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;mongo常用操作&quot;&gt;&lt;a href=&quot;#mongo常用操作&quot; class=&quot;headerlink&quot; title=&quot;mongo常用操作&quot;&gt;
      
    
    </summary>
    
      <category term="mongo" scheme="http://www.python100.com/categories/mongo/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodump与mongorestore</title>
    <link href="http://www.python100.com/2018/07/24/mongo%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://www.python100.com/2018/07/24/mongo数据库备份与恢复/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-26T06:01:53.448Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:01:53 GMT+0800 (CST) --><hr><h1 id="MongoDB-备份-mongodump-与恢复-mongorestore"><a href="#MongoDB-备份-mongodump-与恢复-mongorestore" class="headerlink" title="MongoDB 备份(mongodump)与恢复(mongorestore)"></a>MongoDB 备份(mongodump)与恢复(mongorestore)</h1><ul><li>mongoexport/mongoimport导入/导出的是JSON格式，而mongodump/mongorestore导入/导出的是BSON格式。<br>JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。<br>在一些mongodb版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能<br>不会成功，具体要看版本之间的兼容性。当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即mongoexport/mongoimport是一个可选项。跨版本的mongodump/mongorestore个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。<br>JSON虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。</li></ul><p>mongodump命令脚本语法如下：</p><pre><code>&gt;mongodump -h dbhost -d dbname -o dbdirectory -h：    MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017-d：    需要备份的数据库实例，例如：test-o：    备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，    系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。 </code></pre><p>mongodump –host HOST_NAME –port PORT_NUMBER 该命令将备份所有MongoDB数据<br>mongodump –host runoob.com –port 27017</p><p>[root@www1 mongodb]# mongodump -h localhost -u u1 -p 123qwe -d data -o data_mongo.tar</p><p>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY<br>mongodump –dbpath /data/db/ –out /data/backup/</p><p>mongodump –collection COLLECTION –db DB_NAME 该命令将备份指定数据库的集合。<br>mongodump –collection mycol –db test</p><h1 id="mongorestore"><a href="#mongorestore" class="headerlink" title="mongorestore"></a>mongorestore</h1><p>mogorestore命令脚本语法如下：</p><pre><code>&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;--host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址，默认为： localhost:27017--db , -d ：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2--drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！path：mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。你不能同时指定 &lt;path&gt; 和 --dir 选项，--dir也可以设置备份目录。--dir：指定备份的目录你不能同时指定 &lt;path&gt; 和 --dir 选项。</code></pre><h1 id="mongoexport"><a href="#mongoexport" class="headerlink" title="mongoexport"></a>mongoexport</h1><pre><code>参数    -h:指明数据库宿主机的IP    -u:指明数据库的用户名    -p:指明数据库的密码    -d:指明数据库的名字    -c:指明collection的名字    -f:指明要导出那些列    -o:指明到要导出的文件名    -q:指明导出数据的过滤条件    root@mongo:~/cas.mongo# mongorestore -h mongo:27017 -uadmin -pPassw0rd  -d admin admin    root@mongo:~/cas.mongo# mongorestore -h mongo:27017 -ucas -pPassw0rd  -d cas cas[root@localhost mongodb]# ./bin/mongoexport -d test -c students -o students.dat      -d:指明使用的库，本例中为test    -c:指明要导出的集合，本例中为students    -o:指明要导出的文件名，本例中为students.dat./bin/mongoexport -d test -c students --csv -f classid,name,age -o students_csv.dat     -csv：指明要导出为csv格式    -f：指明需要导出classid、name、age这3列的数据 </code></pre><h1 id="mongoimport"><a href="#mongoimport" class="headerlink" title="mongoimport"></a>mongoimport</h1><pre><code>参数    -h:指明数据库宿主机的IP    -u:指明数据库的用户名    -p:指明数据库的密码    -d:指明数据库的名字    -c:指明collection的名字    -f:指明要导入那些列./bin/mongoimport -d test -c students students.dat     参数说明：    -d:指明数据库名，本例中为test    -c:指明collection名，本例中为students    students.dat：导入的文件名./bin/mongoimport -d test -c students --type csv --headerline --file students_csv.dat       -type:指明要导入的文件格式    -headerline:指明第一行是列名，不需要导入    -file：指明要导入的文件</code></pre><p>–备份单个表</p><pre><code>mongodump -u  superuser -p 123456  --port 27017 --authenticationDatabase admin -d myTest -c d -o /backup/mongodb/myTest_d_bak_201507021701.bak</code></pre><p>–备份单个库</p><pre><code>mongodump  -u  superuser -p 123456 --port 27017  --authenticationDatabase admin -d myTest -o  /backup/mongodb/</code></pre><p>–备份所有库</p><pre><code>mongodump  -u  superuser -p 123456 --authenticationDatabase admin  --port 27017 -o /root/bak </code></pre><p>–备份所有库推荐使用添加–oplog参数的命令，这样的备份是基于某一时间点的快照，只能用于备份全部库时才可用，单库和单表不适用：</p><pre><code>mongodump -h 127.0.0.1 --port 27017   --oplog -o  /root/bak </code></pre><p>–同时，恢复时也要加上–oplogReplay参数，具体命令如下(下面是恢复单库的命令)：</p><pre><code>mongorestore  -d swrd --oplogReplay  /home/mongo/swrdbak/swrd/</code></pre><p>–恢复单个库：</p><pre><code>mongorestore  -u  superuser -p 123456 --port 27017  --authenticationDatabase admin -d myTest   /backup/mongodb/</code></pre><p>–恢复所有库：</p><pre><code>mongorestore   -u  superuser -p 123456 --port 27017  --authenticationDatabase admin  /root/bak</code></pre><p>–恢复单表</p><pre><code>mongorestore -u  superuser -p 123456  --authenticationDatabase admin -d myTest -c d /backup/mongodb/myTest_d_bak_201507021701.bak/myTest/d.bson</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:01:53 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h1 id=&quot;MongoDB-备份-mongodump-与恢复-mongorestore&quot;&gt;&lt;a href=&quot;#MongoDB-备份-mongodump
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>根据PID查看进程启动路径</title>
    <link href="http://www.python100.com/2018/07/24/shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/shell命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:17:01.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据PID查看进程启动路径</span><br><span class="line">cqxyw1 ~ <span class="comment"># ps eho command -p 30143</span></span><br><span class="line">///       MvGJ6F80QE USER=www-data PWD=/tmp HOME=/var/www SHLVL=<span class="number">3</span> _=/usr/bin/nohup OLDPWD=/srv/drupal</span><br><span class="line">根据pid查看网络状况</span><br><span class="line">netstat -pan | grep <span class="number">2337</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">///       MvGJ6F80QE USER=www-data PWD=/tmp HOME=/var/www SHLVL=<span class="number">3</span> _=/usr/bin/nohup OLDPWD=/srv/drupal</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>virsh相关命令</title>
    <link href="http://www.python100.com/2018/07/24/%E5%85%B3%E4%BA%8Evirsh%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.python100.com/2018/07/24/关于virsh相关命令/</id>
    <published>2018-07-24T10:06:00.000Z</published>
    <updated>2018-07-24T10:16:15.780Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h2 id="关于virsh相关命令"><a href="#关于virsh相关命令" class="headerlink" title="关于virsh相关命令"></a>关于virsh相关命令</h2><p>常用文件路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">虚拟机配置文件默认路径：</span><br><span class="line">[root@bainuo qemu]<span class="comment"># pwd</span></span><br><span class="line">/etc/libvirt/qemu</span><br><span class="line">[root@bainuo qemu]<span class="comment"># ls</span></span><br><span class="line">networks  vm01.xml</span><br><span class="line"></span><br><span class="line">磁盘文件默认路径：</span><br><span class="line">[root@bainuo images]<span class="comment"># pwd</span></span><br><span class="line">/var/lib/libvirt/images</span><br><span class="line">[root@bainuo images]<span class="comment"># ls</span></span><br><span class="line">vm01.img</span><br></pre></td></tr></table></figure><h3 id="虚机"><a href="#虚机" class="headerlink" title="虚机"></a>虚机</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">virsh命令参数 功能 用法举例</span><br><span class="line"></span><br><span class="line">list 查看已经存在的domain信息(可以带参数) virsh list --all (查看所有的虚拟机)</span><br><span class="line">start 开始一个不活跃的domain(前提是存在)   virsh start test2</span><br><span class="line">autostart 配置domain随boot启动 virsh autostart test2</span><br><span class="line">shutdown 优雅的关闭domain virsh shutdown test2</span><br><span class="line">destroy 立刻终止一个domain(强制关闭) virsh destroy test2</span><br><span class="line">reboot 重启一个domain(仅仅发送reboot命令)    virsh reboot test2</span><br><span class="line">suspend  挂起服务器   virsh suspend  test2</span><br><span class="line">resume   恢复服务器virsh resume test2</span><br><span class="line"></span><br><span class="line">console 连接domain的虚拟的控制台(只能有<span class="number">1</span>个)  virsh console test2</span><br><span class="line">ttyconsole 输出设备使用的domain的tty console virsh ttyconsole test2</span><br><span class="line">dominfo 返回关于domain的基本信息 virsh dominfo test2</span><br><span class="line">migrate 迁移一个domain到另一台主机  </span><br><span class="line"> </span><br><span class="line">KVM虚拟网络管理命令(virtual network)：</span><br><span class="line">virsh命令参数 功能 用法举例</span><br><span class="line">net-autostart 配置一个虚拟网络开机自启(--disable可以关闭) virsh net-autostart br0</span><br><span class="line">net-create 通过一个xml文件创建一个虚拟网络 virsh net-create ./virbr1.xml</span><br><span class="line">net-define 通过xml文件定义一个虚拟网络，仅定义不实例化 virsh net-define ./virbr1.xml</span><br><span class="line">net-destory 停止由其名称(uuid)指定的虚拟网络，立即生效 virsh net-destroy br0</span><br><span class="line">net-dumpxml 以xml文件的形式输出一个虚拟网络的配置信息 virsh net-dumpxml br0</span><br><span class="line">net-edit 编辑一个虚拟网络的配置文件(修改虚拟网络配置) virsh net-edit br0</span><br><span class="line">net-info 返回要查看的虚拟网络的基本信息 virsh net-info default</span><br><span class="line">net-list 查看当前的虚拟网络信息(可以带参数) virsh net-list --all</span><br><span class="line">net-name  </span><br><span class="line">net-start 开始一个不活跃的虚拟网络 virsh net-start br0</span><br><span class="line">net-undefine 将一个不活跃的虚拟网络取消定义 virsh net-undefine br0</span><br><span class="line">net-uuid  </span><br><span class="line">net-update  </span><br><span class="line"></span><br><span class="line">创建并启用一个网络：net-define -&gt; net-start</span><br><span class="line">virsh net-define br0.xml</span><br><span class="line">virsh net-list --all (有br0网络,但处于不活跃状态)</span><br><span class="line">virsh net-start br0</span><br><span class="line">virsh net-list --all (br0网络已处于活跃状态)</span><br><span class="line"> </span><br><span class="line">停用并删除一个网络(以br0为例)：net-destroy -&gt; net-undefine</span><br><span class="line">virsh net-destroy br0</span><br><span class="line">virsh net-list --all (br0网络变为不活跃状态)</span><br><span class="line">virsh </span><br><span class="line">net-undefine br0</span><br><span class="line">virsh net-list --all (br0网络已被删除)</span><br></pre></td></tr></table></figure><h3 id="存储池"><a href="#存储池" class="headerlink" title="存储池"></a>存储池</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建基于文件夹的存储池</span><br><span class="line"><span class="number">1</span>) 定义一个存储池</span><br><span class="line">virsh pool-define-as kvm_images dir - - - - “/kvm/images”</span><br><span class="line"><span class="number">2</span>) 查看创建的存储池信息</span><br><span class="line">virsh pool-list –all</span><br><span class="line"><span class="number">3</span>) 建立基于文件夹的存储池</span><br><span class="line">virsh pool-build kvm_images</span><br><span class="line"><span class="number">4</span>) 使存储池生效</span><br><span class="line">virsh pool-start kvm_images</span><br><span class="line"><span class="number">5</span>) 这时候，存储池还不是自动运行，使用virsh pool-autostart</span><br><span class="line">virsh pool-autostart kvm_images</span><br><span class="line"><span class="number">6</span>) 验证存储池</span><br><span class="line">virsh pool-info kvm_images</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">　　virsh回车进入交互式界面：</span><br><span class="line"></span><br><span class="line">version</span><br><span class="line">pwd</span><br><span class="line">hostname　　显示本节点主机名</span><br><span class="line">nodeinfo　　  显示节点信息</span><br><span class="line">list --all　　　显示所有云主机</span><br><span class="line"><span class="number">7</span>种状态：</span><br><span class="line"></span><br><span class="line">  running 　　运行中</span><br><span class="line">  idel　　　　 空闲，未运行</span><br><span class="line">  paused　　 暂停状态</span><br><span class="line">  shutdown　关闭</span><br><span class="line">  crashed　　虚拟机崩溃</span><br><span class="line">  dying　　　垂死状态，但是又没有完全关闭或崩溃</span><br><span class="line">  shutdown &lt;domain&gt;　　</span><br><span class="line">  destroy    &lt;domain&gt;　　强制关闭虚拟机（相当于直接拨电源）</span><br><span class="line">  start　　　&lt;domain&gt;　　启动虚拟机</span><br><span class="line">  edit　 &lt;domain&gt;　　　　 编辑该虚拟机的xml文件</span><br><span class="line">  dommemstat &lt;domain&gt;　获取domain的内存状态</span><br><span class="line">  suspend  &lt;domain&gt;　　    挂起一个正在运行的虚拟机，该虚拟机仍占资源；</span><br><span class="line">  resume  &lt;domain&gt;　　　　从挂起状态恢复一下虚拟机</span><br><span class="line">  vcpuinfo &lt;domain&gt;　　　　显示一些虚拟机的vcpu的信息</span><br><span class="line">  vncdisplay  &lt;domain&gt;　　  显示vnc监听地址和端口</span><br></pre></td></tr></table></figure><h3 id="快照相关命令"><a href="#快照相关命令" class="headerlink" title="快照相关命令"></a>快照相关命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snapshot-create &lt;domain&gt; xmlfile 　　给domain创建一个snapshot，详细内容保存在xmlfile中</span><br><span class="line">snapshot-current &lt;domain&gt; 　　　　　显示一个domain的当前的snapshot</span><br><span class="line">snapshot-list &lt;domain&gt;　　　　　　　　 显示一个domain的所有的snapshot</span><br><span class="line">snapshot-revert &lt;domain&gt; snapshot 　　    恢复一个domian到以前的snapshot</span><br><span class="line">snapshot-delete &lt;domain&gt; snapshot --children   删除一个domain的snapshot</span><br></pre></td></tr></table></figure><p>如何用<strong>libvirt</strong>远程管理虚拟机？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">要用libvirt连接到超级管理程序，我们需要一个URI，这个URI配合virsh和virt-viewer命令使用，后面可以跟一些可选项，virt-viewer可以调用一些链接参数，例如：virsh -c qemu:///system 当链接到远程机器时，可以定义几种使用的协议：ssh，tcp，tls。当链接到远程机器时，需要使用远程主机的用户和主机名进行链接，如果没有定义链接用户，则会使用本机环境的<span class="variable">$USER</span>的用户进行链接，当连接到qemu hypervisor时，接受两种链接类型：system可以有所有的访问权限，session有限制的访问。例如：</span><br><span class="line"></span><br><span class="line">使用full access链接至本机的qemu hypervisor，前面的-c 是为了执行后面的list命令(--connect)</span><br><span class="line">virsh -c  qemu:///system list</span><br><span class="line"></span><br><span class="line">使用full access链接至远程主机的qemu hypervisor，每次都要输入ssh密码，改成ssh无密码登陆就不需要输入密码了，直接显示结果。</span><br><span class="line"></span><br><span class="line">　　virsh -c qemu+ssh://tux@mercur/system   直接进入交互virsh模式</span><br><span class="line"></span><br><span class="line">　　virsh -c qemu+ssh://<span class="number">10.1</span>.<span class="number">1.8</span>/system list   直接显示list后的结果</span><br><span class="line"></span><br><span class="line">　　其余连接格式如下：</span><br><span class="line">　　qemu:///session                      (local access to per-user instance)</span><br><span class="line">　　qemu+unix:///session                 (local access to per-user instance)</span><br><span class="line">　　qemu:///system                       (local access to system instance)</span><br><span class="line">　　qemu+unix:///system                  (local access to system instance)</span><br><span class="line">　　qemu://example.com/system            (remote access, TLS/x509)　　</span><br><span class="line">　　qemu+tcp://example.com/system        (remote access, SASl/Kerberos)</span><br><span class="line">　　qemu+ssh:///system   (remote access, SSH tunnelled)</span><br></pre></td></tr></table></figure><h3 id="使用libvirt创建kvm虚拟机："><a href="#使用libvirt创建kvm虚拟机：" class="headerlink" title="使用libvirt创建kvm虚拟机："></a>使用libvirt创建kvm虚拟机：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、制作虚拟机镜像</span><br><span class="line">qemu-img create -f qcow2 test.qcow2 <span class="number">10</span>G //格式，名字，大小</span><br><span class="line"><span class="number">2</span>、下载并复制iso镜像到指定目录（在第<span class="number">3</span>步中创建xml文件中指定）</span><br><span class="line"><span class="number">3</span>、创建安装配置文件，demo.xml如下，可以根据自己需求更改</span><br><span class="line">virsh define  demo.xml　　　　//创建虚拟机</span><br><span class="line">virsh  start    test_ubuntu 　　//启动虚拟机</span><br><span class="line">virsh  vncdisplay   test_ubuntu   ////查看虚拟机的vnc端口， 然后就可以通过vnc登录来完成虚拟机的安装</span><br></pre></td></tr></table></figure><p>demo.xml 内容如下 默认路径在/etc/libvirt/qemu</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain type=<span class="string">'kvm'</span>&gt;</span><br><span class="line">        &lt;name&gt;test_ubuntu&lt;/name&gt; //虚拟机名称</span><br><span class="line">        &lt;memory&gt;<span class="number">1048576</span>&lt;/memory&gt; //最大内存，单位k</span><br><span class="line">        &lt;currentMemory&gt;<span class="number">1048576</span>&lt;/currentMemory&gt; //可用内存，单位k</span><br><span class="line">        &lt;vcpu&gt;<span class="number">8</span>&lt;/vcpu&gt; //虚拟cpu个数</span><br><span class="line">        &lt;os&gt;</span><br><span class="line">          &lt;type arch=<span class="string">'x86_64'</span> machine=<span class="string">'pc'</span>&gt;hvm&lt;/type&gt;</span><br><span class="line">          &lt;boot dev=<span class="string">'cdrom'</span>/&gt; //光盘启动</span><br><span class="line">       &lt;/os&gt;</span><br><span class="line">       &lt;features&gt;</span><br><span class="line">         &lt;acpi/&gt;</span><br><span class="line">         &lt;apic/&gt;</span><br><span class="line">         &lt;pae/&gt;</span><br><span class="line">       &lt;/features&gt;</span><br><span class="line">       &lt;clock offset=<span class="string">'localtime'</span>/&gt;</span><br><span class="line">       &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;</span><br><span class="line">       &lt;on_reboot&gt;restart&lt;/on_reboot&gt;</span><br><span class="line">       &lt;on_crash&gt;destroy&lt;/on_crash&gt;</span><br><span class="line">       &lt;devices&gt;</span><br><span class="line">         &lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;</span><br><span class="line">         &lt;disk type=<span class="string">'file'</span> device=<span class="string">'disk'</span>&gt;</span><br><span class="line">          &lt;driver name=<span class="string">'qemu'</span> type=<span class="string">'qcow2'</span>/&gt;</span><br><span class="line">           &lt;source file=<span class="string">'/var/lib/libvirt/images/test.qcow2'</span>/&gt; //目的镜像路径</span><br><span class="line">           &lt;target dev=<span class="string">'hda'</span> bus=<span class="string">'ide'</span>/&gt;</span><br><span class="line">         &lt;/disk&gt;</span><br><span class="line">         &lt;disk type=<span class="string">'file'</span> device=<span class="string">'cdrom'</span>&gt;</span><br><span class="line">           &lt;source file=<span class="string">'/var/lib/libvirt/images/ubuntu.iso'</span>/&gt; //光盘镜像路径</span><br><span class="line">           &lt;target dev=<span class="string">'hdb'</span> bus=<span class="string">'ide'</span>/&gt;</span><br><span class="line">         &lt;/disk&gt;</span><br><span class="line">        &lt;interface type=<span class="string">'bridge'</span>&gt; //虚拟机网络连接方式</span><br><span class="line">          &lt;source bridge=<span class="string">'kvmbr0'</span>/&gt; //当前主机网桥的名称</span><br><span class="line">          &lt;mac address=<span class="string">"00:16:3e:5d:aa:a8"</span>/&gt; </span><br><span class="line">          //为虚拟机分配mac地址，务必唯一，否则dhcp获得同样ip,引起冲突</span><br><span class="line">         &lt;/interface&gt;</span><br><span class="line">         &lt;input type=<span class="string">'mouse'</span> bus=<span class="string">'ps2'</span>/&gt;</span><br><span class="line">          &lt;graphics type=<span class="string">'vnc'</span> port=<span class="string">'-1'</span> autoport=<span class="string">'yes'</span> listen = <span class="string">'0.0.0.0'</span> keymap=<span class="string">'en-us'</span>/&gt;</span><br><span class="line">          //vnc方式登录，端口号自动分配，自动加<span class="number">1</span>，可以通过virsh vncdisplay来查询</span><br><span class="line">        &lt;/devices&gt;</span><br><span class="line">      &lt;/domain&gt;</span><br></pre></td></tr></table></figure><h3 id="使用virsh-install安装虚机命令"><a href="#使用virsh-install安装虚机命令" class="headerlink" title="使用virsh-install安装虚机命令"></a>使用virsh-install安装虚机命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install \ --name=guest1-rhel5-<span class="number">64</span> \ --file=/var/lib/libvirt/images/guest1-rhel5-<span class="number">64</span>.dsk \ --file-size=<span class="number">8</span> \ --nonsparse --graphics spice \ --vcpus=<span class="number">2</span> --ram=<span class="number">2048</span> \ --location=http://example1.com/installation_tree/RHEL5.<span class="number">6</span>-Serverx86_64/os \ --network bridge=br0 \ --os-type=linux \ --os-variant=rhel5.<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="使用-qemu-img-和-qemu-kvm-命令行方式安装"><a href="#使用-qemu-img-和-qemu-kvm-命令行方式安装" class="headerlink" title="使用 qemu-img 和 qemu-kvm 命令行方式安装"></a>使用 qemu-img 和 qemu-kvm 命令行方式安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）创建一个空的qcow2格式的镜像文件</span><br><span class="line">qemu-img create -f qcow2 windows-master.qcow2 <span class="number">10</span>G</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）启动一个虚机，将系统安装盘挂到 cdrom，安装操作系统</span><br><span class="line">qemu-kvm  -hda  windows-master.qcow2  -m <span class="number">512</span> -boot d  -cdrom /home/user/isos/en_winxp_pro_with_sp2.iso</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）现在你就拥有了一个带操作系统的镜像文件。你可以以它为模板创建新的镜像文件。使用模板的好处是，它会被设置为只读所以可以免于破坏。</span><br><span class="line">qemu-img create -b windows-master.qcow2 -f  qcow2   windows-clone.qcow2</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）你可以在新的镜像文件上启动虚机了</span><br><span class="line">qemu-kvm  -hda  windows-clone.qcow2  -m <span class="number">400</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h2 id=&quot;关于virsh相关命令&quot;&gt;&lt;a href=&quot;#关于virsh相关命令&quot; class=&quot;headerlink&quot; title=&quot;关于virsh
      
    
    </summary>
    
      <category term="kvm" scheme="http://www.python100.com/categories/kvm/"/>
    
    
  </entry>
  
  <entry>
    <title>VNC安装</title>
    <link href="http://www.python100.com/2018/07/24/VNC%E5%AE%89%E8%A3%85/"/>
    <id>http://www.python100.com/2018/07/24/VNC安装/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:16:10.446Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p>VNC安装</p><h2 id="安装在Centos7"><a href="#安装在Centos7" class="headerlink" title="安装在Centos7"></a>安装在Centos7</h2><p>1、安装的centos已经安装了GUI桌面系统</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装桌面版，安装有500M以上，有点慢</span></span><br><span class="line">yum groupinstall <span class="string">"GNOME Desktop"</span> <span class="string">"Graphical Administration Tools"</span>    </span><br><span class="line"><span class="comment">#默认使用图形化桌面启动,三种命令</span></span><br><span class="line">ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target    </span><br><span class="line">systemctl set-default runlevel5.target      </span><br><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><p>2、安装vncserver</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tigervnc-server</span><br></pre></td></tr></table></figure><p>3、启动并配置vncserver</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloud ~]<span class="comment"># vncserver </span></span><br><span class="line">[root@cloud ~]<span class="comment"># vncpasswd</span></span><br></pre></td></tr></table></figure><p>4、修改配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@cloud ~]<span class="comment"># cd /root/.vnc/</span></span><br><span class="line">[root@cloud .vnc]<span class="comment"># cat config </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Remote desktop service (VNC)</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root  <span class="comment">#设置远程连接用户为root</span></span><br><span class="line"><span class="comment"># Clean any existing files in /tmp/.X11-unix environment</span></span><br><span class="line"></span><br><span class="line">ExecStartPre=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这一句不要改变</span></span><br><span class="line">ExecStart=/usr/bin/vncserver :<span class="number">1</span> -geometry <span class="number">1280</span>x1024 -depth <span class="number">16</span> -securitytypes=none -fp /usr/share/X11/fonts/misc</span><br><span class="line"></span><br><span class="line">PIDFile=/root/.vnc/%H%i.pid</span><br><span class="line"></span><br><span class="line">ExecStop=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>5、修改完后启动 vncserver-1</p><p>[root@cloud system]# systemctl start vncserver@\:1.service</p><p>6、然后使用vncviewer，输入IP:5901就可以连接到虚机了</p><h2 id="安装在win10"><a href="#安装在win10" class="headerlink" title="安装在win10"></a>安装在win10</h2><p>下载server和viewer两个版本，都分别安装</p><p><a href="https://www.xp510.com/xiazai/Networking/mstsc/23862.html" target="_blank" rel="noopener">https://www.xp510.com/xiazai/Networking/mstsc/23862.html</a></p><p>server配置：</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;VNC安装&lt;/p&gt;&lt;h2 id=&quot;安装在Centos7&quot;&gt;&lt;a href=&quot;#安装在Centos7&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客next主题设计</title>
    <link href="http://www.python100.com/2018/07/24/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.python100.com/2018/07/24/hexo博客next主题设计/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T10:42:04.049Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><h2 id="hexo博客next主题设计"><a href="#hexo博客next主题设计" class="headerlink" title="hexo博客next主题设计"></a>hexo博客next主题设计</h2><p>参考文章：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><h3 id="一、新增访客统计及网站字数统计"><a href="#一、新增访客统计及网站字数统计" class="headerlink" title="一、新增访客统计及网站字数统计"></a>一、新增访客统计及网站字数统计</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、安装依赖包，切换到博客根目录，打开Git Bash，输入以下代码安装字数统计包</span><br><span class="line">npm install hexo-wordcount --save</span><br><span class="line"><span class="number">2</span>、打开文件：themes/next/layout/_partials/footer.swig,输入以下代码后保存退出。</span><br><span class="line"></span><br><span class="line">&lt;!-- 新增访客统计代码 --&gt;</span><br><span class="line">&lt;div class=<span class="string">"copyright"</span> &gt;</span><br><span class="line">  &#123;% set current = date(Date.now(), <span class="string">"YYYY"</span>) %&#125;</span><br><span class="line">  &amp;copy; &#123;% <span class="keyword">if</span> theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; - &#123;% endif %&#125;</span><br><span class="line">  &lt;span itemprop=<span class="string">"copyrightYear"</span>&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=<span class="string">"with-love"</span>&gt;</span><br><span class="line">    &lt;i class=<span class="string">"fa fa-balance-scale"</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=<span class="string">"author"</span> itemprop=<span class="string">"copyrightHolder"</span>&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"busuanzi-count"</span>&gt;</span><br><span class="line">    &lt;script async=<span class="string">""</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-uv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt;</span><br><span class="line">      访问用户： &lt;span class=<span class="string">"busuanzi-value"</span> id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt; 人</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;div class=<span class="string">"powered-by"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-uv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt;</span><br><span class="line">      访问次数： &lt;span class=<span class="string">"busuanzi-value"</span> id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt; 次</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;!-- 博客字数统计 --&gt;</span><br><span class="line">    &lt;span class=<span class="string">"site-pv"</span>&gt;</span><br><span class="line">      &lt;i class=<span class="string">"fa fa-pencil"</span>&gt;&lt;/i&gt;</span><br><span class="line">      博客全站共： &lt;span class=<span class="string">"post-count"</span>&gt;&#123;&#123; totalcount(site) &#125;&#125;&lt;/span&gt; 字</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 新增访客统计代码 END--&gt;</span><br></pre></td></tr></table></figure><h3 id="二、next主题如何添加动态背景"><a href="#二、next主题如何添加动态背景" class="headerlink" title="二、next主题如何添加动态背景"></a>二、next主题如何添加动态背景</h3><h5 id="注意：如果next主题在5-1-1以上的话就不用我这样设置，直接在主题配置文件中找到canvas-nest-false，把它改为canvas-nest-true就行了（注意分号后面要加一个空格）"><a href="#注意：如果next主题在5-1-1以上的话就不用我这样设置，直接在主题配置文件中找到canvas-nest-false，把它改为canvas-nest-true就行了（注意分号后面要加一个空格）" class="headerlink" title="注意：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）"></a><strong>注意</strong>：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）</h5><h5 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改<code>_layout.swig</code></h5><p>打开 <code>next/layout/_layout.swig</code><br>在 <code>&lt; /body&gt;</code>之前添加代码(注意不要放在&lt; /head&gt;的后面)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>打开 <code>/next/_config.yml</code>,在里面添加如下代码：(可以放在最后面)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><p>到此就结束了，运行 <code>hexo clean</code>，然后运行 <code>hexo g</code>,然后运行 <code>hexo s</code>，最后打开浏览器在浏览器的地址栏输入 <code>localhost:4000</code> 就能看到效果了\（￣︶￣）/</p><h5 id="如果你感觉默认的线条太多的话"><a href="#如果你感觉默认的线条太多的话" class="headerlink" title="如果你感觉默认的线条太多的话"></a>如果你感觉默认的线条太多的话</h5><h5 id="可以这么设置-gt"><a href="#可以这么设置-gt" class="headerlink" title="可以这么设置====&gt;"></a>可以这么设置====&gt;</h5><p>在上一步修改 <code>_layout.swig</code>中，把刚才的这些代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"0,0,255"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"99"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>color</code> ：线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>: 线条的总数量, 默认: <code>150</code></li><li><code>zIndex:</code> 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li></ul><h3 id="三、然hexo内的markdown文件显示文件"><a href="#三、然hexo内的markdown文件显示文件" class="headerlink" title="三、然hexo内的markdown文件显示文件"></a>三、然hexo内的markdown文件显示文件</h3><p>将网站根目录下的source文件夹下新建images目录，将需要的文件根据自己的需要在新建文件夹来保存图片，引用图片的格式为/images/img/1.jpg</p><p><img src="/images/img/img1.jpg" alt="img1"></p><h3 id="四、添加评论"><a href="#四、添加评论" class="headerlink" title="四、添加评论"></a>四、添加评论</h3><p>可以使用的评论系统有</p><ul><li><p>HyperComments：<a href="https://www.hypercomments.com/" target="_blank" rel="noopener">https://www.hypercomments.com</a> （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）</p></li><li><p>来必力：<a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com</a> （来自韩国，使用邮箱注册。）</p></li><li>畅言： <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com</a> （安装需要备案号。不太好用。）</li><li>Gitment： <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a> （有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）</li><li>Valine: <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> (基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）</li></ul><p>综上，最终采用了来必力。</p><p>打开来必力官网：<br><a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com</a></p><p>按套路注册（有可能注册上面要花费点功夫）。（貌似需要科学上网？之前没科学上网好像登录界面显示不了）。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>点击上方的安装，选择免费的city版本。 获取UUID</p><p><img src="/images/img/来必力.jpg" alt="11"></p><p>复制其中的uid字段。</p><p>打开主题目录下的 <code>blog/themes/next/_config.yml</code> 配置文件，定位到 <code>livere_uid</code> 字段，粘贴上刚刚复制的UID。至此，大功告成。</p><p>五、添加打赏功能</p><p>六、添加本地搜索</p><ul><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><p>$ npm install hexo-generator-searchdb –save</p></li><li><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;h2 id=&quot;hexo博客next主题设计&quot;&gt;&lt;a href=&quot;#hexo博客next主题设计&quot; class=&quot;headerlink&quot; title=&quot;h
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.python100.com/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>cloudstack管理节点安装参考</title>
    <link href="http://www.python100.com/2018/07/24/cloudstack%E7%AE%A1%E7%90%86%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/"/>
    <id>http://www.python100.com/2018/07/24/cloudstack管理节点安装/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:14:48.263Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p>参考文档：</p><p><a href="https://www.ibm.com/developerworks/cn/cloud/library/1303_chenyz_cloudstack/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/cloud/library/1303_chenyz_cloudstack/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;参考文档：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/cloud/library/1
      
    
    </summary>
    
      <category term="cloudstack" scheme="http://www.python100.com/categories/cloudstack/"/>
    
    
      <category term="cloudstack" scheme="http://www.python100.com/tags/cloudstack/"/>
    
  </entry>
  
  <entry>
    <title>cloudstack安装</title>
    <link href="http://www.python100.com/2018/07/24/cloudstack%E6%96%87%E6%A1%A3/"/>
    <id>http://www.python100.com/2018/07/24/cloudstack文档/</id>
    <published>2018-07-24T05:11:00.000Z</published>
    <updated>2018-07-24T05:13:58.490Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --><hr><p>cloudstack安装</p><p><a href="http://developer.huawei.com/ict/forum/thread-23211.html" target="_blank" rel="noopener">http://developer.huawei.com/ict/forum/thread-23211.html</a></p><p><a href="https://blog.csdn.net/chengxuyuanyonghu/article/details/78847656" target="_blank" rel="noopener">https://blog.csdn.net/chengxuyuanyonghu/article/details/78847656</a></p><p><a href="https://blog.csdn.net/hejin_some/article/details/72673192" target="_blank" rel="noopener">https://blog.csdn.net/hejin_some/article/details/72673192</a></p><p><a href="https://blog.csdn.net/hzhsan/article/details/44098537/" target="_blank" rel="noopener">https://blog.csdn.net/hzhsan/article/details/44098537/</a> kvm网络</p><p>virt-install –virt-type=kvm –name=centos88 –vcpus=2 –memory=4096 –location=/tmp/CentOS-7-x86_64-Minimal-1511.iso –disk path=/home/vms/centos88.qcow2,size=40,format=qcow2 –network bridge=br0 –graphics none –extra-args=’console=ttyS0’ –force</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --connect qemu:///system --name centos7 --memory=<span class="number">1024</span> --vcpus=<span class="number">2</span> --disk path=/<span class="keyword">data</span>/secondary/kali.qcow2,device=disk,format=qcow2,bus=virtio,cache=none,size=<span class="number">5</span> --cdrom /tmp/CentOS-<span class="number">7</span>-x86_64-DVD-<span class="number">1804</span>.iso  --os-type=linux --network bridge=br0,model=virtio,model=e1000 --hvm --virt-type=kvm --noautoconsole --graphics vnc,listen=<span class="number">0.0</span>.<span class="number">0.0</span>,port=<span class="number">5901</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --virt-type=kvm --name=centos88 --vcpus=<span class="number">2</span> --memory=<span class="number">1024</span> --location=/tmp/CentOS-<span class="number">7</span>-x86_64-DVD-<span class="number">1804</span>.iso  --disk path=/<span class="keyword">data</span>/secondary/kali.qcow2,size=<span class="number">6</span>,format=qcow2 --network bridge=br0 --graphics none --extra-args=<span class="string">'console=ttyS0'</span> --force</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 26 2018 14:00:56 GMT+0800 (CST) --&gt;&lt;hr&gt;&lt;p&gt;cloudstack安装&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://developer.huawei.com/ict/forum/thread-2
      
    
    </summary>
    
      <category term="cloudstack" scheme="http://www.python100.com/categories/cloudstack/"/>
    
    
      <category term="cloudstack" scheme="http://www.python100.com/tags/cloudstack/"/>
    
  </entry>
  
</feed>
