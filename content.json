{"meta":{"title":"乘风破浪","subtitle":null,"description":null,"author":"chen","url":"http://www.python100.com"},"pages":[{"title":"commonweal","date":"2018-07-24T05:49:45.000Z","updated":"2018-07-24T05:49:45.855Z","comments":true,"path":"404/index.html","permalink":"http://www.python100.com/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-07-13T08:55:27.000Z","updated":"2018-07-13T08:57:25.640Z","comments":true,"path":"categories/index.html","permalink":"http://www.python100.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-06-15T05:05:00.782Z","updated":"2018-06-15T02:18:29.429Z","comments":false,"path":"repository/index.html","permalink":"http://www.python100.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-13T08:55:16.000Z","updated":"2018-07-13T08:57:45.320Z","comments":true,"path":"tags/index.html","permalink":"http://www.python100.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-24T05:53:00.061Z","updated":"2018-07-24T05:41:40.906Z","comments":true,"path":"404/index/404.html","permalink":"http://www.python100.com/404/index/404.html","excerpt":"","text":""}],"posts":[{"title":"VNC安装","slug":"VNC安装","date":"2018-07-24T05:11:00.000Z","updated":"2018-07-24T05:16:10.446Z","comments":true,"path":"2018/07/24/VNC安装/","link":"","permalink":"http://www.python100.com/2018/07/24/VNC安装/","excerpt":"","text":"VNC安装安装在Centos71、安装的centos已经安装了GUI桌面系统123456#安装桌面版，安装有500M以上，有点慢yum groupinstall \"GNOME Desktop\" \"Graphical Administration Tools\" #默认使用图形化桌面启动,三种命令ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target systemctl set-default runlevel5.target systemctl set-default graphical.target2、安装vncserver1yum -y install tigervnc-server3、启动并配置vncserver12[root@cloud ~]# vncserver [root@cloud ~]# vncpasswd4、修改配置文件12345678910111213141516171819202122[root@cloud ~]# cd /root/.vnc/[root@cloud .vnc]# cat config [Unit]Description=Remote desktop service (VNC)After=syslog.target network.target[Service]Type=forkingUser=root #设置远程连接用户为root# Clean any existing files in /tmp/.X11-unix environmentExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'#这一句不要改变ExecStart=/usr/bin/vncserver :1 -geometry 1280x1024 -depth 16 -securitytypes=none -fp /usr/share/X11/fonts/miscPIDFile=/root/.vnc/%H%i.pidExecStop=/bin/sh -c '/usr/bin/vncserver -kill 1 &gt; /dev/null 2&gt;&amp;1 || :'[Install]WantedBy=multi-user.target5、修改完后启动 vncserver-1[root@cloud system]# systemctl start vncserver@\\:1.service6、然后使用vncviewer，输入IP:5901就可以连接到虚机了安装在win10下载server和viewer两个版本，都分别安装https://www.xp510.com/xiazai/Networking/mstsc/23862.htmlserver配置：","categories":[],"tags":[]},{"title":"cloudstack-概念","slug":"cloudstack-概念","date":"2018-07-24T05:11:00.000Z","updated":"2018-07-24T05:13:04.474Z","comments":true,"path":"2018/07/24/cloudstack-概念/","link":"","permalink":"http://www.python100.com/2018/07/24/cloudstack-概念/","excerpt":"","text":"CloudStack是一个开源的具有高可用性及扩展性的云计算平台 ，现在又Apache基金会在管理。云计算的三种服务模式123SAAS：软件即服务PAAS：平台即服务IAAS：基础架构即服务区域(Zone)：1区域可以理解为一个数据中心或机房，是逻辑范围最大的组成单元。由一组POD、二级存储、及网络架构组成。区域只能选择一中网络架构。区域间是相互独立的，如需要通信，只能在网络配置打通区域的公有网络。区域之间只能复制ISO和模板，虚拟机不能进行区域之间的迁移工作，如需要，可将虚机转换成模板，再复制到另一个区域。创建时，可以选择该区域是公共区域，还是只对某组用户的私有区域。提供点（POD）1可理解为一个物理机架，包括交换机、服务器和存储。所以提供点内的计算服务器，系统虚机都在同一个子网中集群（cluster）1最小的逻辑组织单元，由一组计算服务器及一个或多个主存储组成， 同一个集群内的服务器必须使用相同的虚拟化管理程序，硬件型号也必须相同。集群内的虚拟机可以在集群内的不同主机之间实现动态迁移。集群内可以添加多个作为共享存储所使用的主存储计算节点（HOST) 就是运行虚拟机（VM）的主机主存储 (一级存储)12一般作为每个集群多台计算服务器共同使用的共享存储存在。一个集群中可以有一个或多个不同类型的存储。主存储用于存储所有虚拟机内数据的镜像文件和数据卷文件。分为共享存储和本地存储。使用共享存储可以实现虚机的在线迁移。一级存储与 cluster 关联，它为该 cluster 中的主机的全部虚拟机提供磁盘卷。一个 cluster 至少有一个一级存储，且在部署时位置要临近主机以提供高性能。二级存储12每个区域只需要一个二级存储，用于存放创建虚拟所使用的ISO镜像文件、模板文件，以及对虚机所做的快照和卷备份文件。这些都是占用空间大、读写频率低的数据文件(冷数据),并不是关键数据，使用配置不高、最简单的NFS来存储就够了。二级存储与 zone 关联，它存储模板文件，ISO 镜像和磁盘卷快照。一个 zone 包含多个 pod，一个 pod 包含多个 cluster，一个 cluster 包含多个 host123模板：可以启动虚拟机的操作系统镜像，也包括了诸如已安装应用的其余配置信息。ISO 镜像：包含操作系统数据或启动媒质的磁盘镜像。磁盘卷快照：虚拟机数据的已储存副本，能用于数据恢复或者创建新模板。123一个完整的 CloudStack 环境包括两部分： 管理服务器（Management Server） 虚拟机管理器 (Hypervisor) 也叫主机host或者代理agent虚拟机实例的动态迁移12静态迁移：在虚拟机关机或暂停的情况下从一台物理机迁移到另一台物理机动态迁移：让虚拟机在不关机且能持续提供服务的前提下，从一个虚拟平台的主机（Host）迁移到其他虚拟平台的主机上运行，中间仅有非常短暂的停机时间，普通用户无法对自己的虚拟机进行动态迁移，只有管理员可以。虚拟机实例的动态迁移只能在同一集群中进安全组1安全组相当于在虚拟机实例的操作系统之外部署了一道防火墙，每个CloudStack账户都会生成一个默认安全组，该组默认拒绝所有流入流量和允许所有流出流量。一个用户可以创建多个安全组，一个安全组可以应用到多个虚拟机实例上，一个虚拟机实例也可以使用多个安全组。一个安全组相当于一条或多条防火墙规则。虚拟机实例在创建时可以选择多个安全组，选择后不可以加入或退出其他安全组高级网络功能12345678910111213141516171819202122232425虚拟路由器本质上一个运行Debian 7.0的虚拟机实例，提供了各种高级网络管理功能。1、防火墙（不能基于账户进行策略指定，也不能设定出口规则） 不能基于账户进行策略指定，也不能设定出口规则 默认可以访问外部服务，但外部服务不能访问虚拟机实例2、负载均衡 负载均衡有工作在二层，三层，四层和七层的负载均衡 可以通过集群的方式来保证高可用 CloudStack的负载均衡是通过在虚拟路由器里使用HAProxy实现的 轮询算法：根据用户的请求依次将请求转发给内部的应用服务器 最少连接算法：把当前请求分配给连接数最少的应用服务器 源算法：尽量保证始终来自同一个客户端的请求分发给同一个应用服务器，适用于不使用Cookie的Web应用 要使用负载均衡，前端的负载均衡器需要为该服务配置一个服务IP地址，服务地址用于接收用户的请求。 公用端口用于接收用户外部的请求，专用端口指虚拟机提供服务的端口3、静态NAT：将内外的私有IP转换为公有IP（1对1）4、端口转发：把访问A服务器某端口的数据转发到B服务器的某端口中5、VPN VPN可以使用户安全，方便地访问一个虚拟网络内的所有虚拟机 默认情况下，防火墙信任VPN拨入者6、VPC：Virtual Private Cloud 从整体网络中分割出来的一个逻辑隔离的网络，在该虚拟网络中，用户具有完全的控制权7、冗余路由 使用多个路由来防止单点故障时导致内部网络不能与外部网络通信的问题 冗余路由组共用一个内网IP（网关）和一个外网IP 提供冗余功能的两天虚拟路由器应尽量运行在不同物理主机上","categories":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/categories/cloudstack/"}],"tags":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/tags/cloudstack/"}]},{"title":"cloudstack安装","slug":"cloudstack文档","date":"2018-07-24T05:11:00.000Z","updated":"2018-07-24T05:13:58.490Z","comments":true,"path":"2018/07/24/cloudstack文档/","link":"","permalink":"http://www.python100.com/2018/07/24/cloudstack文档/","excerpt":"","text":"cloudstack安装http://developer.huawei.com/ict/forum/thread-23211.htmlhttps://blog.csdn.net/chengxuyuanyonghu/article/details/78847656https://blog.csdn.net/hejin_some/article/details/72673192https://blog.csdn.net/hzhsan/article/details/44098537/ kvm网络virt-install –virt-type=kvm –name=centos88 –vcpus=2 –memory=4096 –location=/tmp/CentOS-7-x86_64-Minimal-1511.iso –disk path=/home/vms/centos88.qcow2,size=40,format=qcow2 –network bridge=br0 –graphics none –extra-args=’console=ttyS0’ –force1virt-install --connect qemu:///system --name centos7 --memory=1024 --vcpus=2 --disk path=/data/secondary/kali.qcow2,device=disk,format=qcow2,bus=virtio,cache=none,size=5 --cdrom /tmp/CentOS-7-x86_64-DVD-1804.iso --os-type=linux --network bridge=br0,model=virtio,model=e1000 --hvm --virt-type=kvm --noautoconsole --graphics vnc,listen=0.0.0.0,port=59011virt-install --virt-type=kvm --name=centos88 --vcpus=2 --memory=1024 --location=/tmp/CentOS-7-x86_64-DVD-1804.iso --disk path=/data/secondary/kali.qcow2,size=6,format=qcow2 --network bridge=br0 --graphics none --extra-args='console=ttyS0' --force","categories":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/categories/cloudstack/"}],"tags":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/tags/cloudstack/"}]},{"title":"cloudstack管理节点安装参考","slug":"cloudstack管理节点安装","date":"2018-07-24T05:11:00.000Z","updated":"2018-07-24T05:14:48.263Z","comments":true,"path":"2018/07/24/cloudstack管理节点安装/","link":"","permalink":"http://www.python100.com/2018/07/24/cloudstack管理节点安装/","excerpt":"","text":"参考文档：https://www.ibm.com/developerworks/cn/cloud/library/1303_chenyz_cloudstack/","categories":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/categories/cloudstack/"}],"tags":[{"name":"cloudstack","slug":"cloudstack","permalink":"http://www.python100.com/tags/cloudstack/"}]},{"title":"hexo博客next主题设计","slug":"hexo博客next主题设计","date":"2018-07-24T05:11:00.000Z","updated":"2018-07-24T06:06:18.181Z","comments":true,"path":"2018/07/24/hexo博客next主题设计/","link":"","permalink":"http://www.python100.com/2018/07/24/hexo博客next主题设计/","excerpt":"","text":"hexo博客next主题设计参考文章：http://theme-next.iissnan.com/getting-started.html一、新增访客统计及网站字数统计1234567891011121314151617181920212223242526272829303132331、安装依赖包，切换到博客根目录，打开Git Bash，输入以下代码安装字数统计包npm install hexo-wordcount --save2、打开文件：themes/next/layout/_partials/footer.swig,输入以下代码后保存退出。&lt;!-- 新增访客统计代码 --&gt;&lt;div class=\"copyright\" &gt; &#123;% set current = date(Date.now(), \"YYYY\") %&#125; &amp;copy; &#123;% if theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; - &#123;% endif %&#125; &lt;span itemprop=\"copyrightYear\"&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt; &lt;span class=\"with-love\"&gt; &lt;i class=\"fa fa-balance-scale\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=\"author\" itemprop=\"copyrightHolder\"&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=\"busuanzi-count\"&gt; &lt;script async=\"\" src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; &lt;span class=\"site-uv\"&gt; &lt;i class=\"fa fa-user\"&gt;&lt;/i&gt; 访问用户： &lt;span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt; 人 &lt;/span&gt; &lt;div class=\"powered-by\"&gt;&lt;/div&gt; &lt;span class=\"site-uv\"&gt; &lt;i class=\"fa fa-eye\"&gt;&lt;/i&gt; 访问次数： &lt;span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt; 次 &lt;/span&gt; &lt;!-- 博客字数统计 --&gt; &lt;span class=\"site-pv\"&gt; &lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt; 博客全站共： &lt;span class=\"post-count\"&gt;&#123;&#123; totalcount(site) &#125;&#125;&lt;/span&gt; 字 &lt;/span&gt;&lt;/div&gt;&lt;!-- 新增访客统计代码 END--&gt;二、next主题如何添加动态背景注意：如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）修改_layout.swig打开 next/layout/_layout.swig在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)123&#123;% if theme.canvas_nest %&#125;&lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;修改配置文件打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面)123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https://github.com/hustcc/canvas-nest.jscanvas_nest: true到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\\（￣︶￣）/如果你感觉默认的线条太多的话可以这么设置====&gt;在上一步修改 _layout.swig中，把刚才的这些代码：123&#123;% if theme.canvas_nest %&#125;&lt;script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;改为1234&#123;% if theme.canvas_nest %&#125;&lt;script type=\"text/javascript\"color=\"0,0,255\" opacity='0.7' zIndex=\"-2\" count=\"99\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"&gt;&lt;/script&gt;&#123;% endif %&#125;color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B)opacity: 线条透明度（0~1）, 默认: 0.5count: 线条的总数量, 默认: 150zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1三、然hexo内的markdown文件显示文件将网站根目录下的source文件夹下新建images目录，将需要的文件根据自己的需要在新建文件夹来保存图片，引用图片的格式为/images/img/1.jpg四、添加评论可以使用的评论系统有HyperComments：https://www.hypercomments.com （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）来必力：https://livere.com （来自韩国，使用邮箱注册。）畅言： http://changyan.kuaizhan.com （安装需要备案号。不太好用。）Gitment： https://github.com/imsun/gitment （有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）Valine: https://github.com/xCss/Valine (基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）综上，最终采用了来必力。打开来必力官网：https://livere.com按套路注册（有可能注册上面要花费点功夫）。（貌似需要科学上网？之前没科学上网好像登录界面显示不了）。安装点击上方的安装，选择免费的city版本。 获取UUID复制其中的uid字段。打开主题目录下的 blog/themes/next/_config.yml 配置文件，定位到 livere_uid 字段，粘贴上刚刚复制的UID。至此，大功告成。五、添加打赏功能六、添加本地搜索安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb –save编辑 站点配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000编辑 主题配置文件，启用本地搜索功能：123# Local searchlocal_search: enable: true","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.python100.com/categories/hexo/"}],"tags":[]},{"title":"进程线程","slug":"进程线程","date":"2018-07-03T14:19:00.000Z","updated":"2018-07-13T09:08:17.628Z","comments":true,"path":"2018/07/03/进程线程/","link":"","permalink":"http://www.python100.com/2018/07/03/进程线程/","excerpt":"","text":"进程、线程、多线程相关总结一、说说概念1、进程（process）狭义定义：进程就是一段程序的执行过程。广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。简单的来讲进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。进程状态：进程有三个状态，就绪、运行和阻塞。就绪状态其实就是获取了出cpu外的所有资源，只要处理器分配资源就可以马上执行。就绪状态有排队序列什么的，排队原则不再赘述。运行态就是获得了处理器分配的资源，程序开始执行。阻塞态，当程序条件不够时候，需要等待条件满足时候才能执行，如等待i/o操作时候，此刻的状态就叫阻塞态。2、程序说起进程，就不得不说下程序。先看定义：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。而进程则是在处理机上的一次执行过程，它是一个动态的概念。这个不难理解，其实进程是包含程序的，进程的执行离不开程序，进程中的文本区域就是代码区，也就是程序。3、线程通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。4、多线程在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。二、说说区别1、进程与线程的区别：进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.2) 线程的划分尺度小于进程，使得多线程程序的并发性高。3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。三、说说优缺点线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP(多核处理机)机器上运行，而进程则可以跨机器迁移。四、总结入职第一天闲的无聊，参考下别人的总结自己也简单总结了下。知道以上的基本面试够用了，至于进程、线程的细节，底层构成，调度等问题是操作系统的东西。我就不详述了。五、实例1、多线程写日志，涉及到单例模式，异步写","categories":[{"name":"进程线程","slug":"进程线程","permalink":"http://www.python100.com/categories/进程线程/"}],"tags":[]},{"title":"git和markdown使用总结","slug":"git和markdown使用总结","date":"2018-06-20T18:36:00.000Z","updated":"2018-07-24T04:42:20.913Z","comments":true,"path":"2018/06/21/git和markdown使用总结/","link":"","permalink":"http://www.python100.com/2018/06/21/git和markdown使用总结/","excerpt":"","text":"git 上传更新代码步骤- git pull #先拉取最新代码 - 将自己的写好的代码放入到相应的文件夹下，比如op/issues - 如果有图片将对应的图片也复制到当前目录下的img下 - git add 自己加入到的文件和图片 - git commit 自己加入和文件和图片 -m message - 这里如果不加-m message 选项可能会push不成功，最好加上 - git push #上传自己新加的文件到GitHub markdown语法总结- 图片方法一： - 加入图片，格式是 ![]() - 其中的[]中的内容可以自定义，比如[log] - ()中写使用该图片的文件相对图片的相对路径 方法二： &lt;img src=&quot;images/img/1.jpg&quot; width=256 height=256 /&gt; 图片引用方法一实例此时img文件夹和当前文档在同一级目录下 ![1](/images/img/1.jpg) ![2](/images/img/2.jpg) 图片引用方法二实例，可以控制图片大小&lt;img src=&quot;/images/img/1.jpg&quot; width=256 height=256 /&gt; &lt;img src=&quot;/images/img/2.jpg&quot; width=256 height=256 /&gt; 让图片居中的方法，使用div标签&lt;div align=center&gt; &lt;img src=&quot;/images/img/1.jpg&quot; width=256 height=256 /&gt; &lt;/div&gt; - 斜体- 用左右各一个 *的方式包裹住文字就是斜体的语法 - 粗体- 用左右各两个**的方式包裹住文字就是粗体的语法 - 改变字体大小- 一个字、一句话、一个段落加上#就可以改变字体的大小 - 分割线- 输入三个--就可以得到分割线 - 引用-在内容首位加入&gt;符号即可 - 表格1、 原生的表格语法 | 嘻嘻 | 哈哈 | 呵呵 | :------------- :|:-------------:| :-----:| | 你好|我好|大家好 | | 是的| 是的 | 是的 | 2、 也可以使用html语言来实现，实例如下 &lt;table&gt; &lt;tr&gt; &lt;th width=10%, bgcolor=yellow &gt;参数&lt;/th&gt; &lt;th width=40%, bgcolor=yellow&gt;详细解释&lt;/th&gt; &lt;th width=50%, bgcolor=yellow&gt;备注&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor=#eeeeee&gt; -l &lt;/td&gt; &lt;td&gt; use a long listing format &lt;/td&gt; &lt;td&gt; 以长列表方式显示（显示出文件/文件夹详细信息） &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor=#00FF00&gt;-t &lt;/td&gt; &lt;td&gt; sort by modification time &lt;/td&gt; &lt;td&gt; 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） &lt;/td&gt; &lt;tr&gt; &lt;td bgcolor=rgb(0,10,0)&gt;-r &lt;/td&gt; &lt;td&gt; reverse order while sorting &lt;/td&gt; &lt;td&gt; 逆序排列 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; html方式实现表格实例参数详细解释备注-luse a long listing format以长列表方式显示（显示出文件/文件夹详细信息）-tsort by modification time按照修改时间排序（默认最近被修改的文件/文件夹排在最前面）-rreverse order while sorting逆序排列","categories":[],"tags":[{"name":"git&markdown语法","slug":"git-markdown语法","permalink":"http://www.python100.com/tags/git-markdown语法/"}]},{"title":"python笔记","slug":"笔记","date":"2018-06-20T18:36:00.000Z","updated":"2018-06-20T19:22:31.996Z","comments":true,"path":"2018/06/21/笔记/","link":"","permalink":"http://www.python100.com/2018/06/21/笔记/","excerpt":"","text":"1234567891011121314151617181920212223一个粗心的发报员在发送莫尔斯电码（Morse Code）的时候，忘记在发送字母和单词之间停顿，结果收报系统收到的是下面这样的一个没有分隔符的点（.）划（-）的序列（请忽略换行符）。已知这份报文的原始内容是一部著名英文小说的片段，请问，这部小说的作者是： (A) H. G. Wells(B) J. K. Rowling(C) Isaac Asimov(D) Lewis Carroll(E) Jack London(F) Stephen King(G) J. R. R. Tolkien(H) Edgar Rice Burroughs 请写出本题解题的主要思路，以及解题时使用的主要代码片段：123456789101112131415161715分钟1. 排序方式：DESC | ASCE，分别表示按降序和升序排列，大小写不敏感2. 一组十进制整数字符串，以&quot;,&quot;符号作为分隔符例子：DESC 789,123,456ASCE 234,567,89排序方式DESC ASCE请忽略大小写输出描述:按指定排序方式排序后得到的十进制整数字符串；输出的数字字符串数组，以&quot;,&quot;字符作为分隔符。示例1输入DESC 789,123,456输出789,456,123#Python Ruby C/C++ PHP Java1234567海投简历标准：1：头像：不要用真人的2：专业技能列表：多丰富一些 了解的也写上 敲门砖3：项目经验 看着写4：不要写培训面向对象对象是什么？：对象是一个模型IT行业 这就是一个对象C/C++，Python，PHP，Java 细节楼房：平房，四合院，公寓面：刀削面，牛肉丸子面，方便面为什么这些可以称作是一个模型？：有特征、有共同点把共同点组合起来，就可以抽象的总结出来一个模型那么这个模型就叫做对象classclass用来定义一个类(一个共同点的模型)：属性：函数：方法，人们喜欢把类中的函数叫方法变量：字符串，列表，元组，字典，集合类：一个属性集合实例：在内存里通过模型实例化创建的数据实例是一个容器一样，包含了所有类里的属性，而且是实际存在于内存中的实例化：通过类名括号的方式123class A: passa = A() # 实例化面向对象的语法中，我们可以通过xxx.xxxx来获取到对应的属性1234mylist = [1,2,3,4,5]mylist.remove(2)mylist[1, 3, 4, 5]Python中处处皆对象self指针的意义123456789101.self是一个将我们函数声明为单独为一个实例工作的参数2.每一个加了self的函数或者变量 都只能为自己的实例来工作 c1.run() c2.run() 3.在实例调用的时候，当前实例都会覆盖掉self4.self用来指向当前工作实例 self是约定俗称的命名，你也可以叫别的，但是一般都叫self#init12345678__init__函数为每一个实例进行数据的初始化工作 构造函数 X 数据初始化函数 √ 就是为了给实例创建属于自己的变量__init__函数在实例化过程中自动调用，不需要你手动的来调用__init__函数不允许有返回值，一旦有返回值，那么就报错啦 TypeError: __init__() should return None, not &apos;int&apos; 类型错误： 该函数必须返回一个None，而不是int郑州市金水区聚源路与宏图街交叉口聚源国际大厦1309","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.python100.com/tags/python/"}]}]}