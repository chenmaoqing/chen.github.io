{"meta":{"title":"乘风破浪","subtitle":null,"description":null,"author":"chen","url":"http://www.python100.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-06-20T19:46:03.000Z","updated":"2018-06-20T19:46:13.893Z","comments":false,"path":"/404.html","permalink":"http://www.python100.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-06-20T20:04:28.000Z","updated":"2018-07-13T09:09:10.587Z","comments":false,"path":"about/index.html","permalink":"http://www.python100.com/about/index.html","excerpt":"","text":"姓名 技能 陈茂青 docker,cloudstack,mongo"},{"title":"书单","date":"2018-06-15T05:04:58.633Z","updated":"2018-06-15T02:18:29.429Z","comments":false,"path":"books/index.html","permalink":"http://www.python100.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-07-13T08:55:27.000Z","updated":"2018-07-13T08:57:25.640Z","comments":true,"path":"categories/index.html","permalink":"http://www.python100.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-20T19:45:07.000Z","updated":"2018-06-20T20:10:44.557Z","comments":true,"path":"links/index.html","permalink":"http://www.python100.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-06-15T05:05:00.782Z","updated":"2018-06-15T02:18:29.429Z","comments":false,"path":"repository/index.html","permalink":"http://www.python100.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-13T08:55:16.000Z","updated":"2018-07-13T08:57:45.320Z","comments":true,"path":"tags/index.html","permalink":"http://www.python100.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"进程线程","slug":"进程线程","date":"2018-07-03T14:19:00.000Z","updated":"2018-07-13T09:08:17.628Z","comments":true,"path":"2018/07/03/进程线程/","link":"","permalink":"http://www.python100.com/2018/07/03/进程线程/","excerpt":"","text":"进程、线程、多线程相关总结 一、说说概念 1、进程（process） 狭义定义：进程就是一段程序的执行过程。 广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。 简单的来讲进程的概念主要有两点：第一，进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量。第二，进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。 进程状态：进程有三个状态，就绪、运行和阻塞。就绪状态其实就是获取了出cpu外的所有资源，只要处理器分配资源就可以马上执行。就绪状态有排队序列什么的，排队原则不再赘述。运行态就是获得了处理器分配的资源，程序开始执行。阻塞态，当程序条件不够时候，需要等待条件满足时候才能执行，如等待i/o操作时候，此刻的状态就叫阻塞态。 2、程序 说起进程，就不得不说下程序。先看定义：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。而进程则是在处理机上的一次执行过程，它是一个动态的概念。这个不难理解，其实进程是包含程序的，进程的执行离不开程序，进程中的文本区域就是代码区，也就是程序。 3、线程 通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。 4、多线程 在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理”。多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。 最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。 二、说说区别 1、进程与线程的区别： 进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。 1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程. 2) 线程的划分尺度小于进程，使得多线程程序的并发性高。 3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。 三、说说优缺点 线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP(多核处理机)机器上运行，而进程则可以跨机器迁移。 四、总结 入职第一天闲的无聊，参考下别人的总结自己也简单总结了下。知道以上的基本面试够用了，至于进程、线程的细节，底层构成，调度等问题是操作系统的东西。我就不详述了。 五、实例 1、多线程写日志，涉及到单例模式，异步写","categories":[{"name":"进程线程","slug":"进程线程","permalink":"http://www.python100.com/categories/进程线程/"}],"tags":[]},{"title":"git和markdown使用总结","slug":"git和markdown使用总结","date":"2018-06-20T18:36:00.000Z","updated":"2018-06-20T19:44:05.497Z","comments":true,"path":"2018/06/21/git和markdown使用总结/","link":"","permalink":"http://www.python100.com/2018/06/21/git和markdown使用总结/","excerpt":"","text":"git 上传更新代码步骤- git pull #先拉取最新代码 - 将自己的写好的代码放入到相应的文件夹下，比如op/issues - 如果有图片将对应的图片也复制到当前目录下的img下 - git add 自己加入到的文件和图片 - git commit 自己加入和文件和图片 -m message - 这里如果不加-m message 选项可能会push不成功，最好加上 - git push #上传自己新加的文件到GitHub markdown语法总结- 图片方法一： - 加入图片，格式是 ![]() - 其中的[]中的内容可以自定义，比如[log] - ()中写使用该图片的文件相对图片的相对路径 方法二： &lt;img src=&quot;img/1.jpg&quot; width=256 height=256 /&gt; 图片引用方法一实例此时img文件夹和当前文档在同一级目录下 图片引用方法二实例，可以控制图片大小 让图片居中的方法，使用div标签 - 斜体- 用左右各一个 *的方式包裹住文字就是斜体的语法 - 粗体- 用左右各两个**的方式包裹住文字就是粗体的语法 - 改变字体大小- 一个字、一句话、一个段落加上#就可以改变字体的大小 - 分割线- 输入三个--就可以得到分割线 - 引用-在内容首位加入&gt;符号即可 - 表格1、 原生的表格语法 | 嘻嘻 | 哈哈 | 呵呵 | :------------- :|:-------------:| :-----:| | 你好|我好|大家好 | | 是的| 是的 | 是的 | 2、 也可以使用html语言来实现，实例如下 &lt;table&gt; &lt;tr&gt; &lt;th width=10%, bgcolor=yellow &gt;参数&lt;/th&gt; &lt;th width=40%, bgcolor=yellow&gt;详细解释&lt;/th&gt; &lt;th width=50%, bgcolor=yellow&gt;备注&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor=#eeeeee&gt; -l &lt;/td&gt; &lt;td&gt; use a long listing format &lt;/td&gt; &lt;td&gt; 以长列表方式显示（显示出文件/文件夹详细信息） &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td bgcolor=#00FF00&gt;-t &lt;/td&gt; &lt;td&gt; sort by modification time &lt;/td&gt; &lt;td&gt; 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） &lt;/td&gt; &lt;tr&gt; &lt;td bgcolor=rgb(0,10,0)&gt;-r &lt;/td&gt; &lt;td&gt; reverse order while sorting &lt;/td&gt; &lt;td&gt; 逆序排列 &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; html方式实现表格实例 参数 详细解释 备注 -l use a long listing format 以长列表方式显示（显示出文件/文件夹详细信息） -t sort by modification time 按照修改时间排序（默认最近被修改的文件/文件夹排在最前面） -r reverse order while sorting 逆序排列","categories":[],"tags":[{"name":"git&markdown语法","slug":"git-markdown语法","permalink":"http://www.python100.com/tags/git-markdown语法/"}]},{"title":"python笔记","slug":"笔记","date":"2018-06-20T18:36:00.000Z","updated":"2018-06-20T19:22:31.996Z","comments":true,"path":"2018/06/21/笔记/","link":"","permalink":"http://www.python100.com/2018/06/21/笔记/","excerpt":"","text":"1234567891011121314151617181920212223一个粗心的发报员在发送莫尔斯电码（Morse Code）的时候，忘记在发送字母和单词之间停顿，结果收报系统收到的是下面这样的一个没有分隔符的点（.）划（-）的序列（请忽略换行符）。已知这份报文的原始内容是一部著名英文小说的片段，请问，这部小说的作者是： (A) H. G. Wells(B) J. K. Rowling(C) Isaac Asimov(D) Lewis Carroll(E) Jack London(F) Stephen King(G) J. R. R. Tolkien(H) Edgar Rice Burroughs 请写出本题解题的主要思路，以及解题时使用的主要代码片段： 123456789101112131415161715分钟1. 排序方式：DESC | ASCE，分别表示按降序和升序排列，大小写不敏感2. 一组十进制整数字符串，以&quot;,&quot;符号作为分隔符例子：DESC 789,123,456ASCE 234,567,89排序方式DESC ASCE请忽略大小写输出描述:按指定排序方式排序后得到的十进制整数字符串；输出的数字字符串数组，以&quot;,&quot;字符作为分隔符。示例1输入DESC 789,123,456输出789,456,123#Python Ruby C/C++ PHP Java 1234567海投简历标准：1：头像：不要用真人的2：专业技能列表：多丰富一些 了解的也写上 敲门砖3：项目经验 看着写4：不要写培训 面向对象 对象是什么？：对象是一个模型 IT行业 这就是一个对象 C/C++，Python，PHP，Java 细节 楼房：平房，四合院，公寓 面：刀削面，牛肉丸子面，方便面 为什么这些可以称作是一个模型？： 有特征、有共同点 把共同点组合起来，就可以抽象的总结出来一个模型 那么这个模型就叫做对象 class class用来定义一个类(一个共同点的模型)： 属性： 函数：方法，人们喜欢把类中的函数叫方法 变量：字符串，列表，元组，字典，集合 类：一个属性集合 实例：在内存里通过模型实例化创建的数据 实例是一个容器一样，包含了所有类里的属性，而且是实际存在于内存中的 实例化：通过类名括号的方式 123class A: passa = A() # 实例化 面向对象的语法中，我们可以通过xxx.xxxx来获取到对应的属性 1234mylist = [1,2,3,4,5]mylist.remove(2)mylist[1, 3, 4, 5] Python中处处皆对象 self指针的意义123456789101.self是一个将我们函数声明为单独为一个实例工作的参数2.每一个加了self的函数或者变量 都只能为自己的实例来工作 c1.run() c2.run() 3.在实例调用的时候，当前实例都会覆盖掉self4.self用来指向当前工作实例 self是约定俗称的命名，你也可以叫别的，但是一般都叫self #init 12345678__init__函数为每一个实例进行数据的初始化工作 构造函数 X 数据初始化函数 √ 就是为了给实例创建属于自己的变量__init__函数在实例化过程中自动调用，不需要你手动的来调用__init__函数不允许有返回值，一旦有返回值，那么就报错啦 TypeError: __init__() should return None, not &apos;int&apos; 类型错误： 该函数必须返回一个None，而不是int 郑州市金水区聚源路与宏图街交叉口聚源国际大厦1309","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.python100.com/tags/python/"}]}]}